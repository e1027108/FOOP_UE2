OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:38:35.797668+02:00' ],		#prior : OmReference [ 'Pharo.9qbbp6apfe62bmp92dn7uevva', '96' ],		#self : OmReference [ '1' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CellRenderer\r\tinstanceVariableNames: \'position grid form\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Snake_Game_Model\''			},			#name : #CellRenderer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #grid,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #form,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CellRenderer class\r\tinstanceVariableNames: \'\''				},				#name : #'CellRenderer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CellRenderer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Snake_Game_Model,			#package : #Snake_Game_Model,			#sharedPools : OrderedCollection [ ]		},		#protocol : #drawing	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:38:57.643668+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #render,			#protocol : #drawing,			#sourceCode : 'render\r\tself\r\t\trenderBorder;\r\t\trenderContents',			#stamp : 'Patrick 6/17/2017 15:38',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:39:02.552668+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #render,			#protocol : #drawing,			#sourceCode : 'render\r\tself\r\t\trenderBorder;\r\t\trenderContents',			#stamp : 'Patrick 6/17/2017 15:38',			#package : #Snake_Game_Model		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #render,			#protocol : #drawing,			#sourceCode : 'render\r\tself\r\t\trenderBorder;\r\t\trenderContents.',			#stamp : 'Patrick 6/17/2017 15:39',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:39:08.257668+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #render,			#protocol : #drawing,			#sourceCode : 'render\r\tself\r\t\trenderBorder;\r\t\trenderContents.',			#stamp : 'Patrick 6/17/2017 15:39',			#package : #Snake_Game_Model		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #render,			#protocol : #drawing,			#sourceCode : 'render\r\tself\r\t\trenderBorder;\r\t\trenderContents',			#stamp : 'Patrick 6/17/2017 15:39',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:39:53.180668+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #renderBorder,			#protocol : #drawing,			#sourceCode : 'renderBorder\r\t"will create border for cell"',			#stamp : 'Patrick 6/17/2017 15:39',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:40:06.762668+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #renderContents,			#protocol : #drawing,			#sourceCode : 'renderContents\r\t"will color cell or show an artifact later"',			#stamp : 'Patrick 6/17/2017 15:40',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:46:25.036668+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #'as yet unclassified',			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.',			#stamp : 'Patrick 6/17/2017 15:46',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:46:25.185668+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #'as yet unclassified',			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.',			#stamp : 'Patrick 6/17/2017 15:46',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.',			#stamp : 'Patrick 6/17/2017 15:46',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:46:55.687668+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.',			#stamp : 'Patrick 6/17/2017 15:46',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tgrid: grid;\r\t\tform: form.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:46',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:48:02.497668+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CellRenderer\r\tinstanceVariableNames: \'position grid form\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Snake_Game_Model\''			},			#name : #CellRenderer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #position,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #grid,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #form,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CellRenderer class\r\tinstanceVariableNames: \'\''				},				#name : #'CellRenderer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CellRenderer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Snake_Game_Model,			#package : #Snake_Game_Model,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #CellRenderer\r\tinstanceVariableNames: \'position cellGrid cellForm\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'Snake_Game_Model\''			},			#name : #CellRenderer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #position,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #cellGrid,					#parent : @27				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CellRenderer,						#isMetaSide : false					},					#name : #cellForm,					#parent : @27				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CellRenderer class\r\tinstanceVariableNames: \'\''				},				#name : #'CellRenderer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @27			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CellRenderer,					#isMetaSide : false				},				#parent : @27,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #Snake_Game_Model,			#package : #Snake_Game_Model,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:48:15.049668+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellGrid,			#protocol : #accessing,			#sourceCode : 'cellGrid\r\t^ cellGrid',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:48:25.845668+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellGrid,			#protocol : #accessing,			#sourceCode : 'cellGrid\r\t^ cellGrid',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:48:37.663668+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpRenameMethodRefactoring {		#oldSelector : #grid,		#newSelector : #cellGrid,		#affectedClassName : #CellRenderer	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2017-06-17T15:48:37.681668+02:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellGrid,			#protocol : #accessing,			#sourceCode : 'cellGrid\r\t^ grid',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2017-06-17T15:48:37.796668+02:00' ],		#trigger : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FileList,				#isMetaSide : false			},			#name : #cellGrid,			#protocol : #'user interface',			#sourceCode : 'cellGrid\r\t^ grid ifNil: [ grid := self morphicGrid ]',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Tool-FileList		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2017-06-17T15:48:37.819668+02:00' ],		#trigger : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FileList,				#isMetaSide : false			},			#name : #updateFileList,			#protocol : #private,			#sourceCode : 'updateFileList\r\t"Update my files list with file names in the current directory  \r\tthat match the pattern.\r\tThe pattern string may have embedded newlines or semicolons; these separate different patterns."\r\tlist := self listForPattern: pattern.\r\tlistIndex := self getListIndex.\r\tvolumeListIndex := volumeList size.\r\tcontents := \'\'.\r\tself changed: #volumeListIndex.\r\tself changed: #list.\r\tself changed: #pattern.\r\tself grid deselectAll.\r\tself grid updateList.\r\tself updateButtonRow',			#stamp : 'PabloTesone 3/3/2017 15:39',			#package : #Tool-FileList		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FileList,				#isMetaSide : false			},			#name : #updateFileList,			#protocol : #private,			#sourceCode : 'updateFileList\r\t"Update my files list with file names in the current directory  \r\tthat match the pattern.\r\tThe pattern string may have embedded newlines or semicolons; these separate different patterns."\r\tlist := self listForPattern: pattern.\r\tlistIndex := self getListIndex.\r\tvolumeListIndex := volumeList size.\r\tcontents := \'\'.\r\tself changed: #volumeListIndex.\r\tself changed: #list.\r\tself changed: #pattern.\r\tself cellGrid deselectAll.\r\tself cellGrid updateList.\r\tself updateButtonRow',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Tool-FileList		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2017-06-17T15:48:37.821668+02:00' ],		#trigger : OmReference [ '13' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #grid,			#protocol : #accessing,			#sourceCode : 'grid\r\t^ grid',			#stamp : 'Patrick 6/17/2017 15:23',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2017-06-17T15:48:37.849668+02:00' ],		#trigger : OmReference [ '13' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FileList,				#isMetaSide : false			},			#name : #grid,			#protocol : #'user interface',			#sourceCode : 'grid\r\t^ grid ifNil: [ grid := self morphicGrid ]',			#stamp : 'AlexisParseghian 3/15/2012 23:57',			#package : #Tool-FileList		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:48:51.904668+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpRenameMethodRefactoring {		#oldSelector : #'grid:',		#newSelector : #'cellGrid:',		#affectedClassName : #CellRenderer	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2017-06-17T15:48:51.932668+02:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'cellGrid:',			#protocol : #accessing,			#sourceCode : 'cellGrid: anObject\r\tgrid := anObject',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2017-06-17T15:48:52.044668+02:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Point,				#isMetaSide : false			},			#name : #'cellGrid:',			#protocol : #'point functions',			#sourceCode : 'cellGrid: aPoint \r\t"Answer a Point to the nearest rounded grid modules specified by aPoint."\r\t| newX newY |\r\tnewX := x + (aPoint x // 2) truncateTo: aPoint x.\r\tnewY := y + (aPoint y // 2) truncateTo: aPoint y.\r\t^ newX @ newY',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2017-06-17T15:48:52.149668+02:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Rectangle class',				#isMetaSide : true			},			#name : #'fromUser:',			#protocol : #'*Morphic-Base',			#sourceCode : 'fromUser: gridPoint \r\t"Answer a Rectangle that is determined by having the user \r\tdesignate the top left and bottom right corners. \r\tThe cursor reamins linked with the sensor, but\r\tthe outline is kept gridded."\r\t| originRect |\r\tself activeHand showTemporaryCursor: Cursor origin.\r\r\toriginRect :=  ((self activeHand cursorPoint grid: gridPoint) extent: 0 @ 0) \r\t\t\t\t\tnewRectFrom: [ :f :pt | (pt grid: gridPoint) extent: 0 @ 0 ].\r\t\t\t\t\t\r\tself activeHand showTemporaryCursor: Cursor bottomRight.\r\r\t^  originRect newRectFrom: [ :f :pt | f origin corner: (pt grid: gridPoint) ]',			#stamp : 'StephaneDucasse 5/13/2012 20:02',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Rectangle class',				#isMetaSide : true			},			#name : #'fromUser:',			#protocol : #'*Morphic-Base',			#sourceCode : 'fromUser: gridPoint \r\t"Answer a Rectangle that is determined by having the user \r\tdesignate the top left and bottom right corners. \r\tThe cursor reamins linked with the sensor, but\r\tthe outline is kept gridded."\r\t| originRect |\r\tself activeHand showTemporaryCursor: Cursor origin.\r\r\toriginRect :=  ((self activeHand cursorPoint cellGrid: gridPoint) extent: 0 @ 0) \r\t\t\t\t\tnewRectFrom: [ :f :pt | (pt cellGrid: gridPoint) extent: 0 @ 0 ].\r\t\t\t\t\t\r\tself activeHand showTemporaryCursor: Cursor bottomRight.\r\r\t^  originRect newRectFrom: [ :f :pt | f origin corner: (pt cellGrid: gridPoint) ]',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2017-06-17T15:48:52.263668+02:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MethodFinder,				#isMetaSide : false			},			#name : #initialize2,			#protocol : #initialize,			#sourceCode : 'initialize2\r\t"The methods we are allowed to use.  (MethodFinder new initialize) "\r\r"Set"\r\t#("in class" sizeFor:\r"testing" "adding" "removing" "enumerating"\r"private" array findElementOrNil: \r"accessing" someElement) do: [:sel | Approved add: sel].\r\r"Dictionary, IdentityDictionary, IdentitySet"\r\t#("accessing" associationAt: associationAt:ifAbsent: at:ifPresent: keyAtIdentityValue: keyAtIdentityValue:ifAbsent: keyAtValue: keyAtValue:ifAbsent: keys\r"testing" includesKey: ) do: [:sel | Approved add: sel].\r\t#(removeKey: removeKey:ifAbsent:\r) do: [:sel | AddAndRemove add: sel].\r\r"LinkedList, Interval, MappedCollection"\r\t#("in class"  from:to: from:to:by:\r"accessing" contents) do: [:sel | Approved add: sel].\r\t#(\r"adding" addFirst: addLast:) do: [:sel | AddAndRemove add: sel].\r\r"OrderedCollection, SortedCollection"\r\t#("accessing" after: before:\r"copying" copyEmpty\r"removing" "enumerating" "private" \r"accessing" sortBlock) do: [:sel | Approved add: sel].\r\t#("adding" add:after: add:afterIndex: add:before: addAllFirst: addAllLast: addFirst: addLast:\r"removing" removeAt: removeFirst removeLast\r"accessing" sortBlock:) do: [:sel | AddAndRemove add: sel].\r\r"Character"\r\t#("in class, instance creation" allCharacters digitValue: new separators\r\t"accessing untypeable characters" backspace cr enter lf linefeed nbsp newPage space tab\r\t"constants" alphabet characterTable\r"accessing" asciiValue digitValue\r"comparing"\r"testing" isAlphaNumeric isDigit isLetter isLowercase isSafeForHTTP isSeparator isSpecial isUppercase isVowel tokenish\r"copying"\r"converting" asLowercase asUppercase\r\t) do: [:sel | Approved add: sel].\r\r"String"\r\t#("in class, instance creation" crlf \r\t"primitives" findFirstInString:inSet:startingAt: indexOfAscii:inString:startingAt: \t"internet"\r"accessing" byteAt: endsWithDigit #findAnySubstring:startingAt: #findBetweenSubstrings: findDelimiters:startingAt: findString:startingAt: findString:startingAt:caseSensitive: findTokens: findTokens:includes: findTokens:keep: #includesSubstring: includesSubstring:caseSensitive: indexOf:startingAt: indexOfAnyOf: indexOfAnyOf:ifAbsent: indexOfAnyOf:startingAt: indexOfAnyOf:startingAt:ifAbsent: lineCorrespondingToIndex: lineCount lineNumber: #skipAnySubstring:startingAt: skipDelimiters:startingAt: startsWithDigit\r"comparing" alike: beginsWith: caseSensitiveLessOrEqual: charactersExactlyMatching: compare: endsWith: endsWithAnyOf: sameAs: startingAt:match:startingAt:\r"copying" copyReplaceTokens:with: padLeftTo: padRightTo: padLeftTo:with: padRightTo:with:\r"converting" asByteArray asDate asFileName asText asTime asUrl capitalized compressWithTable: contractTo: correctAgainst: initialIntegerOrNil keywords quoted withoutPeriodSuffix splitInteger stemAndNumericSuffix substrings surroundedBySingleQuotes truncateWithElipsisTo: trimBoth uncapitalized withNoLineLongerThan: withSeparatorsCompacted withoutLeadingDigits trimRight trimLeft\r"displaying" "printing"\r"system primitives" compare:with:collated: \r"Celeste" withCRs\r"internet" decodeMimeHeader decodeQuotedPrintable withInternetLineEndings withSqueakLineEndings withoutQuoting urlEncoded UrlDecoded\r"testing" isAllSeparators lastSpacePosition\r"paragraph support" indentationIfBlank:\r"arithmetic" ) do: [:sel | Approved add: sel].\r\t#(byteAt:put: translateToLowercase match:) do: [:sel | AddAndRemove add: sel].\r\r"Symbol"\r\t#("in class, private" hasInterned:ifTrue:\r\t"access" morePossibleSelectorsFor: possibleSelectorsFor: selectorsContaining: thatStarts:skipping:\r"accessing" "comparing" "copying" "converting" "printing" \r"testing" isInfix isKeyword isUnary) do: [:sel | Approved add: sel].\r\r"Array"\r\t#("comparing" "converting" \r"printing" "private" hasLiteralSuchThat:) do: [:sel | Approved add: sel].\r\r"Array2D"\r\t#("access" at:at: atCol: atCol:put: atRow: extent extent:fromArray: height width width:height:type:) do: [:sel | Approved add: sel].\r\t#(at:at:add: at:at:put: atRow:put: ) do: [:sel | AddAndRemove add: sel].\r\r"ByteArray"\r\t#("accessing" doubleWordAt: wordAt: \r"platform independent access" longAt:bigEndian: shortAt:bigEndian: unsignedLongAt:bigEndian: unsignedShortAt:bigEndian: \r"converting") do: [:sel | Approved add: sel].\r\t#(doubleWordAt:put: wordAt:put: longAt:put:bigEndian: shortAt:put:bigEndian: unsignedLongAt:put:bigEndian: unsignedShortAt:put:bigEndian:\r\t) do: [:sel | AddAndRemove add: sel].\r\r"FloatArray"\t\t"Dont know what happens when prims not here"\r\tfalse ifTrue: [#("accessing" "arithmetic" *= += -= /=\r"comparing"\r"primitives-plugin" primAddArray: primAddScalar: primDivArray: primDivScalar: primMulArray: primMulScalar: primSubArray: primSubScalar:\r"primitives-translated" primAddArray:withArray:from:to: primMulArray:withArray:from:to: primSubArray:withArray:from:to:\r"converting" "private" "user interface") do: [:sel | Approved add: sel].\r\t].\r\r"IntegerArray, WordArray"\r"RunArray"\r\t#("in class, instance creation" runs:values: scanFrom:\r"accessing" runLengthAt: \r"adding" "copying"\r"private" runs values) do: [:sel | Approved add: sel].\r\t#(coalesce repeatLast:ifEmpty: repeatLastIfEmpty:\r\t\t) do: [:sel | AddAndRemove add: sel].\r\r"Stream  -- many operations change its state"\r\t#("testing" atEnd) do: [:sel | Approved add: sel].\r\t#("accessing" next: nextMatchAll: nextMatchFor: upToEnd\rnext:put: nextPut: nextPutAll: "printing" print:\r\t) do: [:sel | AddAndRemove add: sel].\r\r"PositionableStream"\r\t#("accessing" contentsOfEntireFile originalContents peek peekFor: "testing"\r"positioning" position ) do: [:sel | Approved add: sel].\r\t#(nextDelimited: nextLine upTo: position: reset resetContents setToEnd skip: skipTo: upToAll: ) do: [:sel | AddAndRemove add: sel].\r\t"Because it is so difficult to test the result of an operation on a Stream (you have to supply another Stream in the same state), we don\'t support Streams beyond the basics.  We want to find the messages that convert Streams to other things."\r\r"ReadWriteStream"\r\t#("file status" closed) do: [:sel | Approved add: sel].\r\t#("accessing" next: on: ) do: [:sel | AddAndRemove add: sel].\r\r"WriteStream"\r\t#("in class, instance creation" on:from:to: with: with:from:to:\r\t\t) do: [:sel | Approved add: sel].\r\t#("positioning" resetToStart\r"character writing" crtab crtab:) do: [:sel | AddAndRemove add: sel].\r\r"LookupKey, Association, Link"\r\t#("accessing" key nextLink) do: [:sel | Approved add: sel].\r\t#(key: key:value: nextLink:) do: [:sel | AddAndRemove add: sel].\r\r"Point"\r\t#("in class, instance creation" r:degrees: x:y:\r"accessing" x y "comparing" "arithmetic" "truncation and round off"\r"polar coordinates" degrees r theta\r"point functions" bearingToPoint: crossProduct: distanceTo: dotProduct: eightNeighbors flipBy:centerAt: fourNeighbors grid: nearestPointAlongLineFrom:to: nearestPointOnLineFrom:to: normal normalized octantOf: onLineFrom:to: onLineFrom:to:within: quadrantOf: rotateBy:centerAt: transposed unitVector\r"converting" asFloatPoint asIntegerPoint corner: extent: rect:\r"transforming" adhereTo: rotateBy:about: scaleBy: scaleFrom:to: translateBy: "copying"\r"interpolating" interpolateTo:at:) do: [:sel | Approved add: sel].\r\r"Rectangle"\r\t#("in class, instance creation" center:extent: encompassing: left:right:top:bottom: \r\tmerging: origin:corner: origin:extent: \r"accessing" area bottom bottomCenter bottomLeft bottomRight boundingBox center corner corners innerCorners left leftCenter origin right rightCenter top topCenter topLeft topRight\r"comparing"\r"rectangle functions" adjustTo:along: amountToTranslateWithin: areasOutside: bordersOn:along: encompass: expandBy: extendBy: forPoint:closestSideDistLen: insetBy: insetOriginBy:cornerBy: intersect: merge: pointNearestTo: quickMerge: rectanglesAt:height: sideNearestTo: translatedToBeWithin: withBottom: withHeight: withLeft: withRight: withSide:setTo: withTop: withWidth:\r"testing" containsPoint: containsRect: hasPositiveExtent intersects: isTall isWide\r"truncation and round off"\r"transforming" align:with: centeredBeneath: newRectFrom: squishedWithin: "copying"\r\t) do: [:sel | Approved add: sel].\r\r"Color"\r\t#("in class, instance creation" colorFrom: colorFromPixelValue:depth: gray: h:s:v: r:g:b: r:g:b:alpha: r:g:b:range:\r\t"named colors" black blue brown cyan darkGray gray green lightBlue lightBrown lightCyan lightGray lightGreen lightMagenta lightOrange lightRed lightYellow magenta orange red transparent veryDarkGray veryLightGray veryVeryDarkGray veryVeryLightGray white yellow\r\t"other"  indexedColors pixelScreenForDepth: quickHighLight:\r"access" alpha blue brightness green hue luminance red saturation\r"equality"\r"queries" isBitmapFill isBlack isGray isSolidFill isTranslucent isTranslucentColor\r"transformations" alpha: dansDarker darker lighter mixed:with: muchLighter slightlyDarker slightlyLighter veryMuchLighter alphaMixed:with:\r"groups of shades" darkShades: lightShades: mix:shades: wheel:\r"printing" shortPrintString\r"other" colorForInsets rgbTriplet\r"conversions" asB3DColor asColor balancedPatternForDepth: bitPatternForDepth: closestPixelValue1 closestPixelValue2 closestPixelValue4 closestPixelValue8 dominantColor halfTonePattern1 halfTonePattern2 indexInMap: pixelValueForDepth: pixelWordFor:filledWith: pixelWordForDepth: scaledPixelValue32\r"private" privateAlpha privateBlue privateGreen privateRGB privateRed "copying"\r\t) do: [:sel | Approved add: sel].\r\r"\tFor each selector that requires a block argument, add (selector argNum) \r\t\tto the set Blocks."\r"ourClasses := #(Object Boolean True False UndefinedObject Behavior ClassDescription Class Metaclass MethodContext BlockContext Message Magnitude Date Time Number Integer SmallInteger LargeNegativeInteger LargePositiveInteger Float Fraction Random Collection SequenceableCollection ArrayedCollection Bag Set Dictionary IdentityDictionary IdentitySet LinkedList Interval MappedCollection OrderedCollection SortedCollection Character String Symbol Array Array2D ByteArray FloatArray IntegerArray WordArray RunArray Stream PositionableStream ReadWriteStream WriteStream LookupKey Association Link Point Rectangle Color).\rourClasses do: [:clsName | cls := Smalltalk at: clsName.\r\t(cls selectors) do: [:aSel |\r\t\t((Approved includes: aSel) or: [AddAndRemove includes: aSel]) ifTrue: [\r\t\t\t(cls formalParametersAt: aSel) withIndexDo: [:tName :ind |\r\t\t\t\t(tName endsWith: \'Block\') ifTrue: [\r\t\t\t\t\tBlocks add: (Array with: aSel with: ind)]]]]].\r"\r#((timesRepeat: 1 ) (indexOf:ifAbsent: 2 ) (pairsCollect: 1 ) (mergeSortFrom:to:by: 3 ) (ifNotNil:ifNil: 1 ) (ifNotNil:ifNil: 2 ) (ifNil: 1 ) (at:ifAbsent: 2 ) (ifNil:ifNotNil: 1 ) (ifNil:ifNotNil: 2 ) (ifNotNil: 1) (identityIndexOf:ifAbsent: 2 ) (sort: 1 ) (sortBlock: 1 ) (detectMax: 1 ) (repeatLastIfEmpty: 1 ) (allSubclassesWithLevelDo:startingLevel: 1 ) (keyAtValue:ifAbsent: 2 ) (in: 1 ) (ifTrue: 1 ) (or: 1 ) (select: 1 ) (inject:into: 2 )  (forPoint:closestSideDistLen: 2 ) (value:ifError: 2 ) (selectorsDo: 1 ) (removeAllSuchThat: 1 ) (keyAtIdentityValue:ifAbsent: 2 ) (detectMin: 1 ) (detect:ifNone: 1 ) (ifTrue:ifFalse: 1 ) (ifTrue:ifFalse: 2 ) (detect:ifNone: 2 ) (hasLiteralSuchThat: 1 ) (indexOfAnyOf:ifAbsent: 2 ) (reject: 1 ) (newRectFrom: 1 ) (removeKey:ifAbsent: 2 ) (at:ifPresent: 2 ) (associationAt:ifAbsent: 2 ) (withIndexCollect: 1 ) (repeatLast:ifEmpty: 2 ) (findLast: 1 ) (indexOf:startingAt:ifAbsent: 3 ) (remove:ifAbsent: 2 ) (ifFalse:ifTrue: 1 ) (ifFalse:ifTrue: 2 ) (caseOf:otherwise: 2 ) (count: 1 ) (collect: 1 ) (sort: 1 ) (and: 1 ) (asSortedCollection: 1 ) (with:collect: 2 ) (sourceCodeAt:ifAbsent: 2 ) (detect: 1 ) (collectWithIndex: 1 ) (compiledMethodAt:ifAbsent: 2 ) (detectSum: 1 ) (indexOfSubCollection:startingAt:ifAbsent: 3 ) (findFirst: 1 ) (sourceMethodAt:ifAbsent: 2 ) (collect:thenSelect: 1 ) (collect:thenSelect: 2 ) (select:thenCollect: 1 ) (select:thenCollect: 2 ) (ifFalse: 1 ) (indexOfAnyOf:startingAt:ifAbsent: 3 ) (indentationIfBlank: 1 ) ) do: [:anArray |\r\tBlocks add: anArray].\r\rself initialize3.\r\r"\rMethodFinder new initialize.\rMethodFinder new organizationFiltered: TranslucentColor class \r"\r"Do not forget class messages for each of these classes"\r',			#stamp : 'StephaneDucasse 10/9/2016 20:33',			#package : #Tool-Finder		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MethodFinder,				#isMetaSide : false			},			#name : #initialize2,			#protocol : #initialize,			#sourceCode : 'initialize2\r\t"The methods we are allowed to use.  (MethodFinder new initialize) "\r\r"Set"\r\t#("in class" sizeFor:\r"testing" "adding" "removing" "enumerating"\r"private" array findElementOrNil: \r"accessing" someElement) do: [:sel | Approved add: sel].\r\r"Dictionary, IdentityDictionary, IdentitySet"\r\t#("accessing" associationAt: associationAt:ifAbsent: at:ifPresent: keyAtIdentityValue: keyAtIdentityValue:ifAbsent: keyAtValue: keyAtValue:ifAbsent: keys\r"testing" includesKey: ) do: [:sel | Approved add: sel].\r\t#(removeKey: removeKey:ifAbsent:\r) do: [:sel | AddAndRemove add: sel].\r\r"LinkedList, Interval, MappedCollection"\r\t#("in class"  from:to: from:to:by:\r"accessing" contents) do: [:sel | Approved add: sel].\r\t#(\r"adding" addFirst: addLast:) do: [:sel | AddAndRemove add: sel].\r\r"OrderedCollection, SortedCollection"\r\t#("accessing" after: before:\r"copying" copyEmpty\r"removing" "enumerating" "private" \r"accessing" sortBlock) do: [:sel | Approved add: sel].\r\t#("adding" add:after: add:afterIndex: add:before: addAllFirst: addAllLast: addFirst: addLast:\r"removing" removeAt: removeFirst removeLast\r"accessing" sortBlock:) do: [:sel | AddAndRemove add: sel].\r\r"Character"\r\t#("in class, instance creation" allCharacters digitValue: new separators\r\t"accessing untypeable characters" backspace cr enter lf linefeed nbsp newPage space tab\r\t"constants" alphabet characterTable\r"accessing" asciiValue digitValue\r"comparing"\r"testing" isAlphaNumeric isDigit isLetter isLowercase isSafeForHTTP isSeparator isSpecial isUppercase isVowel tokenish\r"copying"\r"converting" asLowercase asUppercase\r\t) do: [:sel | Approved add: sel].\r\r"String"\r\t#("in class, instance creation" crlf \r\t"primitives" findFirstInString:inSet:startingAt: indexOfAscii:inString:startingAt: \t"internet"\r"accessing" byteAt: endsWithDigit #findAnySubstring:startingAt: #findBetweenSubstrings: findDelimiters:startingAt: findString:startingAt: findString:startingAt:caseSensitive: findTokens: findTokens:includes: findTokens:keep: #includesSubstring: includesSubstring:caseSensitive: indexOf:startingAt: indexOfAnyOf: indexOfAnyOf:ifAbsent: indexOfAnyOf:startingAt: indexOfAnyOf:startingAt:ifAbsent: lineCorrespondingToIndex: lineCount lineNumber: #skipAnySubstring:startingAt: skipDelimiters:startingAt: startsWithDigit\r"comparing" alike: beginsWith: caseSensitiveLessOrEqual: charactersExactlyMatching: compare: endsWith: endsWithAnyOf: sameAs: startingAt:match:startingAt:\r"copying" copyReplaceTokens:with: padLeftTo: padRightTo: padLeftTo:with: padRightTo:with:\r"converting" asByteArray asDate asFileName asText asTime asUrl capitalized compressWithTable: contractTo: correctAgainst: initialIntegerOrNil keywords quoted withoutPeriodSuffix splitInteger stemAndNumericSuffix substrings surroundedBySingleQuotes truncateWithElipsisTo: trimBoth uncapitalized withNoLineLongerThan: withSeparatorsCompacted withoutLeadingDigits trimRight trimLeft\r"displaying" "printing"\r"system primitives" compare:with:collated: \r"Celeste" withCRs\r"internet" decodeMimeHeader decodeQuotedPrintable withInternetLineEndings withSqueakLineEndings withoutQuoting urlEncoded UrlDecoded\r"testing" isAllSeparators lastSpacePosition\r"paragraph support" indentationIfBlank:\r"arithmetic" ) do: [:sel | Approved add: sel].\r\t#(byteAt:put: translateToLowercase match:) do: [:sel | AddAndRemove add: sel].\r\r"Symbol"\r\t#("in class, private" hasInterned:ifTrue:\r\t"access" morePossibleSelectorsFor: possibleSelectorsFor: selectorsContaining: thatStarts:skipping:\r"accessing" "comparing" "copying" "converting" "printing" \r"testing" isInfix isKeyword isUnary) do: [:sel | Approved add: sel].\r\r"Array"\r\t#("comparing" "converting" \r"printing" "private" hasLiteralSuchThat:) do: [:sel | Approved add: sel].\r\r"Array2D"\r\t#("access" at:at: atCol: atCol:put: atRow: extent extent:fromArray: height width width:height:type:) do: [:sel | Approved add: sel].\r\t#(at:at:add: at:at:put: atRow:put: ) do: [:sel | AddAndRemove add: sel].\r\r"ByteArray"\r\t#("accessing" doubleWordAt: wordAt: \r"platform independent access" longAt:bigEndian: shortAt:bigEndian: unsignedLongAt:bigEndian: unsignedShortAt:bigEndian: \r"converting") do: [:sel | Approved add: sel].\r\t#(doubleWordAt:put: wordAt:put: longAt:put:bigEndian: shortAt:put:bigEndian: unsignedLongAt:put:bigEndian: unsignedShortAt:put:bigEndian:\r\t) do: [:sel | AddAndRemove add: sel].\r\r"FloatArray"\t\t"Dont know what happens when prims not here"\r\tfalse ifTrue: [#("accessing" "arithmetic" *= += -= /=\r"comparing"\r"primitives-plugin" primAddArray: primAddScalar: primDivArray: primDivScalar: primMulArray: primMulScalar: primSubArray: primSubScalar:\r"primitives-translated" primAddArray:withArray:from:to: primMulArray:withArray:from:to: primSubArray:withArray:from:to:\r"converting" "private" "user interface") do: [:sel | Approved add: sel].\r\t].\r\r"IntegerArray, WordArray"\r"RunArray"\r\t#("in class, instance creation" runs:values: scanFrom:\r"accessing" runLengthAt: \r"adding" "copying"\r"private" runs values) do: [:sel | Approved add: sel].\r\t#(coalesce repeatLast:ifEmpty: repeatLastIfEmpty:\r\t\t) do: [:sel | AddAndRemove add: sel].\r\r"Stream  -- many operations change its state"\r\t#("testing" atEnd) do: [:sel | Approved add: sel].\r\t#("accessing" next: nextMatchAll: nextMatchFor: upToEnd\rnext:put: nextPut: nextPutAll: "printing" print:\r\t) do: [:sel | AddAndRemove add: sel].\r\r"PositionableStream"\r\t#("accessing" contentsOfEntireFile originalContents peek peekFor: "testing"\r"positioning" position ) do: [:sel | Approved add: sel].\r\t#(nextDelimited: nextLine upTo: position: reset resetContents setToEnd skip: skipTo: upToAll: ) do: [:sel | AddAndRemove add: sel].\r\t"Because it is so difficult to test the result of an operation on a Stream (you have to supply another Stream in the same state), we don\'t support Streams beyond the basics.  We want to find the messages that convert Streams to other things."\r\r"ReadWriteStream"\r\t#("file status" closed) do: [:sel | Approved add: sel].\r\t#("accessing" next: on: ) do: [:sel | AddAndRemove add: sel].\r\r"WriteStream"\r\t#("in class, instance creation" on:from:to: with: with:from:to:\r\t\t) do: [:sel | Approved add: sel].\r\t#("positioning" resetToStart\r"character writing" crtab crtab:) do: [:sel | AddAndRemove add: sel].\r\r"LookupKey, Association, Link"\r\t#("accessing" key nextLink) do: [:sel | Approved add: sel].\r\t#(key: key:value: nextLink:) do: [:sel | AddAndRemove add: sel].\r\r"Point"\r\t#("in class, instance creation" r:degrees: x:y:\r"accessing" x y "comparing" "arithmetic" "truncation and round off"\r"polar coordinates" degrees r theta\r"point functions" bearingToPoint: crossProduct: distanceTo: dotProduct: eightNeighbors flipBy:centerAt: fourNeighbors #cellGrid: nearestPointAlongLineFrom:to: nearestPointOnLineFrom:to: normal normalized octantOf: onLineFrom:to: onLineFrom:to:within: quadrantOf: rotateBy:centerAt: transposed unitVector\r"converting" asFloatPoint asIntegerPoint corner: extent: rect:\r"transforming" adhereTo: rotateBy:about: scaleBy: scaleFrom:to: translateBy: "copying"\r"interpolating" interpolateTo:at:) do: [:sel | Approved add: sel].\r\r"Rectangle"\r\t#("in class, instance creation" center:extent: encompassing: left:right:top:bottom: \r\tmerging: origin:corner: origin:extent: \r"accessing" area bottom bottomCenter bottomLeft bottomRight boundingBox center corner corners innerCorners left leftCenter origin right rightCenter top topCenter topLeft topRight\r"comparing"\r"rectangle functions" adjustTo:along: amountToTranslateWithin: areasOutside: bordersOn:along: encompass: expandBy: extendBy: forPoint:closestSideDistLen: insetBy: insetOriginBy:cornerBy: intersect: merge: pointNearestTo: quickMerge: rectanglesAt:height: sideNearestTo: translatedToBeWithin: withBottom: withHeight: withLeft: withRight: withSide:setTo: withTop: withWidth:\r"testing" containsPoint: containsRect: hasPositiveExtent intersects: isTall isWide\r"truncation and round off"\r"transforming" align:with: centeredBeneath: newRectFrom: squishedWithin: "copying"\r\t) do: [:sel | Approved add: sel].\r\r"Color"\r\t#("in class, instance creation" colorFrom: colorFromPixelValue:depth: gray: h:s:v: r:g:b: r:g:b:alpha: r:g:b:range:\r\t"named colors" black blue brown cyan darkGray gray green lightBlue lightBrown lightCyan lightGray lightGreen lightMagenta lightOrange lightRed lightYellow magenta orange red transparent veryDarkGray veryLightGray veryVeryDarkGray veryVeryLightGray white yellow\r\t"other"  indexedColors pixelScreenForDepth: quickHighLight:\r"access" alpha blue brightness green hue luminance red saturation\r"equality"\r"queries" isBitmapFill isBlack isGray isSolidFill isTranslucent isTranslucentColor\r"transformations" alpha: dansDarker darker lighter mixed:with: muchLighter slightlyDarker slightlyLighter veryMuchLighter alphaMixed:with:\r"groups of shades" darkShades: lightShades: mix:shades: wheel:\r"printing" shortPrintString\r"other" colorForInsets rgbTriplet\r"conversions" asB3DColor asColor balancedPatternForDepth: bitPatternForDepth: closestPixelValue1 closestPixelValue2 closestPixelValue4 closestPixelValue8 dominantColor halfTonePattern1 halfTonePattern2 indexInMap: pixelValueForDepth: pixelWordFor:filledWith: pixelWordForDepth: scaledPixelValue32\r"private" privateAlpha privateBlue privateGreen privateRGB privateRed "copying"\r\t) do: [:sel | Approved add: sel].\r\r"\tFor each selector that requires a block argument, add (selector argNum) \r\t\tto the set Blocks."\r"ourClasses := #(Object Boolean True False UndefinedObject Behavior ClassDescription Class Metaclass MethodContext BlockContext Message Magnitude Date Time Number Integer SmallInteger LargeNegativeInteger LargePositiveInteger Float Fraction Random Collection SequenceableCollection ArrayedCollection Bag Set Dictionary IdentityDictionary IdentitySet LinkedList Interval MappedCollection OrderedCollection SortedCollection Character String Symbol Array Array2D ByteArray FloatArray IntegerArray WordArray RunArray Stream PositionableStream ReadWriteStream WriteStream LookupKey Association Link Point Rectangle Color).\rourClasses do: [:clsName | cls := Smalltalk at: clsName.\r\t(cls selectors) do: [:aSel |\r\t\t((Approved includes: aSel) or: [AddAndRemove includes: aSel]) ifTrue: [\r\t\t\t(cls formalParametersAt: aSel) withIndexDo: [:tName :ind |\r\t\t\t\t(tName endsWith: \'Block\') ifTrue: [\r\t\t\t\t\tBlocks add: (Array with: aSel with: ind)]]]]].\r"\r#((timesRepeat: 1 ) (indexOf:ifAbsent: 2 ) (pairsCollect: 1 ) (mergeSortFrom:to:by: 3 ) (ifNotNil:ifNil: 1 ) (ifNotNil:ifNil: 2 ) (ifNil: 1 ) (at:ifAbsent: 2 ) (ifNil:ifNotNil: 1 ) (ifNil:ifNotNil: 2 ) (ifNotNil: 1) (identityIndexOf:ifAbsent: 2 ) (sort: 1 ) (sortBlock: 1 ) (detectMax: 1 ) (repeatLastIfEmpty: 1 ) (allSubclassesWithLevelDo:startingLevel: 1 ) (keyAtValue:ifAbsent: 2 ) (in: 1 ) (ifTrue: 1 ) (or: 1 ) (select: 1 ) (inject:into: 2 )  (forPoint:closestSideDistLen: 2 ) (value:ifError: 2 ) (selectorsDo: 1 ) (removeAllSuchThat: 1 ) (keyAtIdentityValue:ifAbsent: 2 ) (detectMin: 1 ) (detect:ifNone: 1 ) (ifTrue:ifFalse: 1 ) (ifTrue:ifFalse: 2 ) (detect:ifNone: 2 ) (hasLiteralSuchThat: 1 ) (indexOfAnyOf:ifAbsent: 2 ) (reject: 1 ) (newRectFrom: 1 ) (removeKey:ifAbsent: 2 ) (at:ifPresent: 2 ) (associationAt:ifAbsent: 2 ) (withIndexCollect: 1 ) (repeatLast:ifEmpty: 2 ) (findLast: 1 ) (indexOf:startingAt:ifAbsent: 3 ) (remove:ifAbsent: 2 ) (ifFalse:ifTrue: 1 ) (ifFalse:ifTrue: 2 ) (caseOf:otherwise: 2 ) (count: 1 ) (collect: 1 ) (sort: 1 ) (and: 1 ) (asSortedCollection: 1 ) (with:collect: 2 ) (sourceCodeAt:ifAbsent: 2 ) (detect: 1 ) (collectWithIndex: 1 ) (compiledMethodAt:ifAbsent: 2 ) (detectSum: 1 ) (indexOfSubCollection:startingAt:ifAbsent: 3 ) (findFirst: 1 ) (sourceMethodAt:ifAbsent: 2 ) (collect:thenSelect: 1 ) (collect:thenSelect: 2 ) (select:thenCollect: 1 ) (select:thenCollect: 2 ) (ifFalse: 1 ) (indexOfAnyOf:startingAt:ifAbsent: 3 ) (indentationIfBlank: 1 ) ) do: [:anArray |\r\tBlocks add: anArray].\r\rself initialize3.\r\r"\rMethodFinder new initialize.\rMethodFinder new organizationFiltered: TranslucentColor class \r"\r"Do not forget class messages for each of these classes"\r',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Tool-Finder		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2017-06-17T15:48:52.460668+02:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemWindow,				#isMetaSide : false			},			#name : #'justDroppedInto:event:',			#protocol : #'*Polymorph-Widgets',			#sourceCode : 'justDroppedInto: aMorph event: anEvent\r\t"Release the mouse focus as well."\r\t\r\tisCollapsed\r\t\tifTrue: [\r\t\t\tself position: ((self position max: 0@0) grid: 8@8).\r\t\t\tcollapsedFrame := self bounds\r\t\t]\r\t\tifFalse: [\r\t\t\tfullFrame := self bounds.\r\t\t\tself isTopWindow ifFalse: [self activate]\r\t\t].\r\t\r\tanEvent hand releaseMouseFocus.\r\t\r\t^super justDroppedInto: aMorph event: anEvent',			#stamp : 'HenrikNergaard 11/7/2015 00:51',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SystemWindow,				#isMetaSide : false			},			#name : #'justDroppedInto:event:',			#protocol : #'*Polymorph-Widgets',			#sourceCode : 'justDroppedInto: aMorph event: anEvent\r\t"Release the mouse focus as well."\r\t\r\tisCollapsed\r\t\tifTrue: [\r\t\t\tself position: ((self position max: 0@0) cellGrid: 8@8).\r\t\t\tcollapsedFrame := self bounds\r\t\t]\r\t\tifFalse: [\r\t\t\tfullFrame := self bounds.\r\t\t\tself isTopWindow ifFalse: [self activate]\r\t\t].\r\t\r\tanEvent hand releaseMouseFocus.\r\t\r\t^super justDroppedInto: aMorph event: anEvent',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2017-06-17T15:48:52.466668+02:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tgrid: grid;\r\t\tform: form.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:46',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellGrid: grid;\r\t\tform: form.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2017-06-17T15:48:52.468668+02:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'grid:',			#protocol : #accessing,			#sourceCode : 'grid: anObject\r\tgrid := anObject',			#stamp : 'Patrick 6/17/2017 15:23',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2017-06-17T15:48:52.490668+02:00' ],		#trigger : OmReference [ '19' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Point,				#isMetaSide : false			},			#name : #'grid:',			#protocol : #'point functions',			#sourceCode : 'grid: aPoint \r\t"Answer a Point to the nearest rounded grid modules specified by aPoint."\r\t| newX newY |\r\tnewX := x + (aPoint x // 2) truncateTo: aPoint x.\r\tnewY := y + (aPoint y // 2) truncateTo: aPoint y.\r\t^ newX @ newY',			#stamp : 'lr 7/4/2009 10:42',			#package : #Kernel		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:48:59.331668+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellGrid,			#protocol : #accessing,			#sourceCode : 'cellGrid\r\t^ grid',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Model		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellGrid,			#protocol : #accessing,			#sourceCode : 'cellGrid\r\t^ cellGrid',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:49:04.595668+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'cellGrid:',			#protocol : #accessing,			#sourceCode : 'cellGrid: anObject\r\tgrid := anObject',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Model		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'cellGrid:',			#protocol : #accessing,			#sourceCode : 'cellGrid: anObject\r\tcellGrid := anObject',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:49:17.605668+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpRenameMethodRefactoring {		#oldSelector : #form,		#newSelector : #cellForm,		#affectedClassName : #CellRenderer	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2017-06-17T15:49:18.024668+02:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FT2GlyphRenderer,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2017-06-17T15:49:18.030668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2017-06-17T15:49:18.151668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClippingCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^canvas form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2017-06-17T15:49:18.158668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2017-06-17T15:49:18.291668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensCanvasWrapper,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ self canvas surface asForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Morphic		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2017-06-17T15:49:18.400668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2017-06-17T15:49:18.411668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t"Answer the value of form"\r\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2017-06-17T15:49:18.517668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowFormRenderer,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2017-06-17T15:49:18.522668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ image\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2017-06-17T15:49:18.627668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InfiniteForm,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #'fillstyle protocol',			#sourceCode : 'cellForm\r\t"Bitmap fills respond to #form"\r\t^patternForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #'Graphics-Display Objects'		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2017-06-17T15:49:18.733668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HiRulerBuilder,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #building,			#sourceCode : 'cellForm\r\t| surface form |\r\tsurface := self athensSurface.\r\r\tform := Form \r\t\textent: (surface width @ surface height) \r\t\tdepth: 32.\r\r\tform getCanvas \r\t\tdrawImage: surface asForm \r\t\tat: 0@0.\r\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Hiedra		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2017-06-17T15:49:18.738668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NullCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^Form extent: self extent',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2017-06-17T15:49:18.743668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ColorMappingCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^myCanvas form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2017-06-17T15:49:18.752668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonImagePaint,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2017-06-17T15:49:18.757668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Form,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t"Answer the receiver\'s form.  For vanilla Forms, this degenerates to self.  Makes several methods that operate on both Forms and MaskedForms much more straightforward."\r\r\t^ self',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #'Graphics-Display Objects'		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2017-06-17T15:49:18.761668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Canvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\r\t^ Display\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2017-06-17T15:49:18.862668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnImageExampleDelegate,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ self formForImageEntity: self image\r\t',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Zinc-HTTP		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2017-06-17T15:49:18.868668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2017-06-17T15:49:18.873668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #imageExport,			#protocol : #other,			#sourceCode : 'imageExport\r\t\r\t^ self form bits asArray',			#stamp : 'StephaneDucasse 5/23/2013 18:06',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #imageExport,			#protocol : #other,			#sourceCode : 'imageExport\r\t\r\t^ self cellForm bits asArray',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2017-06-17T15:49:18.882668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #'fillRectangle:basicFillStyle:',			#protocol : #drawing-rectangles,			#sourceCode : 'fillRectangle: aRectangle basicFillStyle: aFillStyle\r\t"Fill the given rectangle with the given, non-composite, fill style."\r\t\r\t| pattern |\r\r\t(aFillStyle isKindOf: InfiniteForm) ifTrue: [\r\t\t^self infiniteFillRectangle: aRectangle fillStyle: aFillStyle\r\t].\r\r\t(aFillStyle isSolidFill) \r\t\tifTrue:[^self fillRectangle: aRectangle color: aFillStyle asColor].\r\t"We have a very special case for filling with infinite forms"\r\t(aFillStyle isBitmapFill and:[aFillStyle origin = (0@0)]) ifTrue:[\r\t\tpattern := aFillStyle form.\r\t\t(aFillStyle direction = (pattern width @ 0) \r\t\t\tand:[aFillStyle normal = (0@pattern height)]) ifTrue:[\r\t\t\t\t"Can use an InfiniteForm"\r\t\t\t\t^self fillRectangle: aRectangle color: (InfiniteForm with: pattern)].\r\t].\r\t"Use a BalloonCanvas instead"\r\tself balloonFillRectangle: aRectangle fillStyle: aFillStyle.',			#stamp : 'IgorStasenko 7/18/2011 18:14',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #'fillRectangle:basicFillStyle:',			#protocol : #drawing-rectangles,			#sourceCode : 'fillRectangle: aRectangle basicFillStyle: aFillStyle\r\t"Fill the given rectangle with the given, non-composite, fill style."\r\t\r\t| pattern |\r\r\t(aFillStyle isKindOf: InfiniteForm) ifTrue: [\r\t\t^self infiniteFillRectangle: aRectangle fillStyle: aFillStyle\r\t].\r\r\t(aFillStyle isSolidFill) \r\t\tifTrue:[^self fillRectangle: aRectangle color: aFillStyle asColor].\r\t"We have a very special case for filling with infinite forms"\r\t(aFillStyle isBitmapFill and:[aFillStyle origin = (0@0)]) ifTrue:[\r\t\tpattern := aFillStyle cellForm.\r\t\t(aFillStyle direction = (pattern width @ 0) \r\t\t\tand:[aFillStyle normal = (0@pattern height)]) ifTrue:[\r\t\t\t\t"Can use an InfiniteForm"\r\t\t\t\t^self fillRectangle: aRectangle color: (InfiniteForm with: pattern)].\r\t].\r\t"Use a BalloonCanvas instead"\r\tself balloonFillRectangle: aRectangle fillStyle: aFillStyle.',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2017-06-17T15:49:18.887668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #'infiniteFillRectangle:fillStyle:',			#protocol : #drawing-rectangles,			#sourceCode : 'infiniteFillRectangle: aRectangle fillStyle: aFillStyle\r\r\t| additionalOffset rInPortTerms clippedPort targetTopLeft clipOffset ex |\r\r\t"this is a bit of a kludge to get the form to be aligned where I *think* it should be.\r\tsomething better is needed, but not now"\r\r\tadditionalOffset := 0@0.\r\tex := aFillStyle form extent.\r\trInPortTerms := (aRectangle intersect: aFillStyle boundingBox ifNone: ["nothing to draw" ^ self ]) translateBy: origin.\r\tclippedPort := port clippedBy: rInPortTerms.\r\ttargetTopLeft := clippedPort clipRect topLeft truncateTo: ex.\r\tclipOffset := rInPortTerms topLeft - targetTopLeft.\r\tadditionalOffset := (clipOffset \\\\ ex) - ex.\r\t^aFillStyle\r\t\tdisplayOnPort: clippedPort\r\t\toffsetBy: additionalOffset\r',			#stamp : 'IgorStasenko 12/22/2012 03:25',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #'infiniteFillRectangle:fillStyle:',			#protocol : #drawing-rectangles,			#sourceCode : 'infiniteFillRectangle: aRectangle fillStyle: aFillStyle\r\r\t| additionalOffset rInPortTerms clippedPort targetTopLeft clipOffset ex |\r\r\t"this is a bit of a kludge to get the form to be aligned where I *think* it should be.\r\tsomething better is needed, but not now"\r\r\tadditionalOffset := 0@0.\r\tex := aFillStyle cellForm extent.\r\trInPortTerms := (aRectangle intersect: aFillStyle boundingBox ifNone: ["nothing to draw" ^ self ]) translateBy: origin.\r\tclippedPort := port clippedBy: rInPortTerms.\r\ttargetTopLeft := clippedPort clipRect topLeft truncateTo: ex.\r\tclipOffset := rInPortTerms topLeft - targetTopLeft.\r\tadditionalOffset := (clipOffset \\\\ ex) - ex.\r\t^aFillStyle\r\t\tdisplayOnPort: clippedPort\r\t\toffsetBy: additionalOffset\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2017-06-17T15:49:18.895668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #'transformBy:clippingTo:during:smoothing:',			#protocol : #drawing-support,			#sourceCode : 'transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock\t smoothing: cellSize\r\r\t"Note: This method has been originally copied from TransformationMorph."\r\t| innerRect patchRect sourceQuad warp start subCanvas rule|\r\t(aDisplayTransform isPureTranslation) ifTrue:[\r\t\t^aBlock value: (self copyOffset: aDisplayTransform offset negated truncated\r\t\t\t\t\t\t\tclipRect: aClipRect)\r\t].\r\t"Prepare an appropriate warp from patch to innerRect"\r\tinnerRect := aClipRect.\r\tpatchRect := (aDisplayTransform globalBoundsToLocal: innerRect) truncated.\r\tsourceQuad := (aDisplayTransform sourceQuadFor: innerRect)\r\t\t\t\t\tcollect: [:p | p - patchRect topLeft].\r\twarp := self warpFrom: sourceQuad toRect: innerRect.\r\twarp cellSize: cellSize.\r\r\t"Render the submorphs visible in the clipping rectangle, as patchForm"\r\tstart := (self depth = 1)\r\t\t"If this is true B&W, then we need a first pass for erasure."\r\t\tifTrue: [1] ifFalse: [2].\r\t"If my depth has alpha, do blending rather than paint"\r\trule := self depth = 32 ifTrue: [Form blend] ifFalse: [Form paint].\r\tstart to: 2 do:\r\t\t[:i | "If i=1 we first make a shadow and erase it for opaque whites in B&W"\r\t\tsubCanvas := self class extent: patchRect extent depth: self depth.\r\t\ti=1\tifTrue: [ warp combinationRule: Form erase ]\r\t\t\tifFalse: [ warp combinationRule: rule].\r\t\tsubCanvas translateBy: patchRect topLeft negated\r\t\t\tduring:[:offsetCanvas| aBlock value: offsetCanvas].\r\t\twarp sourceForm: subCanvas form; warpBits.\r\t\twarp sourceForm: nil.  subCanvas := nil "release space for next loop"]\r',			#stamp : 'IgorStasenko 7/18/2011 18:21',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #'transformBy:clippingTo:during:smoothing:',			#protocol : #drawing-support,			#sourceCode : 'transformBy: aDisplayTransform clippingTo: aClipRect during: aBlock\t smoothing: cellSize\r\r\t"Note: This method has been originally copied from TransformationMorph."\r\t| innerRect patchRect sourceQuad warp start subCanvas rule|\r\t(aDisplayTransform isPureTranslation) ifTrue:[\r\t\t^aBlock value: (self copyOffset: aDisplayTransform offset negated truncated\r\t\t\t\t\t\t\tclipRect: aClipRect)\r\t].\r\t"Prepare an appropriate warp from patch to innerRect"\r\tinnerRect := aClipRect.\r\tpatchRect := (aDisplayTransform globalBoundsToLocal: innerRect) truncated.\r\tsourceQuad := (aDisplayTransform sourceQuadFor: innerRect)\r\t\t\t\t\tcollect: [:p | p - patchRect topLeft].\r\twarp := self warpFrom: sourceQuad toRect: innerRect.\r\twarp cellSize: cellSize.\r\r\t"Render the submorphs visible in the clipping rectangle, as patchForm"\r\tstart := (self depth = 1)\r\t\t"If this is true B&W, then we need a first pass for erasure."\r\t\tifTrue: [1] ifFalse: [2].\r\t"If my depth has alpha, do blending rather than paint"\r\trule := self depth = 32 ifTrue: [Form blend] ifFalse: [Form paint].\r\tstart to: 2 do:\r\t\t[:i | "If i=1 we first make a shadow and erase it for opaque whites in B&W"\r\t\tsubCanvas := self class extent: patchRect extent depth: self depth.\r\t\ti=1\tifTrue: [ warp combinationRule: Form erase ]\r\t\t\tifFalse: [ warp combinationRule: rule].\r\t\tsubCanvas translateBy: patchRect topLeft negated\r\t\t\tduring:[:offsetCanvas| aBlock value: offsetCanvas].\r\t\twarp sourceForm: subCanvas cellForm; warpBits.\r\t\twarp sourceForm: nil.  subCanvas := nil "release space for next loop"]\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2017-06-17T15:49:18.900668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensCanvasWrapper,				#isMetaSide : false			},			#name : #'contentsOfArea:into:',			#protocol : #'canvas accessing',			#sourceCode : 'contentsOfArea: aRectangle into: aForm\r\t"this may conflict with current pathtransformations, but up to now"\r\t"it works"\r\t| bb |\r\tself flush.\r\tbb := BitBlt toForm: aForm.\r\tbb\r\t\tsourceForm: self form;\r\t\tcombinationRule: Form over;\r\t\tsourceX: aRectangle left + origin x;\r\t\tsourceY: aRectangle top + origin y;\r\t\twidth: aRectangle width;\r\t\theight: aRectangle height;\r\t\tcopyBits.\r\t^ aForm',			#stamp : 'NicolaiHess 1/17/2015 00:59',			#package : #Athens-Morphic		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensCanvasWrapper,				#isMetaSide : false			},			#name : #'contentsOfArea:into:',			#protocol : #'canvas accessing',			#sourceCode : 'contentsOfArea: aRectangle into: aForm\r\t"this may conflict with current pathtransformations, but up to now"\r\t"it works"\r\t| bb |\r\tself flush.\r\tbb := BitBlt toForm: aForm.\r\tbb\r\t\tsourceForm: self cellForm;\r\t\tcombinationRule: Form over;\r\t\tsourceX: aRectangle left + origin x;\r\t\tsourceY: aRectangle top + origin y;\r\t\twidth: aRectangle width;\r\t\theight: aRectangle height;\r\t\tcopyBits.\r\t^ aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Morphic		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2017-06-17T15:49:19.099668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StringMorph,				#isMetaSide : false			},			#name : #'brickImageForm:',			#protocol : #'*Glamour-Morphic-Brick',			#sourceCode : 'brickImageForm: aColor\r\t| canvas rect |\r\trect := self fullBounds origin extent: self measureContents.\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: Display depth.\r\tcanvas form fillColor: aColor. \r\tcanvas translateBy: rect topLeft negated\r\t\tduring: [ :tempCanvas | tempCanvas fullDrawMorph: self ].\r\t^ canvas form offset: rect topLeft',			#stamp : 'AliakseiSyrel 3/4/2017 19:10',			#package : #Glamour-Morphic-Brick		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StringMorph,				#isMetaSide : false			},			#name : #'brickImageForm:',			#protocol : #'*Glamour-Morphic-Brick',			#sourceCode : 'brickImageForm: aColor\r\t| canvas rect |\r\trect := self fullBounds origin extent: self measureContents.\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: Display depth.\r\tcanvas cellForm fillColor: aColor. \r\tcanvas translateBy: rect topLeft negated\r\t\tduring: [ :tempCanvas | tempCanvas fullDrawMorph: self ].\r\t^ canvas cellForm offset: rect topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Brick		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2017-06-17T15:49:19.106668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StringMorph,				#isMetaSide : false			},			#name : #'imageForm:forRectangle:',			#protocol : #drawing,			#sourceCode : 'imageForm: depth forRectangle: rect\r\t| canvas |\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: depth.\r\t\r\tbackgroundColor isTransparent ifTrue: [ \r\t\tcanvas form fillColor: self theme backgroundColor.\r\t].\r\tcanvas translateBy: rect topLeft negated\r\t\tduring:[:tempCanvas| tempCanvas fullDrawMorph: self].\r\t^ canvas form offset: rect topLeft',			#stamp : 'HenrikNergaard 4/18/2017 19:07',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StringMorph,				#isMetaSide : false			},			#name : #'imageForm:forRectangle:',			#protocol : #drawing,			#sourceCode : 'imageForm: depth forRectangle: rect\r\t| canvas |\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: depth.\r\t\r\tbackgroundColor isTransparent ifTrue: [ \r\t\tcanvas cellForm fillColor: self theme backgroundColor.\r\t].\r\tcanvas translateBy: rect topLeft negated\r\t\tduring:[:tempCanvas| tempCanvas fullDrawMorph: self].\r\t^ canvas cellForm offset: rect topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2017-06-17T15:49:19.217668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TabMorph,				#isMetaSide : false			},			#name : #softRetrieveMorph,			#protocol : #protocol,			#sourceCode : 'softRetrieveMorph\r\t| rotating oldIcon |\r\t"Like retrieveMorph but done in a separated process"\t\r\tmorph ifNotNil: [ ^ self ].\t\r\tretrievingProcess \r\t\tifNotNil: [ \r\t\t\t"The retrieving process is already running, let\'s wait for its result"\r\t\t\tretrievingProcess isTerminated \r\t\t\t\tifFalse: [ ^ self ] ].\r\t\r\toldIcon := self icon ifNotNil: [ :i | i form ].\r\trotating := self createAnimationProcess.\r\tretrievingProcess := [ [\r\t\trotating resume.\r\t\t"compute time consuming data"\r\t\tmorph := retrievingBlock value.\r\t\tretrievingSemaphore signal.\r\t\tUIManager default defer: [\r\t\t\tself triggerEvent: #tabRefreshed with: self.\r\t\t\tself icon: oldIcon]]\r\tensure: [\r\t\trotating terminate.\r\t\tUIManager default defer: [self icon: oldIcon]\r\t] ] forkAt: Processor activePriority - 2',			#stamp : 'DenisKudryashov 3/27/2017 23:53',			#package : #Morphic-Widgets-Tabs		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TabMorph,				#isMetaSide : false			},			#name : #softRetrieveMorph,			#protocol : #protocol,			#sourceCode : 'softRetrieveMorph\r\t| rotating oldIcon |\r\t"Like retrieveMorph but done in a separated process"\t\r\tmorph ifNotNil: [ ^ self ].\t\r\tretrievingProcess \r\t\tifNotNil: [ \r\t\t\t"The retrieving process is already running, let\'s wait for its result"\r\t\t\tretrievingProcess isTerminated \r\t\t\t\tifFalse: [ ^ self ] ].\r\t\r\toldIcon := self icon ifNotNil: [ :i | i cellForm ].\r\trotating := self createAnimationProcess.\r\tretrievingProcess := [ [\r\t\trotating resume.\r\t\t"compute time consuming data"\r\t\tmorph := retrievingBlock value.\r\t\tretrievingSemaphore signal.\r\t\tUIManager default defer: [\r\t\t\tself triggerEvent: #tabRefreshed with: self.\r\t\t\tself icon: oldIcon]]\r\tensure: [\r\t\trotating terminate.\r\t\tUIManager default defer: [self icon: oldIcon]\r\t] ] forkAt: Processor activePriority - 2',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tabs		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2017-06-17T15:49:19.325668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FTPluggableIconListMorphAdaptorDataSource,				#isMetaSide : false			},			#name : #'createCellText:icon:',			#protocol : #private,			#sourceCode : 'createCellText: aString icon: anIcon \r\t| text icon cell |\r\ttext := aString.\r\ticon := anIcon.\r\tcell := FTCellMorph new\r\t\tcellInset: 5;\r\t\tyourself.\r\ticon\r\t\tifNotNil:\r\t\t\t[ icon := icon asMorph.\r\t\t\ticon class = ImageMorph\r\t\t\t\tifTrue: [ icon form: (icon form scaledToSize: 16 @ 16) ]\r\t\t\t\tifFalse: [ icon bounds: (0 @ 0 corner: 16 @ 16) ].\r\t\t\tcell addMorphBack: icon ].\r\tcell addMorphBack: text asMorph.\r\t^ cell',			#stamp : 'DenisKudryashov 6/24/2016 11:35',			#package : #Morphic-Widgets-FastTable		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FTPluggableIconListMorphAdaptorDataSource,				#isMetaSide : false			},			#name : #'createCellText:icon:',			#protocol : #private,			#sourceCode : 'createCellText: aString icon: anIcon \r\t| text icon cell |\r\ttext := aString.\r\ticon := anIcon.\r\tcell := FTCellMorph new\r\t\tcellInset: 5;\r\t\tyourself.\r\ticon\r\t\tifNotNil:\r\t\t\t[ icon := icon asMorph.\r\t\t\ticon class = ImageMorph\r\t\t\t\tifTrue: [ icon form: (icon cellForm scaledToSize: 16 @ 16) ]\r\t\t\t\tifFalse: [ icon bounds: (0 @ 0 corner: 16 @ 16) ].\r\t\t\tcell addMorphBack: icon ].\r\tcell addMorphBack: text asMorph.\r\t^ cell',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-FastTable		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2017-06-17T15:49:19.332668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FTTreeDataSource class',				#isMetaSide : true			},			#name : #emptyMorph,			#protocol : #'utils - morph creation',			#sourceCode : 'emptyMorph\r\t| icon |\r\ticon := (Smalltalk ui icons iconNamed: #emptyIcon) asMorph.\r\ticon form: (icon form scaledToSize: 16 @ 16).\r\t^ icon',			#stamp : 'CyrilFerlicot 10/26/2015 16:15',			#package : #Morphic-Widgets-FastTable		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FTTreeDataSource class',				#isMetaSide : true			},			#name : #emptyMorph,			#protocol : #'utils - morph creation',			#sourceCode : 'emptyMorph\r\t| icon |\r\ticon := (Smalltalk ui icons iconNamed: #emptyIcon) asMorph.\r\ticon form: (icon cellForm scaledToSize: 16 @ 16).\r\t^ icon',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-FastTable		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2017-06-17T15:49:19.339668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThumbnailMorph,				#isMetaSide : false			},			#name : #'drawMeOn:',			#protocol : #display,			#sourceCode : 'drawMeOn: aCanvas \r\t"Draw a small view of a morph in another place.  Guard against infinite recursion if that morph has a thumbnail of itself inside.  Now also works if the thing to draw is a plain Form rather than a morph."\r\r\t| viewedMorphBox scale c shrunkForm aWorld aFormOrMorph  |\r\tsuper drawOn: aCanvas.\r\t((aFormOrMorph := self formOrMorphToView) isForm) \r\t\tifTrue: [^self drawForForm: aFormOrMorph on: aCanvas].\r\t(((aFormOrMorph notNil and: [(aWorld := aFormOrMorph world) notNil]) \r\t\tand: [aWorld ~~ aFormOrMorph or: [lastFormShown isNil]]) \r\t\t\tand: [RecursionDepth + 1 < RecursionMax]) \r\t\t\tifTrue: \r\t\t\t\t[RecursionDepth := RecursionDepth + 1.\r\t\t\t\tviewedMorphBox := aFormOrMorph fullBounds.\r\t\t\tscale :=  self scaleFor: viewedMorphBox in: self innerBounds.\r\t\t\t\tc := Display defaultCanvasClass extent: viewedMorphBox extent\r\t\t\t\t\t\t\tdepth: aCanvas depth.\r\t\t\t\tc translateBy: viewedMorphBox topLeft negated\r\t\t\t\t\tduring: \r\t\t\t\t\t\t[:tempCanvas | \r\t\t\t\t\t\t"recursion happens here"\r\t\t\t\t\t\ttempCanvas fullDrawMorph: aFormOrMorph].\r\t\t\t\tshrunkForm := c form \r\t\t\t\t\t\t\tmagnify: c form boundingBox\r\t\t\t\t\t\t\tby: scale\r\t\t\t\t\t\t\tsmoothing: 1.\r\t\t\t\tlastFormShown := shrunkForm.\r\t\t\t\tRecursionDepth := RecursionDepth - 1]\r\t\t\tifFalse: \r\t\t\t\t["This branch used if we\'ve recurred, or if the thumbnail views a World that\'s already been rendered once, or if the referent is not in a world at the moment"\r\t\t\t\tlastFormShown ifNotNil: [shrunkForm := lastFormShown]].\r\tshrunkForm ifNotNil: \r\t\t\t[aCanvas paintImage: shrunkForm\r\t\t\t\tat: self center - shrunkForm boundingBox center]',			#stamp : 'wiz 8/6/2005 22:11',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThumbnailMorph,				#isMetaSide : false			},			#name : #'drawMeOn:',			#protocol : #display,			#sourceCode : 'drawMeOn: aCanvas \r\t"Draw a small view of a morph in another place.  Guard against infinite recursion if that morph has a thumbnail of itself inside.  Now also works if the thing to draw is a plain Form rather than a morph."\r\r\t| viewedMorphBox scale c shrunkForm aWorld aFormOrMorph  |\r\tsuper drawOn: aCanvas.\r\t((aFormOrMorph := self formOrMorphToView) isForm) \r\t\tifTrue: [^self drawForForm: aFormOrMorph on: aCanvas].\r\t(((aFormOrMorph notNil and: [(aWorld := aFormOrMorph world) notNil]) \r\t\tand: [aWorld ~~ aFormOrMorph or: [lastFormShown isNil]]) \r\t\t\tand: [RecursionDepth + 1 < RecursionMax]) \r\t\t\tifTrue: \r\t\t\t\t[RecursionDepth := RecursionDepth + 1.\r\t\t\t\tviewedMorphBox := aFormOrMorph fullBounds.\r\t\t\tscale :=  self scaleFor: viewedMorphBox in: self innerBounds.\r\t\t\t\tc := Display defaultCanvasClass extent: viewedMorphBox extent\r\t\t\t\t\t\t\tdepth: aCanvas depth.\r\t\t\t\tc translateBy: viewedMorphBox topLeft negated\r\t\t\t\t\tduring: \r\t\t\t\t\t\t[:tempCanvas | \r\t\t\t\t\t\t"recursion happens here"\r\t\t\t\t\t\ttempCanvas fullDrawMorph: aFormOrMorph].\r\t\t\t\tshrunkForm := c cellForm \r\t\t\t\t\t\t\tmagnify: c cellForm boundingBox\r\t\t\t\t\t\t\tby: scale\r\t\t\t\t\t\t\tsmoothing: 1.\r\t\t\t\tlastFormShown := shrunkForm.\r\t\t\t\tRecursionDepth := RecursionDepth - 1]\r\t\t\tifFalse: \r\t\t\t\t["This branch used if we\'ve recurred, or if the thumbnail views a World that\'s already been rendered once, or if the referent is not in a world at the moment"\r\t\t\t\tlastFormShown ifNotNil: [shrunkForm := lastFormShown]].\r\tshrunkForm ifNotNil: \r\t\t\t[aCanvas paintImage: shrunkForm\r\t\t\t\tat: self center - shrunkForm boundingBox center]',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2017-06-17T15:49:19.344668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThumbnailMorph,				#isMetaSide : false			},			#name : #'drawForForm:on:',			#protocol : #display,			#sourceCode : 'drawForForm: aForm on: aCanvas\r\t"Draw a small view of the given form on the canvas"\r\r\t| scale shrunkForm viewedObjectBox interimCanvas |\r\tviewedObjectBox := aForm boundingBox.\r\tscale :=  self scaleFor: viewedObjectBox in: self innerBounds.\r\tinterimCanvas := Display defaultCanvasClass extent: viewedObjectBox extent depth: aCanvas depth.\r\tinterimCanvas translateBy: viewedObjectBox topLeft negated \r\t\t\t\tduring: [:tempCanvas | tempCanvas drawImage: aForm at: 0@0].\r\tshrunkForm := interimCanvas form magnify: interimCanvas form boundingBox by: scale smoothing: 1.\r\tlastFormShown := shrunkForm.\r\r\taCanvas paintImage: shrunkForm at: self center - shrunkForm boundingBox center',			#stamp : 'wiz 8/6/2005 22:01',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ThumbnailMorph,				#isMetaSide : false			},			#name : #'drawForForm:on:',			#protocol : #display,			#sourceCode : 'drawForForm: aForm on: aCanvas\r\t"Draw a small view of the given form on the canvas"\r\r\t| scale shrunkForm viewedObjectBox interimCanvas |\r\tviewedObjectBox := aForm boundingBox.\r\tscale :=  self scaleFor: viewedObjectBox in: self innerBounds.\r\tinterimCanvas := Display defaultCanvasClass extent: viewedObjectBox extent depth: aCanvas depth.\r\tinterimCanvas translateBy: viewedObjectBox topLeft negated \r\t\t\t\tduring: [:tempCanvas | tempCanvas drawImage: aForm at: 0@0].\r\tshrunkForm := interimCanvas cellForm magnify: interimCanvas cellForm boundingBox by: scale smoothing: 1.\r\tlastFormShown := shrunkForm.\r\r\taCanvas paintImage: shrunkForm at: self center - shrunkForm boundingBox center',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2017-06-17T15:49:19.349668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FT2GlyphRenderer,				#isMetaSide : false			},			#name : #'initForFont:surface:',			#protocol : #initailize-release,			#sourceCode : 'initForFont: aFont surface: aSurface\r\r\tself assert: (aFont class == FreeTypeFont).\r\t\r\tsurface := aSurface.\r\tfont := aFont.\r\tslot := SimpleTextGlyphInfo new.\r\t\r\tpixelSize := font pixelSize rounded.\r\r\tblt := BitBlt toForm: surface form.\r\r\tself loadSurfaceTransform.\r\r\tcolorMap := Bitmap new: 256.\r\t\r\tblt \r\t\tsourceForm: form;\r\t\tsourceX: 0;\r\t\tsourceY: 0;\r\t\tdestOrigin: 0@0;\r\t\tsourceOrigin: 0@0;\r\t\thalftoneForm: nil;\r\t\tcombinationRule: 24;\r\t\twidth: form width;\r\t\theight: form height;\r\t\tcolorMap: colorMap;\r\t\tclipRect: surface clipRect.\r\t\r\ttranslation := IntegerArray new: 2.\r',			#stamp : 'IgorStasenko 11/21/2011 16:32',			#package : #Athens-Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FT2GlyphRenderer,				#isMetaSide : false			},			#name : #'initForFont:surface:',			#protocol : #initailize-release,			#sourceCode : 'initForFont: aFont surface: aSurface\r\r\tself assert: (aFont class == FreeTypeFont).\r\t\r\tsurface := aSurface.\r\tfont := aFont.\r\tslot := SimpleTextGlyphInfo new.\r\t\r\tpixelSize := font pixelSize rounded.\r\r\tblt := BitBlt toForm: surface cellForm.\r\r\tself loadSurfaceTransform.\r\r\tcolorMap := Bitmap new: 256.\r\t\r\tblt \r\t\tsourceForm: form;\r\t\tsourceX: 0;\r\t\tsourceY: 0;\r\t\tdestOrigin: 0@0;\r\t\tsourceOrigin: 0@0;\r\t\thalftoneForm: nil;\r\t\tcombinationRule: 24;\r\t\twidth: form width;\r\t\theight: form height;\r\t\tcolorMap: colorMap;\r\t\tclipRect: surface clipRect.\r\t\r\ttranslation := IntegerArray new: 2.\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2017-06-17T15:49:19.450668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RubSegmentMorph,				#isMetaSide : false			},			#name : #borderForm,			#protocol : #private,			#sourceCode : 'borderForm\r\t"A form must be created for drawing the border whenever the borderColor is translucent."\r\r\t| borderCanvas |\r\tborderForm ifNotNil: [^ borderForm].\r\tborderCanvas := (Display defaultCanvasClass extent: bounds extent depth: 1)\r\t\tasShadowDrawingCanvas: Color black.\r\tborderCanvas translateBy: bounds topLeft negated\r\t\tduring:[:tempCanvas| self drawBorderOn: tempCanvas].\r\tborderForm := borderCanvas form.\r\t^ borderForm',			#stamp : 'AlainPlantec 2/7/2014 09:41',			#package : #Rubric		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RubSegmentMorph,				#isMetaSide : false			},			#name : #borderForm,			#protocol : #private,			#sourceCode : 'borderForm\r\t"A form must be created for drawing the border whenever the borderColor is translucent."\r\r\t| borderCanvas |\r\tborderForm ifNotNil: [^ borderForm].\r\tborderCanvas := (Display defaultCanvasClass extent: bounds extent depth: 1)\r\t\tasShadowDrawingCanvas: Color black.\r\tborderCanvas translateBy: bounds topLeft negated\r\t\tduring:[:tempCanvas| self drawBorderOn: tempCanvas].\r\tborderForm := borderCanvas cellForm.\r\t^ borderForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Rubric		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2017-06-17T15:49:19.551668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Canvas,				#isMetaSide : false			},			#name : #'gtInspectorFormIn:',			#protocol : #'*GT-InspectorExtensions-Core',			#sourceCode : 'gtInspectorFormIn: composite\r\t<gtInspectorPresentationOrder: 40>\r\t^ self form gtInspectorFormIn: composite ',			#stamp : 'TudorGirba 7/14/2014 06:51',			#package : #GT-InspectorExtensions-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Canvas,				#isMetaSide : false			},			#name : #'gtInspectorFormIn:',			#protocol : #'*GT-InspectorExtensions-Core',			#sourceCode : 'gtInspectorFormIn: composite\r\t<gtInspectorPresentationOrder: 40>\r\t^ self cellForm gtInspectorFormIn: composite ',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #GT-InspectorExtensions-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2017-06-17T15:49:19.558668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PluggableCanvas,				#isMetaSide : false			},			#name : #'fillRectangle:basicFillStyle:',			#protocol : #drawing-rectangles,			#sourceCode : 'fillRectangle: aRectangle basicFillStyle: aFillStyle\r\t"Fill the given rectangle with the given, non-composite, fill style."\r\r\t| pattern |\r\r\t(aFillStyle isKindOf: InfiniteForm) ifTrue: [\r\t\t^self infiniteFillRectangle: aRectangle fillStyle: aFillStyle\r\t].\r\r\taFillStyle isSolidFill ifTrue:[ ^self fillRectangle: aRectangle color: aFillStyle asColor].\r\r\t"We have a very special case for filling with infinite forms"\r\t(aFillStyle isBitmapFill and:[aFillStyle origin = (0@0)]) ifTrue:[\r\t\tpattern := aFillStyle form.\r\t\t(aFillStyle direction = (pattern width @ 0) \r\t\t\tand:[aFillStyle normal = (0@pattern height)]) ifTrue:[\r\t\t\t\t"Can use an InfiniteForm"\r\t\t\t\t^self fillRectangle: aRectangle color: (InfiniteForm with: pattern)].\r\t].\r\t"Use a BalloonCanvas instead"\r\tself balloonFillRectangle: aRectangle fillStyle: aFillStyle.\r',			#stamp : 'IgorStasenko 7/18/2011 18:21',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PluggableCanvas,				#isMetaSide : false			},			#name : #'fillRectangle:basicFillStyle:',			#protocol : #drawing-rectangles,			#sourceCode : 'fillRectangle: aRectangle basicFillStyle: aFillStyle\r\t"Fill the given rectangle with the given, non-composite, fill style."\r\r\t| pattern |\r\r\t(aFillStyle isKindOf: InfiniteForm) ifTrue: [\r\t\t^self infiniteFillRectangle: aRectangle fillStyle: aFillStyle\r\t].\r\r\taFillStyle isSolidFill ifTrue:[ ^self fillRectangle: aRectangle color: aFillStyle asColor].\r\r\t"We have a very special case for filling with infinite forms"\r\t(aFillStyle isBitmapFill and:[aFillStyle origin = (0@0)]) ifTrue:[\r\t\tpattern := aFillStyle cellForm.\r\t\t(aFillStyle direction = (pattern width @ 0) \r\t\t\tand:[aFillStyle normal = (0@pattern height)]) ifTrue:[\r\t\t\t\t"Can use an InfiniteForm"\r\t\t\t\t^self fillRectangle: aRectangle color: (InfiniteForm with: pattern)].\r\t].\r\t"Use a BalloonCanvas instead"\r\tself balloonFillRectangle: aRectangle fillStyle: aFillStyle.\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2017-06-17T15:49:19.564668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TextContainer,				#isMetaSide : false			},			#name : #computeShadow,			#protocol : #private,			#sourceCode : 'computeShadow\r\t| canvas bounds theText |\r\tbounds := self bounds.\r\ttheText := textMorph.\r\tcanvas := (Display defaultCanvasClass extent: bounds extent depth: 1)\r\t\tasShadowDrawingCanvas: Color black.\r\tcanvas translateBy: bounds topLeft negated during:[:tempCanvas| | back |\r\t\tself fillsOwner\r\t\t\tifTrue: [tempCanvas fullDrawMorph: (theText owner copyWithoutSubmorph: theText)]\r\t\t\tifFalse: [tempCanvas fillRectangle: textMorph bounds color: Color black].\r\t\tself avoidsOcclusions ifTrue:\r\t\t\t[back := tempCanvas form deepCopy.\r\t\t\ttempCanvas form fillWhite.\r\t\t\ttheText owner submorphsInFrontOf: theText do:\r\t\t\t\t[:m | (textMorph isLinkedTo: m)\r\t\t\t\t\tifTrue: []\r\t\t\t\t\tifFalse: [tempCanvas fullDrawMorph: m]].\r\t\t\tback displayOn: tempCanvas form at: 0@0 rule: Form reverse].\r\t].\r\tshadowForm := canvas form offset: bounds topLeft.\r\tvertProfile := shadowForm  yTallyPixelValue: 1 orNot: false.\r\trectangleCache := Dictionary new.\r\t^ shadowForm',			#stamp : 'IgorStasenko 7/18/2011 18:46',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TextContainer,				#isMetaSide : false			},			#name : #computeShadow,			#protocol : #private,			#sourceCode : 'computeShadow\r\t| canvas bounds theText |\r\tbounds := self bounds.\r\ttheText := textMorph.\r\tcanvas := (Display defaultCanvasClass extent: bounds extent depth: 1)\r\t\tasShadowDrawingCanvas: Color black.\r\tcanvas translateBy: bounds topLeft negated during:[:tempCanvas| | back |\r\t\tself fillsOwner\r\t\t\tifTrue: [tempCanvas fullDrawMorph: (theText owner copyWithoutSubmorph: theText)]\r\t\t\tifFalse: [tempCanvas fillRectangle: textMorph bounds color: Color black].\r\t\tself avoidsOcclusions ifTrue:\r\t\t\t[back := tempCanvas cellForm deepCopy.\r\t\t\ttempCanvas cellForm fillWhite.\r\t\t\ttheText owner submorphsInFrontOf: theText do:\r\t\t\t\t[:m | (textMorph isLinkedTo: m)\r\t\t\t\t\tifTrue: []\r\t\t\t\t\tifFalse: [tempCanvas fullDrawMorph: m]].\r\t\t\tback displayOn: tempCanvas cellForm at: 0@0 rule: Form reverse].\r\t].\r\tshadowForm := canvas cellForm offset: bounds topLeft.\r\tvertProfile := shadowForm  yTallyPixelValue: 1 orNot: false.\r\trectangleCache := Dictionary new.\r\t^ shadowForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2017-06-17T15:49:19.569668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowWorldState,				#isMetaSide : false			},			#name : #'doDeferredUpdatingFor:',			#protocol : #accessing,			#sourceCode : 'doDeferredUpdatingFor: aWorld\r        "If this platform supports deferred updates, then make my canvas be the Display (or a rectangular portion of it), set the Display to deferred update mode, and answer true. Otherwise, do nothing and answer false. One can set the class variable DisableDeferredUpdates to true to completely disable the deferred updating feature."\r\r\tdisplay ifNil: [ ^ false ].\r\t(display deferUpdates: true) ifNil: [^ false].  "deferred updates not supported"\r\t(canvas notNil and: [canvas form == display]) ifFalse: [\r\t\t\taWorld viewBox: display boundingBox.    "do first since it may clear canvas"\r\t\t\tself canvas: (display getCanvas copyClipRect: display boundingBox)].\r\t^ true\r',			#stamp : 'RonieSalgado 9/4/2016 20:03',			#package : #OSWindow-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowWorldState,				#isMetaSide : false			},			#name : #'doDeferredUpdatingFor:',			#protocol : #accessing,			#sourceCode : 'doDeferredUpdatingFor: aWorld\r        "If this platform supports deferred updates, then make my canvas be the Display (or a rectangular portion of it), set the Display to deferred update mode, and answer true. Otherwise, do nothing and answer false. One can set the class variable DisableDeferredUpdates to true to completely disable the deferred updating feature."\r\r\tdisplay ifNil: [ ^ false ].\r\t(display deferUpdates: true) ifNil: [^ false].  "deferred updates not supported"\r\t(canvas notNil and: [canvas cellForm == display]) ifFalse: [\r\t\t\taWorld viewBox: display boundingBox.    "do first since it may clear canvas"\r\t\t\tself canvas: (display getCanvas copyClipRect: display boundingBox)].\r\t^ true\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ],		#time : DateAndTime [ '2017-06-17T15:49:19.573668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowWorldState,				#isMetaSide : false			},			#name : #assuredCanvas,			#protocol : #'as yet unclassified',			#sourceCode : 'assuredCanvas\r\r\t(canvas isNil or: [(canvas extent ~= viewBox extent) or: [canvas form depth ~= Display depth]])\r\t\tifTrue:\r\t\t\t["allocate a new offscreen canvas the size of the window"\r\t\t\tself canvas: (display defaultCanvasClass extent: viewBox extent)].\r\t^ self canvas',			#stamp : 'RonieSalgado 8/21/2016 18:19',			#package : #OSWindow-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowWorldState,				#isMetaSide : false			},			#name : #assuredCanvas,			#protocol : #'as yet unclassified',			#sourceCode : 'assuredCanvas\r\r\t(canvas isNil or: [(canvas extent ~= viewBox extent) or: [canvas cellForm depth ~= Display depth]])\r\t\tifTrue:\r\t\t\t["allocate a new offscreen canvas the size of the window"\r\t\t\tself canvas: (display defaultCanvasClass extent: viewBox extent)].\r\t^ self canvas',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2017-06-17T15:49:19.585668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SelectionMorph,				#isMetaSide : false			},			#name : #'drawOn:',			#protocol : #drawing,			#sourceCode : 'drawOn: aCanvas\r\r\t| canvas form1 form2 box |\r\tsuper drawOn: aCanvas.\r\tbox := self bounds.\r\tselectedItems do: [:m | box := box merge: m fullBounds].\r\tbox := box expandBy: 1.\r\tcanvas := Display defaultCanvasClass extent: box extent depth: 8.\r\tcanvas translateBy: box topLeft negated\r\t\tduring: [:tempCanvas | selectedItems do: [:m | tempCanvas fullDrawMorph: m]].\r\tform1 := (Form extent: box extent) copyBits: (0@0 extent: box extent) from: canvas form at: 0@0 colorMap: (Color maskingMap: 8).\r\tform2 := Form extent: box extent.\r\t(0@0) fourNeighbors do: [:d | form1 displayOn: form2 at: d rule: Form under].\r\tform1 displayOn: form2 at: 0@0 rule: Form erase.\r\taCanvas stencil: form2\r\t\tat: box topLeft\r\t\tsourceRect: form2 boundingBox\r\t\tcolor: self borderColor\r',			#stamp : 'ar 9/1/2000 14:25',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SelectionMorph,				#isMetaSide : false			},			#name : #'drawOn:',			#protocol : #drawing,			#sourceCode : 'drawOn: aCanvas\r\r\t| canvas form1 form2 box |\r\tsuper drawOn: aCanvas.\r\tbox := self bounds.\r\tselectedItems do: [:m | box := box merge: m fullBounds].\r\tbox := box expandBy: 1.\r\tcanvas := Display defaultCanvasClass extent: box extent depth: 8.\r\tcanvas translateBy: box topLeft negated\r\t\tduring: [:tempCanvas | selectedItems do: [:m | tempCanvas fullDrawMorph: m]].\r\tform1 := (Form extent: box extent) copyBits: (0@0 extent: box extent) from: canvas cellForm at: 0@0 colorMap: (Color maskingMap: 8).\r\tform2 := Form extent: box extent.\r\t(0@0) fourNeighbors do: [:d | form1 displayOn: form2 at: d rule: Form under].\r\tform1 displayOn: form2 at: 0@0 rule: Form erase.\r\taCanvas stencil: form2\r\t\tat: box topLeft\r\t\tsourceRect: form2 boundingBox\r\t\tcolor: self borderColor\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2017-06-17T15:49:19.592668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BalloonEngine,				#isMetaSide : false			},			#name : #'registerFill:',			#protocol : #drawing,			#sourceCode : 'registerFill: aFillStyle\r\t"Register the given fill style."\r\t| theForm |\r\taFillStyle ifNil:[^0].\r\taFillStyle isSolidFill \r\t\tifTrue:[^aFillStyle scaledPixelValue32].\r\r\taFillStyle isGradientFill ifTrue:[\r\t\t^self primAddGradientFill: aFillStyle pixelRamp\r\t\t\tfrom: aFillStyle origin\r\t\t\talong: aFillStyle direction\r\t\t\tnormal: aFillStyle normal\r\t\t\tradial: aFillStyle isRadialFill\r\t\t].\r\taFillStyle isBitmapFill ifTrue:[\r\t\ttheForm := aFillStyle form asSourceForm.\r\t\ttheForm unhibernate.\r\t\tforms := forms copyWith: theForm.\r\t\t^self primAddBitmapFill: theForm\r\t\t\t\tcolormap: (theForm colormapIfNeededForDepth: 32)\r\t\t\t\ttile: aFillStyle isTiled\r\t\t\t\tfrom: aFillStyle origin\r\t\t\t\talong: aFillStyle direction\r\t\t\t\tnormal: aFillStyle normal\r\t\t\t\txIndex: forms size].\r\t^0',			#stamp : 'bf 4/3/2004 01:36',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BalloonEngine,				#isMetaSide : false			},			#name : #'registerFill:',			#protocol : #drawing,			#sourceCode : 'registerFill: aFillStyle\r\t"Register the given fill style."\r\t| theForm |\r\taFillStyle ifNil:[^0].\r\taFillStyle isSolidFill \r\t\tifTrue:[^aFillStyle scaledPixelValue32].\r\r\taFillStyle isGradientFill ifTrue:[\r\t\t^self primAddGradientFill: aFillStyle pixelRamp\r\t\t\tfrom: aFillStyle origin\r\t\t\talong: aFillStyle direction\r\t\t\tnormal: aFillStyle normal\r\t\t\tradial: aFillStyle isRadialFill\r\t\t].\r\taFillStyle isBitmapFill ifTrue:[\r\t\ttheForm := aFillStyle cellForm asSourceForm.\r\t\ttheForm unhibernate.\r\t\tforms := forms copyWith: theForm.\r\t\t^self primAddBitmapFill: theForm\r\t\t\t\tcolormap: (theForm colormapIfNeededForDepth: 32)\r\t\t\t\ttile: aFillStyle isTiled\r\t\t\t\tfrom: aFillStyle origin\r\t\t\t\talong: aFillStyle direction\r\t\t\t\tnormal: aFillStyle normal\r\t\t\t\txIndex: forms size].\r\t^0',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2017-06-17T15:49:19.919668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IconicButton,				#isMetaSide : false			},			#name : #labelGraphic,			#protocol : #accessing,			#sourceCode : 'labelGraphic\r\r\t^ graphicalMorph form',			#stamp : 'StephaneDucasse 5/23/2013 18:06',			#package : #Morphic-Widgets-Basic		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IconicButton,				#isMetaSide : false			},			#name : #labelGraphic,			#protocol : #accessing,			#sourceCode : 'labelGraphic\r\r\t^ graphicalMorph cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Basic		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2017-06-17T15:49:19.927668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t"Hash is implemented because #= is implemented."\r\t\r\t^super hash bitXor: self form hash',			#stamp : 'gvc 12/8/2008 18:53',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t"Hash is implemented because #= is implemented."\r\t\r\t^super hash bitXor: self cellForm hash',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2017-06-17T15:49:19.932668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #'fillRectangle:on:',			#protocol : #'*Polymorph-Widgets',			#sourceCode : 'fillRectangle: aRectangle on: aCanvas\r\t"Fill the given rectangle on the given canvas with the receiver."\r\t\r\tself extent\r\t\tifNil: [aCanvas\r\t\t\t\ttranslucentImage: self form\r\t\t\t\tat: self origin]\r\t\tifNotNil: [aCanvas clipBy: (self origin + self offset extent: self extent) during: [:c |\r\t\t\t\t\tc\r\t\t\t\t\t\ttranslucentImage: self form\r\t\t\t\t\t\tat: self origin]]',			#stamp : 'gvc 1/28/2009 17:40',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #'fillRectangle:on:',			#protocol : #'*Polymorph-Widgets',			#sourceCode : 'fillRectangle: aRectangle on: aCanvas\r\t"Fill the given rectangle on the given canvas with the receiver."\r\t\r\tself extent\r\t\tifNil: [aCanvas\r\t\t\t\ttranslucentImage: self cellForm\r\t\t\t\tat: self origin]\r\t\tifNotNil: [aCanvas clipBy: (self origin + self offset extent: self extent) during: [:c |\r\t\t\t\t\tc\r\t\t\t\t\t\ttranslucentImage: self cellForm\r\t\t\t\t\t\tat: self origin]]',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2017-06-17T15:49:19.937668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anOrientedFillStyle\r\t"Answer whether equal."\r\r\t^super = anOrientedFillStyle\r\t\tand: [self form = anOrientedFillStyle form]',			#stamp : 'gvc 12/8/2008 18:54',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anOrientedFillStyle\r\t"Answer whether equal."\r\r\t^super = anOrientedFillStyle\r\t\tand: [self cellForm = anOrientedFillStyle cellForm]',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2017-06-17T15:49:20.067668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMPagerPanePreviewMorph,				#isMetaSide : false			},			#name : #'updateFor:',			#protocol : #actions,			#sourceCode : 'updateFor: aMorph\r\r\tthumbnail := aMorph taskThumbnailOfSize: self maxExtent.\r\tself image: thumbnail form.\r\t\r\tself position: position - ((thumbnail width / 2)@(thumbnail height + self defaultBottomMargin + self defaultBorderWidth)).',			#stamp : 'AliakseiSyrel 2/9/2015 14:39',			#package : #Glamour-Morphic-Pager		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMPagerPanePreviewMorph,				#isMetaSide : false			},			#name : #'updateFor:',			#protocol : #actions,			#sourceCode : 'updateFor: aMorph\r\r\tthumbnail := aMorph taskThumbnailOfSize: self maxExtent.\r\tself image: thumbnail cellForm.\r\t\r\tself position: position - ((thumbnail width / 2)@(thumbnail height + self defaultBottomMargin + self defaultBorderWidth)).',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Pager		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2017-06-17T15:49:20.074668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClippingCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^canvas form',			#stamp : 'ls 3/20/2000 21:17',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClippingCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^canvas cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ],		#time : DateAndTime [ '2017-06-17T15:49:20.078668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClippingCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^canvas form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClippingCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^canvas cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2017-06-17T15:49:20.083668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TabActionButtonMorph,				#isMetaSide : false			},			#name : #'drawOn:',			#protocol : #drawing,			#sourceCode : 'drawOn: aCanvas\r\r\tsuper drawOn: aCanvas.\r\ticon ifNil: [ ^ self ].\r\ticon form ifNil: [ ^ self ].\r\taCanvas\r\t\ttranslucentImage: icon form\r\t\tat: self topLeft',			#stamp : 'TorstenBergmann 7/3/2013 08:44',			#package : #Morphic-Widgets-Tabs		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TabActionButtonMorph,				#isMetaSide : false			},			#name : #'drawOn:',			#protocol : #drawing,			#sourceCode : 'drawOn: aCanvas\r\r\tsuper drawOn: aCanvas.\r\ticon ifNil: [ ^ self ].\r\ticon cellForm ifNil: [ ^ self ].\r\taCanvas\r\t\ttranslucentImage: icon cellForm\r\t\tat: self topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tabs		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2017-06-17T15:49:20.089668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Form,				#isMetaSide : false			},			#name : #stencil,			#protocol : #'*Morphic-Base-Support',			#sourceCode : 'stencil\r\t"return a 1-bit deep, black-and-white stencil of myself"\r\r\t| canvas |\r\tcanvas := FormCanvas extent: self extent depth: 1.\r\tcanvas fillColor: (Color white).\r\r\tcanvas stencil: self at: 0@0  \r\t\t\t\tsourceRect: (Rectangle origin: 0@0 corner: self extent) color: Color black.\r\r\t^ canvas form\r',			#stamp : 'LB 8/26/2002 18:08',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Form,				#isMetaSide : false			},			#name : #stencil,			#protocol : #'*Morphic-Base-Support',			#sourceCode : 'stencil\r\t"return a 1-bit deep, black-and-white stencil of myself"\r\r\t| canvas |\r\tcanvas := FormCanvas extent: self extent depth: 1.\r\tcanvas fillColor: (Color white).\r\r\tcanvas stencil: self at: 0@0  \r\t\t\t\tsourceRect: (Rectangle origin: 0@0 corner: self extent) color: Color black.\r\r\t^ canvas cellForm\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2017-06-17T15:49:20.095668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PolygonMorph,				#isMetaSide : false			},			#name : #borderForm,			#protocol : #private,			#sourceCode : 'borderForm\r\t"A form must be created for drawing the border whenever the borderColor is translucent."\r\r\t| borderCanvas |\r\tborderForm ifNotNil: [^ borderForm].\r\tborderCanvas := (Display defaultCanvasClass extent: bounds extent depth: 1)\r\t\tasShadowDrawingCanvas: Color black.\r\tborderCanvas translateBy: bounds topLeft negated\r\t\tduring:[:tempCanvas| self drawBorderOn: tempCanvas].\r\tborderForm := borderCanvas form.\r\tself arrowForms do:\r\t\t[:f |  "Eliminate overlap between line and arrowheads if transparent."\r\t\tborderForm copy: f boundingBox from: f to: f offset - self position rule: Form erase].\r\t^ borderForm',			#stamp : 'IgorStasenko 7/18/2011 18:45',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PolygonMorph,				#isMetaSide : false			},			#name : #borderForm,			#protocol : #private,			#sourceCode : 'borderForm\r\t"A form must be created for drawing the border whenever the borderColor is translucent."\r\r\t| borderCanvas |\r\tborderForm ifNotNil: [^ borderForm].\r\tborderCanvas := (Display defaultCanvasClass extent: bounds extent depth: 1)\r\t\tasShadowDrawingCanvas: Color black.\r\tborderCanvas translateBy: bounds topLeft negated\r\t\tduring:[:tempCanvas| self drawBorderOn: tempCanvas].\r\tborderForm := borderCanvas cellForm.\r\tself arrowForms do:\r\t\t[:f |  "Eliminate overlap between line and arrowheads if transparent."\r\t\tborderForm copy: f boundingBox from: f to: f offset - self position rule: Form erase].\r\t^ borderForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2017-06-17T15:49:20.100668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HiRulerController,				#isMetaSide : false			},			#name : #buildRulerForm,			#protocol : #private-refreshing,			#sourceCode : 'buildRulerForm\r\trulerForm := \r\t\trulerBuilder\r\t\t\tvalues: nodes;\r\t\t\tform',			#stamp : 'MartinDias 3/31/2016 00:27',			#package : #Hiedra		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HiRulerController,				#isMetaSide : false			},			#name : #buildRulerForm,			#protocol : #private-refreshing,			#sourceCode : 'buildRulerForm\r\trulerForm := \r\t\trulerBuilder\r\t\t\tvalues: nodes;\r\t\t\tcellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Hiedra		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2017-06-17T15:49:20.233668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #shadowForm,			#protocol : #drawing,			#sourceCode : 'shadowForm\r\t"Return a 1-bit shadow of my submorphs.  Assumes submorphs is not empty"\r\t| bnds canvas |\r\tbnds := Rectangle merging: (submorphs collect: [:m | m fullBounds]).\r\tcanvas := (Display defaultCanvasClass extent: bnds extent depth: 1) \r\t\tasShadowDrawingCanvas: Color black.\r\tcanvas translateBy: bnds topLeft negated\r\t\tduring:[:tempCanvas| self drawSubmorphsOn: tempCanvas].\r\t^ canvas form offset: bnds topLeft',			#stamp : 'JW 7/12/2005 20:13',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #shadowForm,			#protocol : #drawing,			#sourceCode : 'shadowForm\r\t"Return a 1-bit shadow of my submorphs.  Assumes submorphs is not empty"\r\t| bnds canvas |\r\tbnds := Rectangle merging: (submorphs collect: [:m | m fullBounds]).\r\tcanvas := (Display defaultCanvasClass extent: bnds extent depth: 1) \r\t\tasShadowDrawingCanvas: Color black.\r\tcanvas translateBy: bnds topLeft negated\r\t\tduring:[:tempCanvas| self drawSubmorphsOn: tempCanvas].\r\t^ canvas cellForm offset: bnds topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2017-06-17T15:49:20.243668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #'savePatchFrom:',			#protocol : #drawing,			#sourceCode : 'savePatchFrom: aCanvas \r\t"Save the part of the given canvas under this hand as a Form and return its bounding rectangle."\r\r\t"Details: The previously used patch Form is recycled when possible to reduce the burden on storage management."\r\r\t| damageRect myBnds |\r\tdamageRect := myBnds := self fullBounds.\r\tsavedPatch ifNotNil: \r\t\t\t[damageRect := myBnds merge: (savedPatch offset extent: savedPatch extent)].\r\t(savedPatch isNil or: [savedPatch extent ~= myBnds extent]) \r\t\tifTrue: \r\t\t\t["allocate new patch form if needed"\r\r\t\t\tsavedPatch := aCanvas form allocateForm: myBnds extent].\r\taCanvas contentsOfArea: (myBnds translateBy: aCanvas origin)\r\t\tinto: savedPatch.\r\tsavedPatch offset: myBnds topLeft.\r\t^damageRect',			#stamp : 'dgd 2/21/2003 22:49',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #'savePatchFrom:',			#protocol : #drawing,			#sourceCode : 'savePatchFrom: aCanvas \r\t"Save the part of the given canvas under this hand as a Form and return its bounding rectangle."\r\r\t"Details: The previously used patch Form is recycled when possible to reduce the burden on storage management."\r\r\t| damageRect myBnds |\r\tdamageRect := myBnds := self fullBounds.\r\tsavedPatch ifNotNil: \r\t\t\t[damageRect := myBnds merge: (savedPatch offset extent: savedPatch extent)].\r\t(savedPatch isNil or: [savedPatch extent ~= myBnds extent]) \r\t\tifTrue: \r\t\t\t["allocate new patch form if needed"\r\r\t\t\tsavedPatch := aCanvas cellForm allocateForm: myBnds extent].\r\taCanvas contentsOfArea: (myBnds translateBy: aCanvas origin)\r\t\tinto: savedPatch.\r\tsavedPatch offset: myBnds topLeft.\r\t^damageRect',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2017-06-17T15:49:20.252668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #'updateCacheCanvas:',			#protocol : #drawing,			#sourceCode : 'updateCacheCanvas: aCanvas \r\t"Update the cached image of the morphs being held by this hand."\r\r\t"Note: The following is an attempt to quickly get out if there\'s no change"\r\r\t| subBnds rectList nPix |\r\tsubBnds := Rectangle merging: (submorphs collect: [:m | m fullBounds]).\r\trectList := damageRecorder invalidRectsFullBounds: subBnds.\r\tdamageRecorder reset.\r\t(rectList isEmpty \r\t\tand: [cacheCanvas notNil and: [cacheCanvas extent = subBnds extent]]) \r\t\t\tifTrue: [^self].\r\r\t"Always check for real translucency -- can\'t be cached in a form"\r\tself submorphsDo: \r\t\t\t[:m | \r\t\t\tm wantsToBeCachedByHand \r\t\t\t\tifFalse: \r\t\t\t\t\t[cacheCanvas := nil.\r\t\t\t\t\tcachedCanvasHasHoles := true.\r\t\t\t\t\t^self]].\r\t(cacheCanvas isNil or: [cacheCanvas extent ~= subBnds extent]) \r\t\tifTrue: \r\t\t\t[cacheCanvas := (aCanvas allocateForm: subBnds extent) getCanvas.\r\t\t\tcacheCanvas translateBy: subBnds origin negated\r\t\t\t\tduring: [:tempCanvas | self drawSubmorphsOn: tempCanvas].\r\t\t\tself submorphsDo: \r\t\t\t\t\t[:m | \r\t\t\t\t\t(m areasRemainingToFill: subBnds) isEmpty \r\t\t\t\t\t\tifTrue: [^cachedCanvasHasHoles := false]].\r\t\t\tnPix := cacheCanvas form tallyPixelValues first.\r\t\t\t"--> begin rounded corners hack <---"\r\t\t\tcachedCanvasHasHoles := (nPix = 48 \r\t\t\t\t\t\tand: [submorphs size = 1 and: [submorphs first wantsRoundedCorners]]) \r\t\t\t\t\t\t\tifTrue: [false]\r\t\t\t\t\t\t\tifFalse: [nPix > 0].\r\t\t\t"--> end rounded corners hack <---"\r\t\t\t^self].\r\r\t"incrementally update the cache canvas"\r\tcacheCanvas translateBy: subBnds origin negated\r\t\tduring: \r\t\t\t[:cc | \r\t\t\trectList do: \r\t\t\t\t\t[:r | \r\t\t\t\t\tcc clipBy: r\r\t\t\t\t\t\tduring: \r\t\t\t\t\t\t\t[:c | \r\t\t\t\t\t\t\tc fillColor: Color transparent.\r\t\t\t\t\t\t\tself drawSubmorphsOn: c]]]',			#stamp : 'dgd 2/21/2003 22:49',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #'updateCacheCanvas:',			#protocol : #drawing,			#sourceCode : 'updateCacheCanvas: aCanvas \r\t"Update the cached image of the morphs being held by this hand."\r\r\t"Note: The following is an attempt to quickly get out if there\'s no change"\r\r\t| subBnds rectList nPix |\r\tsubBnds := Rectangle merging: (submorphs collect: [:m | m fullBounds]).\r\trectList := damageRecorder invalidRectsFullBounds: subBnds.\r\tdamageRecorder reset.\r\t(rectList isEmpty \r\t\tand: [cacheCanvas notNil and: [cacheCanvas extent = subBnds extent]]) \r\t\t\tifTrue: [^self].\r\r\t"Always check for real translucency -- can\'t be cached in a form"\r\tself submorphsDo: \r\t\t\t[:m | \r\t\t\tm wantsToBeCachedByHand \r\t\t\t\tifFalse: \r\t\t\t\t\t[cacheCanvas := nil.\r\t\t\t\t\tcachedCanvasHasHoles := true.\r\t\t\t\t\t^self]].\r\t(cacheCanvas isNil or: [cacheCanvas extent ~= subBnds extent]) \r\t\tifTrue: \r\t\t\t[cacheCanvas := (aCanvas allocateForm: subBnds extent) getCanvas.\r\t\t\tcacheCanvas translateBy: subBnds origin negated\r\t\t\t\tduring: [:tempCanvas | self drawSubmorphsOn: tempCanvas].\r\t\t\tself submorphsDo: \r\t\t\t\t\t[:m | \r\t\t\t\t\t(m areasRemainingToFill: subBnds) isEmpty \r\t\t\t\t\t\tifTrue: [^cachedCanvasHasHoles := false]].\r\t\t\tnPix := cacheCanvas cellForm tallyPixelValues first.\r\t\t\t"--> begin rounded corners hack <---"\r\t\t\tcachedCanvasHasHoles := (nPix = 48 \r\t\t\t\t\t\tand: [submorphs size = 1 and: [submorphs first wantsRoundedCorners]]) \r\t\t\t\t\t\t\tifTrue: [false]\r\t\t\t\t\t\t\tifFalse: [nPix > 0].\r\t\t\t"--> end rounded corners hack <---"\r\t\t\t^self].\r\r\t"incrementally update the cache canvas"\r\tcacheCanvas translateBy: subBnds origin negated\r\t\tduring: \r\t\t\t[:cc | \r\t\t\trectList do: \r\t\t\t\t\t[:r | \r\t\t\t\t\tcc clipBy: r\r\t\t\t\t\t\tduring: \r\t\t\t\t\t\t\t[:c | \r\t\t\t\t\t\t\tc fillColor: Color transparent.\r\t\t\t\t\t\t\tself drawSubmorphsOn: c]]]',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2017-06-17T15:49:20.267668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #'fullDrawOn:',			#protocol : #drawing,			#sourceCode : 'fullDrawOn: aCanvas \r\t"A HandMorph has unusual drawing requirements:\r\t\t1. the hand itself (i.e., the cursor) appears in front of its submorphs\r\t\t2. morphs being held by the hand cast a shadow on the world/morphs below\r\tThe illusion is that the hand plucks up morphs and carries them above the world."\r\r\t"Note: This version caches an image of the morphs being held by the hand for\r\t better performance. This cache is invalidated if one of those morphs changes."\r\r\t| disableCaching subBnds roundCorners rounded |\r\tself visible ifFalse: [^self].\r\t(aCanvas isVisible: self fullBounds) ifFalse: [^self].\r\tdisableCaching := false.\r\tdisableCaching \r\t\tifTrue: \r\t\t\t[self nonCachingFullDrawOn: aCanvas.\r\t\t\t^self].\r\tsubmorphs isEmpty \r\t\tifTrue: \r\t\t\t[cacheCanvas := nil.\r\t\t\t^self drawOn: aCanvas].\t"just draw the hand itself"\r\tsubBnds := Rectangle merging: (submorphs collect: [:m | m fullBounds]).\r\tself updateCacheCanvas: aCanvas.\r\t(cacheCanvas isNil \r\t\tor: [cachedCanvasHasHoles and: [cacheCanvas depth = 1]]\r\t)ifTrue: ["could not use caching due to translucency; do full draw"\r\t\tself nonCachingFullDrawOn: aCanvas.\r\t\t^self\r\t].\r\r\t"--> begin rounded corners hack <---"\r\troundCorners := cachedCanvasHasHoles == false \r\t\t\t\tand: [submorphs size = 1 and: [submorphs first wantsRoundedCorners]].\r\troundCorners \r\t\tifTrue: \r\t\t\t[rounded := submorphs first.\r\t\t\taCanvas asShadowDrawingCanvas translateBy: self shadowOffset\r\t\t\t\tduring: \r\t\t\t\t\t[:shadowCanvas | \r\t\t\t\t\tshadowCanvas roundCornersOf: rounded\r\t\t\t\t\t\tduring: \r\t\t\t\t\t\t\t[(subBnds areasOutside: (rounded boundsWithinCorners \r\t\t\t\t\t\t\t\t\t\ttranslateBy: self shadowOffset negated)) \r\t\t\t\t\t\t\t\tdo: [:r | shadowCanvas fillRectangle: r color: Color black]]].\r\t\t\taCanvas roundCornersOf: rounded\r\t\t\t\tduring: \r\t\t\t\t\t[aCanvas \r\t\t\t\t\t\tdrawImage: cacheCanvas form\r\t\t\t\t\t\tat: subBnds origin\r\t\t\t\t\t\tsourceRect: cacheCanvas form boundingBox].\r\t\t\t^self drawOn: aCanvas\t"draw the hand itself in front of morphs"].\r\t"--> end rounded corners hack <---"\r\r\t"draw the shadow"\r\t(submorphs anySatisfy: [:m | m handlesDropShadowInHand not]) ifTrue: [\r\t\taCanvas asShadowDrawingCanvas translateBy: self shadowOffset\r\t\tduring: \r\t\t\t[:shadowCanvas | \r\t\t\tcachedCanvasHasHoles \r\t\t\t\tifTrue: \r\t\t\t\t\t["Have to draw the real shadow of the form"\r\r\t\t\t\t\tshadowCanvas paintImage: cacheCanvas form at: subBnds origin]\r\t\t\t\tifFalse: \r\t\t\t\t\t["Much faster if only have to shade the edge of a solid rectangle"\r\r\t\t\t\t\t(subBnds areasOutside: (subBnds translateBy: self shadowOffset negated)) \r\t\t\t\t\t\tdo: [:r | shadowCanvas fillRectangle: r color: Color black]]]].\r\r\t"draw morphs in front of the shadow using the cached Form"\r\tcachedCanvasHasHoles \r\t\tifTrue: [aCanvas paintImage: cacheCanvas form at: subBnds origin]\r\t\tifFalse: \t[\r\t\t\taCanvas \r\t\t\tdrawImage: cacheCanvas form\r\t\t\tat: subBnds origin\r\t\t\tsourceRect: cacheCanvas form boundingBox\r\t\t].\r\tself drawOn: aCanvas\t"draw the hand itself in front of morphs"',			#stamp : 'HenrikNergaard 11/6/2015 00:12',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HandMorph,				#isMetaSide : false			},			#name : #'fullDrawOn:',			#protocol : #drawing,			#sourceCode : 'fullDrawOn: aCanvas \r\t"A HandMorph has unusual drawing requirements:\r\t\t1. the hand itself (i.e., the cursor) appears in front of its submorphs\r\t\t2. morphs being held by the hand cast a shadow on the world/morphs below\r\tThe illusion is that the hand plucks up morphs and carries them above the world."\r\r\t"Note: This version caches an image of the morphs being held by the hand for\r\t better performance. This cache is invalidated if one of those morphs changes."\r\r\t| disableCaching subBnds roundCorners rounded |\r\tself visible ifFalse: [^self].\r\t(aCanvas isVisible: self fullBounds) ifFalse: [^self].\r\tdisableCaching := false.\r\tdisableCaching \r\t\tifTrue: \r\t\t\t[self nonCachingFullDrawOn: aCanvas.\r\t\t\t^self].\r\tsubmorphs isEmpty \r\t\tifTrue: \r\t\t\t[cacheCanvas := nil.\r\t\t\t^self drawOn: aCanvas].\t"just draw the hand itself"\r\tsubBnds := Rectangle merging: (submorphs collect: [:m | m fullBounds]).\r\tself updateCacheCanvas: aCanvas.\r\t(cacheCanvas isNil \r\t\tor: [cachedCanvasHasHoles and: [cacheCanvas depth = 1]]\r\t)ifTrue: ["could not use caching due to translucency; do full draw"\r\t\tself nonCachingFullDrawOn: aCanvas.\r\t\t^self\r\t].\r\r\t"--> begin rounded corners hack <---"\r\troundCorners := cachedCanvasHasHoles == false \r\t\t\t\tand: [submorphs size = 1 and: [submorphs first wantsRoundedCorners]].\r\troundCorners \r\t\tifTrue: \r\t\t\t[rounded := submorphs first.\r\t\t\taCanvas asShadowDrawingCanvas translateBy: self shadowOffset\r\t\t\t\tduring: \r\t\t\t\t\t[:shadowCanvas | \r\t\t\t\t\tshadowCanvas roundCornersOf: rounded\r\t\t\t\t\t\tduring: \r\t\t\t\t\t\t\t[(subBnds areasOutside: (rounded boundsWithinCorners \r\t\t\t\t\t\t\t\t\t\ttranslateBy: self shadowOffset negated)) \r\t\t\t\t\t\t\t\tdo: [:r | shadowCanvas fillRectangle: r color: Color black]]].\r\t\t\taCanvas roundCornersOf: rounded\r\t\t\t\tduring: \r\t\t\t\t\t[aCanvas \r\t\t\t\t\t\tdrawImage: cacheCanvas cellForm\r\t\t\t\t\t\tat: subBnds origin\r\t\t\t\t\t\tsourceRect: cacheCanvas cellForm boundingBox].\r\t\t\t^self drawOn: aCanvas\t"draw the hand itself in front of morphs"].\r\t"--> end rounded corners hack <---"\r\r\t"draw the shadow"\r\t(submorphs anySatisfy: [:m | m handlesDropShadowInHand not]) ifTrue: [\r\t\taCanvas asShadowDrawingCanvas translateBy: self shadowOffset\r\t\tduring: \r\t\t\t[:shadowCanvas | \r\t\t\tcachedCanvasHasHoles \r\t\t\t\tifTrue: \r\t\t\t\t\t["Have to draw the real shadow of the form"\r\r\t\t\t\t\tshadowCanvas paintImage: cacheCanvas cellForm at: subBnds origin]\r\t\t\t\tifFalse: \r\t\t\t\t\t["Much faster if only have to shade the edge of a solid rectangle"\r\r\t\t\t\t\t(subBnds areasOutside: (subBnds translateBy: self shadowOffset negated)) \r\t\t\t\t\t\tdo: [:r | shadowCanvas fillRectangle: r color: Color black]]]].\r\r\t"draw morphs in front of the shadow using the cached Form"\r\tcachedCanvasHasHoles \r\t\tifTrue: [aCanvas paintImage: cacheCanvas cellForm at: subBnds origin]\r\t\tifFalse: \t[\r\t\t\taCanvas \r\t\t\tdrawImage: cacheCanvas cellForm\r\t\t\tat: subBnds origin\r\t\t\tsourceRect: cacheCanvas cellForm boundingBox\r\t\t].\r\tself drawOn: aCanvas\t"draw the hand itself in front of morphs"',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2017-06-17T15:49:20.385668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test4,			#protocol : #'as yet unclassified',			#sourceCode : 'test4\r\t|  t  c surf |\r\r"t := \'12345 pi kl mn op gj the text must flow\' "\r\rt := \'Unfortunately this class has not been documented yet.\' \rasText .\r\tt addAttribute: (TextFontReference toFont: (\rLogicalFont\r familyName: \'Tahoma\'\r pointSize: 10\r)).\r\tt addAttribute: (TextColor new color: Color red) from: 3 to: 10.\r\r\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\t\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color yellow alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\r\t\tcanvas pathTransform scaleBy: 1.\r\t\t1 to: 20 do: [:i |\r\t\t\tc renderOn: canvas.\r\t\t\tcanvas pathTransform translateBy: 0.1@10.\r\t\t]\r\t].\r\tDisplay getCanvas translucentImage: surf form at: 100@100\r\r',			#stamp : 'IgorStasenko 8/30/2012 19:01',			#package : #Athens-Text		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test4,			#protocol : #'as yet unclassified',			#sourceCode : 'test4\r\t|  t  c surf |\r\r"t := \'12345 pi kl mn op gj the text must flow\' "\r\rt := \'Unfortunately this class has not been documented yet.\' \rasText .\r\tt addAttribute: (TextFontReference toFont: (\rLogicalFont\r familyName: \'Tahoma\'\r pointSize: 10\r)).\r\tt addAttribute: (TextColor new color: Color red) from: 3 to: 10.\r\r\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\t\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color yellow alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\r\t\tcanvas pathTransform scaleBy: 1.\r\t\t1 to: 20 do: [:i |\r\t\t\tc renderOn: canvas.\r\t\t\tcanvas pathTransform translateBy: 0.1@10.\r\t\t]\r\t].\r\tDisplay getCanvas translucentImage: surf cellForm at: 100@100\r\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Text		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2017-06-17T15:49:20.393668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test5,			#protocol : #'as yet unclassified',			#sourceCode : 'test5\r\t|  t  c surf |\r\r"t := \'12345 pi kl mn op gj the text must flow\' "\r\rt := \'U\' \rasText .\r\tt addAttribute: (TextFontReference toFont: (\rLogicalFont\r familyName: \'Tahoma\'\r pointSize: 10\r)).\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color yellow alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\r\t\tcanvas pathTransform scaleBy: 1.\r\t\t1 to: 20 do: [:i |\r\t\t\tc renderOn: canvas.\r\t\t\tcanvas pathTransform translateBy: 10@0.1.\r\t\t]\r\t].\r\tDisplay getCanvas translucentImage: surf form at: 100@100\r\r',			#stamp : 'IgorStasenko 8/30/2012 19:01',			#package : #Athens-Text		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test5,			#protocol : #'as yet unclassified',			#sourceCode : 'test5\r\t|  t  c surf |\r\r"t := \'12345 pi kl mn op gj the text must flow\' "\r\rt := \'U\' \rasText .\r\tt addAttribute: (TextFontReference toFont: (\rLogicalFont\r familyName: \'Tahoma\'\r pointSize: 10\r)).\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color yellow alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\r\t\tcanvas pathTransform scaleBy: 1.\r\t\t1 to: 20 do: [:i |\r\t\t\tc renderOn: canvas.\r\t\t\tcanvas pathTransform translateBy: 10@0.1.\r\t\t]\r\t].\r\tDisplay getCanvas translucentImage: surf cellForm at: 100@100\r\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Text		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2017-06-17T15:49:20.399668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test3,			#protocol : #'as yet unclassified',			#sourceCode : 'test3\r\t|  t  c surf |\r\r"t := \'12345 pi kl mn op gj the text must flow\' "\r\rt := \'qW\' \rasText .\r\tt addAttribute: (TextFontReference toFont: (\rLogicalFont\r familyName: \'Arial\'\r pointSize: 8\r)).\r\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color yellow alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\r\t\tcanvas pathTransform translateBy: 200@200.\r\t\t\t\t\r"\t\tcanvas pathTransform rotateByDegrees: 90. "\r\t\tcanvas pathTransform scaleBy: 4.\r\t1 to: 10 do: [:i |\r\t\t\r\t\tcanvas setPaint: (Color blue alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 100@10).\r\t\t\r\t\tc renderOn: canvas.\r\t\t\r\t\tcanvas pathTransform rotateByDegrees: 5. \r\t\tcanvas pathTransform translateBy: 0 @11 .\r\t].\r\t].\r\tDisplay getCanvas translucentImage: surf form at: 100@100\r\r',			#stamp : 'IgorStasenko 8/30/2012 19:01',			#package : #Athens-Text		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test3,			#protocol : #'as yet unclassified',			#sourceCode : 'test3\r\t|  t  c surf |\r\r"t := \'12345 pi kl mn op gj the text must flow\' "\r\rt := \'qW\' \rasText .\r\tt addAttribute: (TextFontReference toFont: (\rLogicalFont\r familyName: \'Arial\'\r pointSize: 8\r)).\r\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color yellow alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\r\t\tcanvas pathTransform translateBy: 200@200.\r\t\t\t\t\r"\t\tcanvas pathTransform rotateByDegrees: 90. "\r\t\tcanvas pathTransform scaleBy: 4.\r\t1 to: 10 do: [:i |\r\t\t\r\t\tcanvas setPaint: (Color blue alpha: 0.5).\r\t\tcanvas drawShape: (0@0 corner: 100@10).\r\t\t\r\t\tc renderOn: canvas.\r\t\t\r\t\tcanvas pathTransform rotateByDegrees: 5. \r\t\tcanvas pathTransform translateBy: 0 @11 .\r\t].\r\t].\r\tDisplay getCanvas translucentImage: surf cellForm at: 100@100\r\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Text		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2017-06-17T15:49:20.407668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test2,			#protocol : #'as yet unclassified',			#sourceCode : 'test2\r\t|  t  c surf |\r\tt := self testText. \r\tt addAttribute: (AthensTextBackground new color: (Color green alpha: 0.3 )) from: 1 to: 267.\r\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\t\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color white ).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\t\tcanvas pathTransform scaleBy: 1.\r\r\t\tcanvas pathTransform translateX: 300 Y: 0.\r\r\t\tcanvas setPaint: Color yellow.\r\t\tcanvas pathTransform rotateByDegrees: 0.\r\t\tc renderOn: canvas\r\t].\r\r\tDisplay getCanvas translucentImage: surf form at: 0@0\r\r',			#stamp : 'IgorStasenko 8/30/2012 19:00',			#package : #Athens-Text		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensTextRenderTest class',				#isMetaSide : true			},			#name : #test2,			#protocol : #'as yet unclassified',			#sourceCode : 'test2\r\t|  t  c surf |\r\tt := self testText. \r\tt addAttribute: (AthensTextBackground new color: (Color green alpha: 0.3 )) from: 1 to: 267.\r\r\tc := AthensTextComposer scan: t for: AthensTextScanner new.\r\r\tsurf := self surfaceClass extent: Display extent.\r\t\r\tsurf drawDuring: [ :canvas | \r\t\t\r\t\tcanvas setPaint: (Color white ).\r\t\tcanvas drawShape: (0@0 corner: 300@300).\r\t\tcanvas pathTransform scaleBy: 1.\r\r\t\tcanvas pathTransform translateX: 300 Y: 0.\r\r\t\tcanvas setPaint: Color yellow.\r\t\tcanvas pathTransform rotateByDegrees: 0.\r\t\tc renderOn: canvas\r\t].\r\r\tDisplay getCanvas translucentImage: surf cellForm at: 0@0\r\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Text		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2017-06-17T15:49:20.413668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #'imageRectangleFromDisplayRectangle:',			#protocol : #geometry,			#sourceCode : 'imageRectangleFromDisplayRectangle: aRectangle\r\t"Answer a rectangle in (original) image coordinates that\r\tcorresponds to the given rectangle (in relative display coordinates)."\r\r\t|db|\r\tdb := self displayBounds .\r\tdb area = 0 ifTrue: [^db].\r\tself layout == #scaledAspect ifTrue: [\r\t\t^((aRectangle translateBy: self layoutPosition negated)\r\t\t\tscaleBy: self form width / db width) rounded].\r\tself layout == #scaled ifTrue: [\r\t\t^((aRectangle translateBy: self layoutPosition negated)\r\t\t\tscaleBy: (self form width / db width) @ (self form height / db height)) rounded].\r\t^self scale = 1\r\t\tifTrue: [aRectangle translateBy: self layoutPosition negated]\r\t\tifFalse: [((aRectangle translateBy: self layoutPosition negated)\r\t\t\t\t\tscaleBy: 1 / self scale) rounded]',			#stamp : 'StephaneDucasse 5/23/2013 18:06',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #'imageRectangleFromDisplayRectangle:',			#protocol : #geometry,			#sourceCode : 'imageRectangleFromDisplayRectangle: aRectangle\r\t"Answer a rectangle in (original) image coordinates that\r\tcorresponds to the given rectangle (in relative display coordinates)."\r\r\t|db|\r\tdb := self displayBounds .\r\tdb area = 0 ifTrue: [^db].\r\tself layout == #scaledAspect ifTrue: [\r\t\t^((aRectangle translateBy: self layoutPosition negated)\r\t\t\tscaleBy: self cellForm width / db width) rounded].\r\tself layout == #scaled ifTrue: [\r\t\t^((aRectangle translateBy: self layoutPosition negated)\r\t\t\tscaleBy: (self cellForm width / db width) @ (self cellForm height / db height)) rounded].\r\t^self scale = 1\r\t\tifTrue: [aRectangle translateBy: self layoutPosition negated]\r\t\tifFalse: [((aRectangle translateBy: self layoutPosition negated)\r\t\t\t\t\tscaleBy: 1 / self scale) rounded]',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2017-06-17T15:49:20.418668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #scaledImage,			#protocol : #accessing,			#sourceCode : 'scaledImage\r\t"Answer the image scaled as required."\r\t\r\t|i|\r\ti := self form.\r\ti boundingBox area = 0 ifTrue: [^i].\r\t(self layout == #scaled and: [self extent ~= i extent]) ifTrue: [\r\t\t^i magnify: i boundingBox by: (self extent / i extent) smoothing: 2].\r\t(self layout == #scaledAspect and: [self extent ~= i extent]) ifTrue: [\r\t\t^self width / i width > (self height / i height)\r\t\t\tifTrue: [i magnify: i boundingBox by: (self height / i height) smoothing: 2]\r\t\t\tifFalse: [i magnify: i boundingBox by: (self width / i width) smoothing: 2]].\r\tself scale ~= 1 ifTrue: [\r\t\t^i magnify: i boundingBox by: self scale smoothing: 2].\r\t^i',			#stamp : 'StephaneDucasse 5/23/2013 18:07',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #scaledImage,			#protocol : #accessing,			#sourceCode : 'scaledImage\r\t"Answer the image scaled as required."\r\t\r\t|i|\r\ti := self cellForm.\r\ti boundingBox area = 0 ifTrue: [^i].\r\t(self layout == #scaled and: [self extent ~= i extent]) ifTrue: [\r\t\t^i magnify: i boundingBox by: (self extent / i extent) smoothing: 2].\r\t(self layout == #scaledAspect and: [self extent ~= i extent]) ifTrue: [\r\t\t^self width / i width > (self height / i height)\r\t\t\tifTrue: [i magnify: i boundingBox by: (self height / i height) smoothing: 2]\r\t\t\tifFalse: [i magnify: i boundingBox by: (self width / i width) smoothing: 2]].\r\tself scale ~= 1 ifTrue: [\r\t\t^i magnify: i boundingBox by: self scale smoothing: 2].\r\t^i',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2017-06-17T15:49:20.423668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #optimalExtent,			#protocol : #geometry,			#sourceCode : 'optimalExtent\r\t"Answer the optimal extent for the receiver."\r\t\r\t^self form extent * self scale + (self borderWidth * 2)',			#stamp : 'StephaneDucasse 5/23/2013 18:07',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #optimalExtent,			#protocol : #geometry,			#sourceCode : 'optimalExtent\r\t"Answer the optimal extent for the receiver."\r\t\r\t^self cellForm extent * self scale + (self borderWidth * 2)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2017-06-17T15:49:20.428668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #imageExtent,			#protocol : #accessing,			#sourceCode : 'imageExtent\r\t"Answer the extent of the original form."\r\r\t^self form extent',			#stamp : 'StephaneDucasse 5/23/2013 18:06',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AlphaImageMorph,				#isMetaSide : false			},			#name : #imageExtent,			#protocol : #accessing,			#sourceCode : 'imageExtent\r\t"Answer the extent of the original form."\r\r\t^self cellForm extent',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2017-06-17T15:49:20.433668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ColorMappingCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^myCanvas form',			#stamp : 'ar 6/24/1999 17:54',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ColorMappingCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^myCanvas cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2017-06-17T15:49:20.437668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ColorMappingCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^myCanvas form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ColorMappingCanvas,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^myCanvas cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2017-06-17T15:49:20.445668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnImageExampleDelegate,				#isMetaSide : false			},			#name : #html,			#protocol : #accessing,			#sourceCode : 'html\r\t^ ZnHtmlOutputStream streamContents: [ :html |\r\t\t html page: \'Image\' do: [\r\t\t\thtml \r\t\t\t\ttag: #src attributes: #(src. \'image?raw=true\');\r\t\t\t\ttag: #br;\r\t\t\t\ttag: #form attributes: #(enctype \'multipart/form-data\' action image method POST) do: [\r\t\t\t\t\thtml\r\t\t\t\t\t\ttag: #h3 with: \'Change the image:\';\r\t\t\t\t\t\ttag: #input attributes: #(type file name file);\r\t\t\t\t\t\ttag: #input attributes: #(type submit value Upload) ] ] ]',			#stamp : 'SvenVanCaekenberghe 11/30/2015 13:43',			#package : #Zinc-HTTP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnImageExampleDelegate,				#isMetaSide : false			},			#name : #html,			#protocol : #accessing,			#sourceCode : 'html\r\t^ ZnHtmlOutputStream streamContents: [ :html |\r\t\t html page: \'Image\' do: [\r\t\t\thtml \r\t\t\t\ttag: #src attributes: #(src. \'image?raw=true\');\r\t\t\t\ttag: #br;\r\t\t\t\ttag: #cellForm attributes: #(enctype \'multipart/form-data\' action image method POST) do: [\r\t\t\t\t\thtml\r\t\t\t\t\t\ttag: #h3 with: \'Change the image:\';\r\t\t\t\t\t\ttag: #input attributes: #(type file name file);\r\t\t\t\t\t\ttag: #input attributes: #(type submit value Upload) ] ] ]',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Zinc-HTTP		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2017-06-17T15:49:20.451668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #fromUser,			#protocol : #'instance creation',			#sourceCode : 'fromUser\r\t| fill |\r\tfill := self form: Form fromUser.\r\tfill origin: 0@0.\r\tfill direction: fill form width @ 0.\r\tfill normal: 0 @ fill form height.\r\tfill tileFlag: true. "So that we can fill arbitrary objects"\r\t^fill',			#stamp : 'ar 6/18/1999 07:09',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #fromUser,			#protocol : #'instance creation',			#sourceCode : 'fromUser\r\t| fill |\r\tfill := self form: Form fromUser.\r\tfill origin: 0@0.\r\tfill direction: fill cellForm width @ 0.\r\tfill normal: 0 @ fill cellForm height.\r\tfill tileFlag: true. "So that we can fill arbitrary objects"\r\t^fill',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2017-06-17T15:49:20.456668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WorldState,				#isMetaSide : false			},			#name : #assuredCanvas,			#protocol : #canvas,			#sourceCode : 'assuredCanvas\r\r\t(canvas isNil or: [(canvas extent ~= viewBox extent) or: [canvas form depth ~= Display depth]])\r\t\tifTrue:\r\t\t\t["allocate a new offscreen canvas the size of the window"\r\t\t\tself canvas: (Display defaultCanvasClass extent: viewBox extent)].\r\t^ self canvas',			#stamp : 'stephane.ducasse 9/25/2008 18:10',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WorldState,				#isMetaSide : false			},			#name : #assuredCanvas,			#protocol : #canvas,			#sourceCode : 'assuredCanvas\r\r\t(canvas isNil or: [(canvas extent ~= viewBox extent) or: [canvas cellForm depth ~= Display depth]])\r\t\tifTrue:\r\t\t\t["allocate a new offscreen canvas the size of the window"\r\t\t\tself canvas: (Display defaultCanvasClass extent: viewBox extent)].\r\t^ self canvas',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2017-06-17T15:49:20.460668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WorldState,				#isMetaSide : false			},			#name : #'doDeferredUpdatingFor:',			#protocol : #'update cycle',			#sourceCode : 'doDeferredUpdatingFor: aWorld\r        "If this platform supports deferred updates, then make my canvas be the Display (or a rectangular portion of it), set the Display to deferred update mode, and answer true. Otherwise, do nothing and answer false. One can set the class variable DisableDeferredUpdates to true to completely disable the deferred updating feature."\r\r\t(Display deferUpdates: true) ifNil: [^ false].  "deferred updates not supported"\r\t(canvas notNil and: [canvas form == Display]) ifFalse: [\r\t\t\taWorld viewBox: Display boundingBox.    "do first since it may clear canvas"\r\t\t\tself canvas: (Display getCanvas copyClipRect: Display boundingBox)].\r\t^ true\r',			#stamp : 'MarcusDenker 7/9/2012 15:28',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WorldState,				#isMetaSide : false			},			#name : #'doDeferredUpdatingFor:',			#protocol : #'update cycle',			#sourceCode : 'doDeferredUpdatingFor: aWorld\r        "If this platform supports deferred updates, then make my canvas be the Display (or a rectangular portion of it), set the Display to deferred update mode, and answer true. Otherwise, do nothing and answer false. One can set the class variable DisableDeferredUpdates to true to completely disable the deferred updating feature."\r\r\t(Display deferUpdates: true) ifNil: [^ false].  "deferred updates not supported"\r\t(canvas notNil and: [canvas cellForm == Display]) ifFalse: [\r\t\t\taWorld viewBox: Display boundingBox.    "do first since it may clear canvas"\r\t\t\tself canvas: (Display getCanvas copyClipRect: Display boundingBox)].\r\t^ true\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2017-06-17T15:49:20.465668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensWorldState,				#isMetaSide : false			},			#name : #'doDeferredUpdatingFor:',			#protocol : #'update cycle',			#sourceCode : 'doDeferredUpdatingFor: aWorld\r\t"overwritten from WorldState to use ower own display"\r\r\t(self display deferUpdates: true) ifNil: [ ^ false ].\r\t(canvas notNil and: [ canvas form == Display ])\r\t\tifFalse: [ \r\t\t\taWorld viewBox: self display boundingBox.\t"do first since it may clear canvas"\r\t\t\tself canvas: (self display getCanvas copyClipRect: self display boundingBox) ].\r\t^ true',			#stamp : 'NicolaiHess 1/4/2015 18:32',			#package : #Athens-Morphic		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensWorldState,				#isMetaSide : false			},			#name : #'doDeferredUpdatingFor:',			#protocol : #'update cycle',			#sourceCode : 'doDeferredUpdatingFor: aWorld\r\t"overwritten from WorldState to use ower own display"\r\r\t(self display deferUpdates: true) ifNil: [ ^ false ].\r\t(canvas notNil and: [ canvas cellForm == Display ])\r\t\tifFalse: [ \r\t\t\taWorld viewBox: self display boundingBox.\t"do first since it may clear canvas"\r\t\t\tself canvas: (self display getCanvas copyClipRect: self display boundingBox) ].\r\t^ true',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Morphic		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2017-06-17T15:49:20.566668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMWindowHandle,				#isMetaSide : false			},			#name : #screenDepth,			#protocol : #accessing,			#sourceCode : 'screenDepth\r\t<primitive: #primitiveScreenDepth >\r\t^ self renderer form depth',			#stamp : 'RonieSalgado 1/10/2014 15:38',			#package : #OSWindow-VM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMWindowHandle,				#isMetaSide : false			},			#name : #screenDepth,			#protocol : #accessing,			#sourceCode : 'screenDepth\r\t<primitive: #primitiveScreenDepth >\r\t^ self renderer cellForm depth',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-VM		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2017-06-17T15:49:20.575668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnDefaultServerDelegate,				#isMetaSide : false			},			#name : #'formTest3:',			#protocol : #responses,			#sourceCode : 'formTest3: request\r\t| contents filename contentType page |\r\tcontents := filename := contentType := \'\'.\r\t(request hasEntity and: [ request contentType matches: ZnMimeType multiPartFormData ])\r\t\tifTrue: [ \r\t\t\t(request entity partNamed: #file ifNone: [ nil ]) \r\t\t\t\tifNotNil: [ :part |\r\t\t\t\t\tfilename := part fileName.\r\t\t\t\t\tcontents := part contents.\r\t\t\t\t\tcontentType := part  contentType.\r\t\t\t\t\tcontentType isBinary ifTrue: [ contents := contents hex ] ] ].\r\tpage := ZnHtmlOutputStream streamContents: [ :html |\r\t\thtml page: \'Form Test 3\' do: [ \r\t\t\thtml \r\t\t\t\ttag: #form \r\t\t\t\tattributes: #(action \'form-test-3\' \'accept-charset\' \'utf-8\' \r\t\t\t\t\t\t\t\t\tenctype \'multipart/form-data\' method POST) \r\t\t\t\tdo: [ \r\t\t\t\t\thtml \r\t\t\t\t\t\tstr: \'File\'; space;\r\t\t\t\t\t\ttag: #input attributes: #(type file name file); space;\r\t\t\t\t\t\ttag: #input attributes: #(type submit) ];\r\t\t\t\ttag: #p do: [ html str: \'filename = \'; str: filename ];\r\t\t\t\ttag: #p do: [ html str: \'content-type = \'; str: contentType asString ];\r\t\t\t\ttag: #p do: [ html str: \'contents = \'; str: contents asString ] ] ].\r\t^ ZnResponse ok: (ZnEntity html: page)',			#stamp : 'SvenVanCaekenberghe 11/30/2015 15:15',			#package : #Zinc-HTTP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnDefaultServerDelegate,				#isMetaSide : false			},			#name : #'formTest3:',			#protocol : #responses,			#sourceCode : 'formTest3: request\r\t| contents filename contentType page |\r\tcontents := filename := contentType := \'\'.\r\t(request hasEntity and: [ request contentType matches: ZnMimeType multiPartFormData ])\r\t\tifTrue: [ \r\t\t\t(request entity partNamed: #file ifNone: [ nil ]) \r\t\t\t\tifNotNil: [ :part |\r\t\t\t\t\tfilename := part fileName.\r\t\t\t\t\tcontents := part contents.\r\t\t\t\t\tcontentType := part  contentType.\r\t\t\t\t\tcontentType isBinary ifTrue: [ contents := contents hex ] ] ].\r\tpage := ZnHtmlOutputStream streamContents: [ :html |\r\t\thtml page: \'Form Test 3\' do: [ \r\t\t\thtml \r\t\t\t\ttag: #cellForm \r\t\t\t\tattributes: #(action \'form-test-3\' \'accept-charset\' \'utf-8\' \r\t\t\t\t\t\t\t\t\tenctype \'multipart/form-data\' method POST) \r\t\t\t\tdo: [ \r\t\t\t\t\thtml \r\t\t\t\t\t\tstr: \'File\'; space;\r\t\t\t\t\t\ttag: #input attributes: #(type file name file); space;\r\t\t\t\t\t\ttag: #input attributes: #(type submit) ];\r\t\t\t\ttag: #p do: [ html str: \'filename = \'; str: filename ];\r\t\t\t\ttag: #p do: [ html str: \'content-type = \'; str: contentType asString ];\r\t\t\t\ttag: #p do: [ html str: \'contents = \'; str: contents asString ] ] ].\r\t^ ZnResponse ok: (ZnEntity html: page)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Zinc-HTTP		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2017-06-17T15:49:20.581668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnDefaultServerDelegate,				#isMetaSide : false			},			#name : #'formTest2:',			#protocol : #responses,			#sourceCode : 'formTest2: request\r\t| input page |\r\tinput := \'input\'.\r\t(request hasEntity and: [ request contentType matches: ZnMimeType applicationFormUrlEncoded  ])\r\t\tifTrue: [ input := request entity at: #input ifAbsent: [ \'input\' ] ].\r\tpage := ZnHtmlOutputStream streamContents: [ :html |\r\t\thtml page: \'Form Test 2\' do: [ \r\t\t\thtml \r\t\t\t\ttag: #form \r\t\t\t\tattributes: #(action \'form-test-2\' \'accept-charset\' \'utf-8\' method POST) \r\t\t\t\tdo: [ \r\t\t\t\t\thtml \r\t\t\t\t\t\tstr: \'Input\'; space;\r\t\t\t\t\t\ttag: #input attributes: { #type. #input. #name. #input. #value. input }; space;\r\t\t\t\t\t\ttag: #input attributes: #(type submit); \r\t\t\t\t\t\tstr: \'for input\'; space; tag: #em with: input ] ] ].\r\t^ ZnResponse ok: (ZnEntity html: page)',			#stamp : 'SvenVanCaekenberghe 11/30/2015 14:50',			#package : #Zinc-HTTP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnDefaultServerDelegate,				#isMetaSide : false			},			#name : #'formTest2:',			#protocol : #responses,			#sourceCode : 'formTest2: request\r\t| input page |\r\tinput := \'input\'.\r\t(request hasEntity and: [ request contentType matches: ZnMimeType applicationFormUrlEncoded  ])\r\t\tifTrue: [ input := request entity at: #input ifAbsent: [ \'input\' ] ].\r\tpage := ZnHtmlOutputStream streamContents: [ :html |\r\t\thtml page: \'Form Test 2\' do: [ \r\t\t\thtml \r\t\t\t\ttag: #cellForm \r\t\t\t\tattributes: #(action \'form-test-2\' \'accept-charset\' \'utf-8\' method POST) \r\t\t\t\tdo: [ \r\t\t\t\t\thtml \r\t\t\t\t\t\tstr: \'Input\'; space;\r\t\t\t\t\t\ttag: #input attributes: { #type. #input. #name. #input. #value. input }; space;\r\t\t\t\t\t\ttag: #input attributes: #(type submit); \r\t\t\t\t\t\tstr: \'for input\'; space; tag: #em with: input ] ] ].\r\t^ ZnResponse ok: (ZnEntity html: page)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Zinc-HTTP		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2017-06-17T15:49:20.586668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnDefaultServerDelegate,				#isMetaSide : false			},			#name : #'formTest1:',			#protocol : #responses,			#sourceCode : 'formTest1: request\r\t| input page |\r\tinput := request uri queryAt: #input ifAbsent: [ \'input\' ].\r\tpage := ZnHtmlOutputStream streamContents: [ :html |\r\t\thtml page: \'Form Test 1\' do: [ \r\t\t\thtml \r\t\t\t\ttag: #form \r\t\t\t\tattributes: #(action \'form-test-1\' \'accept-charset\' \'utf-8\' method GET) \r\t\t\t\tdo: [ \r\t\t\t\t\thtml \r\t\t\t\t\t\tstr: \'Input\'; space;\r\t\t\t\t\t\ttag: #input attributes: { #type. #input. #name. #input. #value. input }; space;\r\t\t\t\t\t\ttag: #input attributes: #(type submit); \r\t\t\t\t\t\tstr: \'for input\'; space; tag: #em with: input ] ] ].\r\t^ ZnResponse ok: (ZnEntity html: page)',			#stamp : 'SvenVanCaekenberghe 11/30/2015 14:49',			#package : #Zinc-HTTP		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnDefaultServerDelegate,				#isMetaSide : false			},			#name : #'formTest1:',			#protocol : #responses,			#sourceCode : 'formTest1: request\r\t| input page |\r\tinput := request uri queryAt: #input ifAbsent: [ \'input\' ].\r\tpage := ZnHtmlOutputStream streamContents: [ :html |\r\t\thtml page: \'Form Test 1\' do: [ \r\t\t\thtml \r\t\t\t\ttag: #cellForm \r\t\t\t\tattributes: #(action \'form-test-1\' \'accept-charset\' \'utf-8\' method GET) \r\t\t\t\tdo: [ \r\t\t\t\t\thtml \r\t\t\t\t\t\tstr: \'Input\'; space;\r\t\t\t\t\t\ttag: #input attributes: { #type. #input. #name. #input. #value. input }; space;\r\t\t\t\t\t\ttag: #input attributes: #(type submit); \r\t\t\t\t\t\tstr: \'for input\'; space; tag: #em with: input ] ] ].\r\t^ ZnResponse ok: (ZnEntity html: page)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Zinc-HTTP		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2017-06-17T15:49:20.591668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #shadowForm,			#protocol : #drawing,			#sourceCode : 'shadowForm\r\t"Return a form representing the \'shadow\' of the receiver - e.g., all pixels that are occupied by the receiver are one, all others are zero."\r\t| canvas |\r\tcanvas := (Display defaultCanvasClass extent: self fullBounds extent depth: 1)\r\t\t\t\tasShadowDrawingCanvas: Color black. "Color black represents one for 1bpp"\r\tcanvas translateBy: bounds topLeft negated\r\t\tduring:[:tempCanvas| tempCanvas fullDrawMorph: self].\r\t^ canvas form offset: bounds topLeft\r',			#stamp : 'JW 7/12/2005 20:12',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #shadowForm,			#protocol : #drawing,			#sourceCode : 'shadowForm\r\t"Return a form representing the \'shadow\' of the receiver - e.g., all pixels that are occupied by the receiver are one, all others are zero."\r\t| canvas |\r\tcanvas := (Display defaultCanvasClass extent: self fullBounds extent depth: 1)\r\t\t\t\tasShadowDrawingCanvas: Color black. "Color black represents one for 1bpp"\r\tcanvas translateBy: bounds topLeft negated\r\t\tduring:[:tempCanvas| tempCanvas fullDrawMorph: self].\r\t^ canvas cellForm offset: bounds topLeft\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2017-06-17T15:49:20.598668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #'imageForm:forRectangle:',			#protocol : #drawing,			#sourceCode : 'imageForm: depth forRectangle: rect\r\t| canvas |\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: depth.\r\tcanvas translateBy: rect topLeft negated\r\t\tduring:[:tempCanvas| tempCanvas fullDrawMorph: self].\r\t^ canvas form offset: rect topLeft',			#stamp : 'ar 9/1/2000 14:23',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #'imageForm:forRectangle:',			#protocol : #drawing,			#sourceCode : 'imageForm: depth forRectangle: rect\r\t| canvas |\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: depth.\r\tcanvas translateBy: rect topLeft negated\r\t\tduring:[:tempCanvas| tempCanvas fullDrawMorph: self].\r\t^ canvas cellForm offset: rect topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2017-06-17T15:49:20.604668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #'imageForm:backgroundColor:forRectangle:',			#protocol : #drawing,			#sourceCode : 'imageForm: depth backgroundColor: aColor forRectangle: rect\r\t| canvas |\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: depth.\r\tcanvas translateBy: rect topLeft negated\r\t\tduring:[:tempCanvas| \r\t\t\ttempCanvas fillRectangle: rect color: aColor.\r\t\t\ttempCanvas fullDrawMorph: self].\r\t^ canvas form offset: rect topLeft',			#stamp : 'nk 9/1/2004 15:08',			#package : #Morphic-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #'imageForm:backgroundColor:forRectangle:',			#protocol : #drawing,			#sourceCode : 'imageForm: depth backgroundColor: aColor forRectangle: rect\r\t| canvas |\r\tcanvas := Display defaultCanvasClass extent: rect extent depth: depth.\r\tcanvas translateBy: rect topLeft negated\r\t\tduring:[:tempCanvas| \r\t\t\ttempCanvas fillRectangle: rect color: aColor.\r\t\t\ttempCanvas fullDrawMorph: self].\r\t^ canvas cellForm offset: rect topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2017-06-17T15:49:20.606668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FT2GlyphRenderer,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^ form',			#stamp : 'IgorStasenko 10/19/2011 15:37',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2017-06-17T15:49:20.612668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^ form',			#stamp : 'IgorStasenko 3/21/2011 15:10',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2017-06-17T15:49:20.616668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClippingCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^canvas cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2017-06-17T15:49:20.619668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:23',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2017-06-17T15:49:20.647668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensCanvasWrapper,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^ self canvas surface asForm',			#stamp : 'NicolaiHess 1/16/2015 15:28',			#package : #Athens-Morphic		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2017-06-17T15:49:20.651668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^form',			#stamp : 'ar 11/11/1998 22:40',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2017-06-17T15:49:20.654668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t"Answer the value of form"\r\r\t^ form',			#stamp : 'gvc 3/26/2008 19:18',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2017-06-17T15:49:20.657668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowFormRenderer,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t\r\t^ form',			#stamp : 'RonieSalgado 1/6/2014 15:03',			#package : #OSWindow-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2017-06-17T15:49:20.660668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^ image\r',			#stamp : 'StephaneDucasse 5/23/2013 17:20',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2017-06-17T15:49:20.662668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InfiniteForm,				#isMetaSide : false			},			#name : #form,			#protocol : #'fillstyle protocol',			#sourceCode : 'form\r\t"Bitmap fills respond to #form"\r\t^patternForm',			#stamp : 'ar 7/2/1999 14:54',			#package : #'Graphics-Display Objects'		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2017-06-17T15:49:20.665668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HiRulerBuilder,				#isMetaSide : false			},			#name : #form,			#protocol : #building,			#sourceCode : 'form\r\t| surface form |\r\tsurface := self athensSurface.\r\r\tform := Form \r\t\textent: (surface width @ surface height) \r\t\tdepth: 32.\r\r\tform getCanvas \r\t\tdrawImage: surface asForm \r\t\tat: 0@0.\r\r\t^ form',			#stamp : 'MartinDias 9/24/2013 18:21',			#package : #Hiedra		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2017-06-17T15:49:20.668668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #NullCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^Form extent: self extent',			#stamp : 'ls 3/20/2000 21:12',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2017-06-17T15:49:20.671668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ColorMappingCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^myCanvas cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2017-06-17T15:49:20.673668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonImagePaint,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\r\t^ form',			#stamp : 'IgorStasenko 4/21/2011 15:30',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2017-06-17T15:49:20.676668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Form,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t"Answer the receiver\'s form.  For vanilla Forms, this degenerates to self.  Makes several methods that operate on both Forms and MaskedForms much more straightforward."\r\r\t^ self',			#stamp : 'CamilloBruni 8/1/2012 16:06',			#package : #'Graphics-Display Objects'		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2017-06-17T15:49:20.681668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Canvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\r\t^ Display\r',			#stamp : 'jm 6/2/1998 06:39',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2017-06-17T15:49:20.684668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ZnImageExampleDelegate,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\t^ self formForImageEntity: self image\r\t',			#stamp : 'SvenVanCaekenberghe 7/6/2013 00:01',			#package : #Zinc-HTTP		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2017-06-17T15:49:20.687668+02:00' ],		#trigger : OmReference [ '30' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FormCanvas,				#isMetaSide : false			},			#name : #form,			#protocol : #accessing,			#sourceCode : 'form\r\r\t^ form',			#stamp : '',			#package : #Graphics-Canvas		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:49:25.251668+02:00' ],		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Model		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #cellForm,			#protocol : #accessing,			#sourceCode : 'cellForm\r\t^ cellForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:49:34.889668+02:00' ],		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ]	},	#content : EpRenameMethodRefactoring {		#oldSelector : #'form:',		#newSelector : #'cellForm:',		#affectedClassName : #CellRenderer	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2017-06-17T15:49:34.994668+02:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: aForm\r\r\tform := aForm.\r\tmask := Form extent: form extent depth: 1. \r\r\tengine := AthensBalloonEngine new.\r\tengine bitBlt: (GrafPort toForm: form) .\r\tengine clipRect: (0@0 extent: form extent).\r\tengine edgeTransform: pathTransform.\r\tengine destOffset: 0@0.\r\tengine reset.',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2017-06-17T15:49:35.000668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: aForm\r\t"Set the value of form"\r\r\tform := aForm.\r\tself direction: aForm extent',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2017-06-17T15:49:35.005668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: anObject\r\tform := anObject',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2017-06-17T15:49:35.016668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: aForm\r\tform := aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2017-06-17T15:49:35.020668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowFormRenderer,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: anObject\r\t\r\tform := anObject',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2017-06-17T15:49:35.025668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: aForm\r\timage := aForm. \r\tsuper extent: (2 * self borderWidth) asPoint + image extent.\r\tself changed',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2017-06-17T15:49:35.031668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InfiniteForm,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #private,			#sourceCode : 'cellForm: aForm\r\r\tpatternForm := aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #'Graphics-Display Objects'		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2017-06-17T15:49:35.037668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'cellForm:',			#protocol : #'instance creation',			#sourceCode : 'cellForm: aForm\r\t^self new form: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2017-06-17T15:49:35.042668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMFormRenderer,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: aForm\r\tsuper form: aForm.\r\tself beDisplay',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-VM		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2017-06-17T15:49:35.046668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonImagePaint,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: anObject\r\r\tform := anObject.\r\torigin := 0@0.\r\tdirection := form extent x @0.',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2017-06-17T15:49:35.051668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageFillStyle class',				#isMetaSide : true			},			#name : #'cellForm:',			#protocol : #'as yet unclassified',			#sourceCode : 'cellForm: aForm\r\t"Answer a new instance of the receiver with the given form."\r\r\t^self new form: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2017-06-17T15:49:35.056668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSNullWindowHandle,				#isMetaSide : false			},			#name : #'newFormRenderer:',			#protocol : #factory,			#sourceCode : 'newFormRenderer: form\r\t^ renderer := OSNullFormRenderer new form: form',			#stamp : 'RonieSalgado 5/8/2014 20:55',			#package : #OSWindow-Core		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSNullWindowHandle,				#isMetaSide : false			},			#name : #'newFormRenderer:',			#protocol : #factory,			#sourceCode : 'newFormRenderer: form\r\t^ renderer := OSNullFormRenderer new cellForm: form',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2017-06-17T15:49:35.061668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tsuper initialize.\r\tself form: self defaultImage.\r',			#stamp : 'StephaneDucasse 5/23/2013 17:28',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\r\tsuper initialize.\r\tself cellForm: self defaultImage.\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2017-06-17T15:49:35.186668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #'resize:',			#protocol : #'*Spec-Inspector',			#sourceCode : 'resize: newSize\r\r\tself form: (image scaledToSize: newSize)',			#stamp : 'BenjaminVanRyseghem 10/17/2013 18:10',			#package : #Spec-Inspector		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #'resize:',			#protocol : #'*Spec-Inspector',			#sourceCode : 'resize: newSize\r\r\tself cellForm: (image scaledToSize: newSize)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Spec-Inspector		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2017-06-17T15:49:35.193668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #readFromFile,			#protocol : #'menu commands',			#sourceCode : 'readFromFile\r\t| fileName |\r\tfileName := UIManager default\r\t\trequest: \'Please enter the image file name\' translated\r\t\tinitialAnswer: \'fileName\'.\r\tfileName isEmptyOrNil ifTrue: [^ self].\r\tself form: (Form fromFileNamed: fileName).\r',			#stamp : 'StephaneDucasse 5/23/2013 18:36',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #readFromFile,			#protocol : #'menu commands',			#sourceCode : 'readFromFile\r\t| fileName |\r\tfileName := UIManager default\r\t\trequest: \'Please enter the image file name\' translated\r\t\tinitialAnswer: \'fileName\'.\r\tfileName isEmptyOrNil ifTrue: [^ self].\r\tself cellForm: (Form fromFileNamed: fileName).\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2017-06-17T15:49:35.200668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #grabFromScreen,			#protocol : #'menu commands',			#sourceCode : 'grabFromScreen\r\r\tself form: Form fromUser.\r',			#stamp : 'StephaneDucasse 5/23/2013 18:35',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #grabFromScreen,			#protocol : #'menu commands',			#sourceCode : 'grabFromScreen\r\r\tself cellForm: Form fromUser.\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2017-06-17T15:49:35.205668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageMorph class',				#isMetaSide : true			},			#name : #'fromString:font:',			#protocol : #'instance creation',			#sourceCode : 'fromString: aString font: aFont\r\t"Create a new ImageMorph showing the given string in the given font"\r\r\t^ self new form: (StringMorph contents: aString font: aFont) imageForm',			#stamp : 'StephaneDucasse 5/23/2013 18:23',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageMorph class',				#isMetaSide : true			},			#name : #'fromString:font:',			#protocol : #'instance creation',			#sourceCode : 'fromString: aString font: aFont\r\t"Create a new ImageMorph showing the given string in the given font"\r\r\t^ self new cellForm: (StringMorph contents: aString font: aFont) imageForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2017-06-17T15:49:35.209668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageMorph class',				#isMetaSide : true			},			#name : #'withForm:',			#protocol : #'instance creation',			#sourceCode : 'withForm: aForm\r\r\t^ self new form: aForm ; yourself',			#stamp : 'StephaneDucasse 5/23/2013 18:23',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageMorph class',				#isMetaSide : true			},			#name : #'withForm:',			#protocol : #'instance creation',			#sourceCode : 'withForm: aForm\r\r\t^ self new cellForm: aForm ; yourself',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2017-06-17T15:49:35.323668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSSDL2WindowHandle,				#isMetaSide : false			},			#name : #'newFormRenderer:',			#protocol : #'instance creation',			#sourceCode : 'newFormRenderer: form\r\t^ renderer := OSSDL2FormRenderer new \r\t\tform: form;\r\t\twindow: self;\r\t\tyourself',			#stamp : 'RonieSalgado 3/25/2014 02:09',			#package : #OSWindow-SDL2		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSSDL2WindowHandle,				#isMetaSide : false			},			#name : #'newFormRenderer:',			#protocol : #'instance creation',			#sourceCode : 'newFormRenderer: form\r\t^ renderer := OSSDL2FormRenderer new \r\t\tcellForm: form;\r\t\twindow: self;\r\t\tyourself',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-SDL2		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2017-06-17T15:49:35.430668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeColumn,				#isMetaSide : false			},			#name : #'headerButtonLabel:icon:',			#protocol : #'column drawing',			#sourceCode : 'headerButtonLabel: aLabel icon: anIconForm\r\tself headerButtonLabel: aLabel font: nil.\r\tself header cellInset: 3@0.\r\tself header icon: (ImageMorph new form: anIconForm)',			#stamp : 'BenjaminVanRyseghem 11/2/2013 18:22',			#package : #Morphic-Widgets-Tree		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeColumn,				#isMetaSide : false			},			#name : #'headerButtonLabel:icon:',			#protocol : #'column drawing',			#sourceCode : 'headerButtonLabel: aLabel icon: anIconForm\r\tself headerButtonLabel: aLabel font: nil.\r\tself header cellInset: 3@0.\r\tself header icon: (ImageMorph new cellForm: anIconForm)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tree		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2017-06-17T15:49:35.438668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeColumn,				#isMetaSide : false			},			#name : #'thumbnailOfSize:',			#protocol : #accessing,			#sourceCode : 'thumbnailOfSize: thumbExtent\r\t"Answer a new thumbnail for the receiver."\r\r\t|f t r|\r\tr := self header fullBounds scaledAndCenteredIn: (0@0 extent: thumbExtent).\r\tf := Form extent: r extent depth: Display depth.\r\tt := MatrixTransform2x3 withScale: 1.0.\r\tf getCanvas\r\t\ttransformBy: t\r\t\tclippingTo: f boundingBox\r\t\tduring: [:c | c translateBy: self visibleBounds topLeft negated during: [:ct | self container fullDrawOn: ct]]\r\t\tsmoothing: 6.\r\t^ImageMorph new\r\t\tform: f',			#stamp : 'StephaneDucasse 5/23/2013 18:40',			#package : #Morphic-Widgets-Tree		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeColumn,				#isMetaSide : false			},			#name : #'thumbnailOfSize:',			#protocol : #accessing,			#sourceCode : 'thumbnailOfSize: thumbExtent\r\t"Answer a new thumbnail for the receiver."\r\r\t|f t r|\r\tr := self header fullBounds scaledAndCenteredIn: (0@0 extent: thumbExtent).\r\tf := Form extent: r extent depth: Display depth.\r\tt := MatrixTransform2x3 withScale: 1.0.\r\tf getCanvas\r\t\ttransformBy: t\r\t\tclippingTo: f boundingBox\r\t\tduring: [:c | c translateBy: self visibleBounds topLeft negated during: [:ct | self container fullDrawOn: ct]]\r\t\tsmoothing: 6.\r\t^ImageMorph new\r\t\tcellForm: f',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tree		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2017-06-17T15:49:35.443668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeColumn,				#isMetaSide : false			},			#name : #'headerButtonLabel:font:icon:target:actionSelector:arguments:',			#protocol : #'column drawing',			#sourceCode : 'headerButtonLabel: aLabel font: aFont icon: anIconForm target: aReceiver actionSelector: aSelector arguments: aCollection\r\tself headerButton.\r\tself header label: aLabel font: aFont.\r\tself header icon: (ImageMorph new form: anIconForm).\r\tself header actionSelector: aSelector.\r\tself header target: aReceiver.\r\tself header arguments: aCollection',			#stamp : 'BenjaminVanRyseghem 11/2/2013 18:24',			#package : #Morphic-Widgets-Tree		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeColumn,				#isMetaSide : false			},			#name : #'headerButtonLabel:font:icon:target:actionSelector:arguments:',			#protocol : #'column drawing',			#sourceCode : 'headerButtonLabel: aLabel font: aFont icon: anIconForm target: aReceiver actionSelector: aSelector arguments: aCollection\r\tself headerButton.\r\tself header label: aLabel font: aFont.\r\tself header icon: (ImageMorph new cellForm: anIconForm).\r\tself header actionSelector: aSelector.\r\tself header target: aReceiver.\r\tself header arguments: aCollection',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tree		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2017-06-17T15:49:35.547668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMMorphicWidgetRenderer,				#isMetaSide : false			},			#name : #'dropDownMenuFrom:withIcon:',			#protocol : #private,			#sourceCode : 'dropDownMenuFrom: aBlock withIcon: anIcon\r\t| activeForm passiveForm menuButton | \r\t\r\tactiveForm := anIcon.\r\tpassiveForm := anIcon.\r\tmenuButton := MultistateButtonMorph new extent: activeForm extent.\r\t^ menuButton\r\t\textent: activeForm extent;\r\t\t\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: activeForm);\r\t\t\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: activeForm);\r\t\t\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: passiveForm);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: passiveForm);\r\t\taddUpAction: aBlock;\r\t\tsetBalloonText: \'Menu\' translated;\r\t\tyourself\r\r',			#stamp : 'AndreiChis 3/25/2015 13:50',			#package : #Glamour-Morphic-Renderer		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMMorphicWidgetRenderer,				#isMetaSide : false			},			#name : #'dropDownMenuFrom:withIcon:',			#protocol : #private,			#sourceCode : 'dropDownMenuFrom: aBlock withIcon: anIcon\r\t| activeForm passiveForm menuButton | \r\t\r\tactiveForm := anIcon.\r\tpassiveForm := anIcon.\r\tmenuButton := MultistateButtonMorph new extent: activeForm extent.\r\t^ menuButton\r\t\textent: activeForm extent;\r\t\t\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: activeForm);\r\t\t\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: activeForm);\r\t\t\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: passiveForm);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: passiveForm);\r\t\taddUpAction: aBlock;\r\t\tsetBalloonText: \'Menu\' translated;\r\t\tyourself\r\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Renderer		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2017-06-17T15:49:35.559668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMMorphicWidgetRenderer,				#isMetaSide : false			},			#name : #'labelActionMorphFor:',			#protocol : #private,			#sourceCode : 'labelActionMorphFor: aPresentation\r\t\r\t ^ aPresentation titleAction \r\t\tifNil: [ nil ]\r\t\tifNotNil: [ :labelAction |\r\t\t\t((labelAction isAvailableOn: aPresentation) and: [ labelAction hasIcon ])\r\t\t\t\tifTrue: [ \r\t\t\t\t\tMultistateButtonMorph new\r\t\t\t\t\t\textent: labelAction icon extent;\r\t\t\t\t\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: labelAction icon);\r\t\t\t\t\t\tsetBalloonText: labelAction title;\r\t\t\t\t\t\taddUpAction: [ labelAction actOn: aPresentation ] ]\r\t\t\t\tifFalse: [ nil ] ]\r\t',			#stamp : 'TudorGirba 10/12/2014 10:52',			#package : #Glamour-Morphic-Renderer		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMMorphicWidgetRenderer,				#isMetaSide : false			},			#name : #'labelActionMorphFor:',			#protocol : #private,			#sourceCode : 'labelActionMorphFor: aPresentation\r\t\r\t ^ aPresentation titleAction \r\t\tifNil: [ nil ]\r\t\tifNotNil: [ :labelAction |\r\t\t\t((labelAction isAvailableOn: aPresentation) and: [ labelAction hasIcon ])\r\t\t\t\tifTrue: [ \r\t\t\t\t\tMultistateButtonMorph new\r\t\t\t\t\t\textent: labelAction icon extent;\r\t\t\t\t\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: labelAction icon);\r\t\t\t\t\t\tsetBalloonText: labelAction title;\r\t\t\t\t\t\taddUpAction: [ labelAction actOn: aPresentation ] ]\r\t\t\t\tifFalse: [ nil ] ]\r\t',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Renderer		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2017-06-17T15:49:35.568668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FTPluggableIconListMorphAdaptorDataSource,				#isMetaSide : false			},			#name : #'createCellText:icon:',			#protocol : #private,			#sourceCode : 'createCellText: aString icon: anIcon \r\t| text icon cell |\r\ttext := aString.\r\ticon := anIcon.\r\tcell := FTCellMorph new\r\t\tcellInset: 5;\r\t\tyourself.\r\ticon\r\t\tifNotNil:\r\t\t\t[ icon := icon asMorph.\r\t\t\ticon class = ImageMorph\r\t\t\t\tifTrue: [ icon form: (icon cellForm scaledToSize: 16 @ 16) ]\r\t\t\t\tifFalse: [ icon bounds: (0 @ 0 corner: 16 @ 16) ].\r\t\t\tcell addMorphBack: icon ].\r\tcell addMorphBack: text asMorph.\r\t^ cell',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-FastTable		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #FTPluggableIconListMorphAdaptorDataSource,				#isMetaSide : false			},			#name : #'createCellText:icon:',			#protocol : #private,			#sourceCode : 'createCellText: aString icon: anIcon \r\t| text icon cell |\r\ttext := aString.\r\ticon := anIcon.\r\tcell := FTCellMorph new\r\t\tcellInset: 5;\r\t\tyourself.\r\ticon\r\t\tifNotNil:\r\t\t\t[ icon := icon asMorph.\r\t\t\ticon class = ImageMorph\r\t\t\t\tifTrue: [ icon cellForm: (icon cellForm scaledToSize: 16 @ 16) ]\r\t\t\t\tifFalse: [ icon bounds: (0 @ 0 corner: 16 @ 16) ].\r\t\t\tcell addMorphBack: icon ].\r\tcell addMorphBack: text asMorph.\r\t^ cell',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-FastTable		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2017-06-17T15:49:35.573668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FTTreeDataSource class',				#isMetaSide : true			},			#name : #emptyMorph,			#protocol : #'utils - morph creation',			#sourceCode : 'emptyMorph\r\t| icon |\r\ticon := (Smalltalk ui icons iconNamed: #emptyIcon) asMorph.\r\ticon form: (icon cellForm scaledToSize: 16 @ 16).\r\t^ icon',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-FastTable		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'FTTreeDataSource class',				#isMetaSide : true			},			#name : #emptyMorph,			#protocol : #'utils - morph creation',			#sourceCode : 'emptyMorph\r\t| icon |\r\ticon := (Smalltalk ui icons iconNamed: #emptyIcon) asMorph.\r\ticon cellForm: (icon cellForm scaledToSize: 16 @ 16).\r\t^ icon',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-FastTable		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2017-06-17T15:49:35.580668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TabBarMorph,				#isMetaSide : false			},			#name : #createMenuButton,			#protocol : #private,			#sourceCode : 'createMenuButton\r\t"Answer a button for the window menu."\r\t| form msb |\r\t\r\tform := Smalltalk ui theme windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\t\r\tform := Smalltalk ui theme windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\t\r\tform := Smalltalk ui theme windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\t\r\tform := Smalltalk ui theme windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [ self popUpMenu ];\r\t\tsetBalloonText: \'tab menu\' translated;\r\t\textent: 16@16.\r\t\t\r\t^ msb',			#stamp : 'BenjaminVanRyseghem 6/9/2013 03:30',			#package : #Morphic-Widgets-Tabs		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TabBarMorph,				#isMetaSide : false			},			#name : #createMenuButton,			#protocol : #private,			#sourceCode : 'createMenuButton\r\t"Answer a button for the window menu."\r\t| form msb |\r\t\r\tform := Smalltalk ui theme windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\t\r\tform := Smalltalk ui theme windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\t\r\tform := Smalltalk ui theme windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\t\r\tform := Smalltalk ui theme windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [ self popUpMenu ];\r\t\tsetBalloonText: \'tab menu\' translated;\r\t\textent: 16@16.\r\t\t\r\t^ msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tabs		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2017-06-17T15:49:35.587668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeMorph,				#isMetaSide : false			},			#name : #expandedToggleImage,			#protocol : #expanding-collapsing,			#sourceCode : 'expandedToggleImage\r\t^ expandedToggleImage ifNil: [expandedToggleImage := ImageMorph new form: self expandedForm].\r',			#stamp : 'StephaneDucasse 5/23/2013 18:39',			#package : #Morphic-Widgets-Tree		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeMorph,				#isMetaSide : false			},			#name : #expandedToggleImage,			#protocol : #expanding-collapsing,			#sourceCode : 'expandedToggleImage\r\t^ expandedToggleImage ifNil: [expandedToggleImage := ImageMorph new cellForm: self expandedForm].\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tree		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2017-06-17T15:49:35.592668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeMorph,				#isMetaSide : false			},			#name : #notExpandedToggleImage,			#protocol : #expanding-collapsing,			#sourceCode : 'notExpandedToggleImage\r\t^ notExpandedToggleImage ifNil: [notExpandedToggleImage := ImageMorph new form: self notExpandedForm].\r',			#stamp : 'StephaneDucasse 5/23/2013 18:39',			#package : #Morphic-Widgets-Tree		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphTreeMorph,				#isMetaSide : false			},			#name : #notExpandedToggleImage,			#protocol : #expanding-collapsing,			#sourceCode : 'notExpandedToggleImage\r\t^ notExpandedToggleImage ifNil: [notExpandedToggleImage := ImageMorph new cellForm: self notExpandedForm].\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Tree		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2017-06-17T15:49:35.597668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMFormRenderer,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: aForm\r\tsuper form: aForm.\r\tself beDisplay',			#stamp : 'RonieSalgado 1/10/2014 17:16',			#package : #OSWindow-VM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMFormRenderer,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: aForm\r\tsuper cellForm: aForm.\r\tself beDisplay',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-VM		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2017-06-17T15:49:35.602668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMFormRenderer,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: aForm\r\tsuper form: aForm.\r\tself beDisplay',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-VM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMFormRenderer,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: aForm\r\tsuper cellForm: aForm.\r\tself beDisplay',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-VM		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2017-06-17T15:49:35.606668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'checkboxButtonSelectedFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'checkboxButtonSelectedFillStyleFor: aCheckboxButton\r\t"Return the selected checkbox button fillStyle for the given checkbox button."\r\t\r\t^(ImageFillStyle form: self checkboxSelectedForm) origin: aCheckboxButton topLeft',			#stamp : 'gvc 12/9/2008 12:45',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'checkboxButtonSelectedFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'checkboxButtonSelectedFillStyleFor: aCheckboxButton\r\t"Return the selected checkbox button fillStyle for the given checkbox button."\r\t\r\t^(ImageFillStyle cellForm: self checkboxSelectedForm) origin: aCheckboxButton topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2017-06-17T15:49:35.612668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'createCollapseBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createCollapseBoxFor: aSystemWindow\r\t"Answer a button for minimising the window."\r\t\r\t|form msb|\r\tform := self windowMinimizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMinimizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow collapseBoxHit];\r\t\tsetBalloonText: \'Collapse this window\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'MarcusDenker 7/22/2013 13:50',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'createCollapseBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createCollapseBoxFor: aSystemWindow\r\t"Answer a button for minimising the window."\r\t\r\t|form msb|\r\tform := self windowMinimizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMinimizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow collapseBoxHit];\r\t\tsetBalloonText: \'Collapse this window\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2017-06-17T15:49:35.618668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'scrollbarNormalHorizontalThumbFillStyleFor:',			#protocol : #fill-styles-scrollbars,			#sourceCode : 'scrollbarNormalHorizontalThumbFillStyleFor: aScrollbar\r\t"Return the normal scrollbar horizontal thumb fillStyle for the given scrollbar."\r\t\r\t|s l m r|\r\ts := aScrollbar slider.\r\tl := self scrollbarThumbLeftForm.\r\tm := self scrollbarThumbHorizontalMiddleForm.\r\tr := self scrollbarThumbRightForm.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle form: l) origin: s topLeft.\r\t\t(AlphaInfiniteForm with: m)\r\t\t\torigin: s topLeft + (l width@0);\r\t\t\textent: (s width - l width - r width)@m height.\r\t\t(ImageFillStyle form: r)\r\t\t\torigin: s topRight - (r width@0)}',			#stamp : 'gvc 10/3/2008 13:32',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'scrollbarNormalHorizontalThumbFillStyleFor:',			#protocol : #fill-styles-scrollbars,			#sourceCode : 'scrollbarNormalHorizontalThumbFillStyleFor: aScrollbar\r\t"Return the normal scrollbar horizontal thumb fillStyle for the given scrollbar."\r\t\r\t|s l m r|\r\ts := aScrollbar slider.\r\tl := self scrollbarThumbLeftForm.\r\tm := self scrollbarThumbHorizontalMiddleForm.\r\tr := self scrollbarThumbRightForm.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle cellForm: l) origin: s topLeft.\r\t\t(AlphaInfiniteForm with: m)\r\t\t\torigin: s topLeft + (l width@0);\r\t\t\textent: (s width - l width - r width)@m height.\r\t\t(ImageFillStyle cellForm: r)\r\t\t\torigin: s topRight - (r width@0)}',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2017-06-17T15:49:35.626668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'scrollbarNormalVerticalThumbFillStyleFor:',			#protocol : #fill-styles-scrollbars,			#sourceCode : 'scrollbarNormalVerticalThumbFillStyleFor: aScrollbar\r\t"Return the normal scrollbar vertical thumb fillStyle for the given scrollbar."\r\t\r\t|s t m b|\r\ts := aScrollbar slider.\r\tt := self scrollbarThumbTopForm.\r\tm := self scrollbarThumbVerticalMiddleForm.\r\tb := self scrollbarThumbBottomForm.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle form: t) origin: s topLeft.\r\t\t(AlphaInfiniteForm with: m)\r\t\t\torigin: s topLeft + (0@t height);\r\t\t\textent: m width@(s height - t height - b height).\r\t\t(ImageFillStyle form: b)\r\t\t\torigin: s bottomLeft - (0@b height)}',			#stamp : 'gvc 10/3/2008 13:30',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'scrollbarNormalVerticalThumbFillStyleFor:',			#protocol : #fill-styles-scrollbars,			#sourceCode : 'scrollbarNormalVerticalThumbFillStyleFor: aScrollbar\r\t"Return the normal scrollbar vertical thumb fillStyle for the given scrollbar."\r\t\r\t|s t m b|\r\ts := aScrollbar slider.\r\tt := self scrollbarThumbTopForm.\r\tm := self scrollbarThumbVerticalMiddleForm.\r\tb := self scrollbarThumbBottomForm.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle cellForm: t) origin: s topLeft.\r\t\t(AlphaInfiniteForm with: m)\r\t\t\torigin: s topLeft + (0@t height);\r\t\t\textent: m width@(s height - t height - b height).\r\t\t(ImageFillStyle cellForm: b)\r\t\t\torigin: s bottomLeft - (0@b height)}',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2017-06-17T15:49:35.631668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'radioButtonSelectedFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'radioButtonSelectedFillStyleFor: aRadioButton\r\t"Return the selected radio button fillStyle for the given button."\r\t\r\t^(ImageFillStyle form: self radioButtonSelectedForm) origin: aRadioButton topLeft',			#stamp : 'gvc 12/8/2008 18:42',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'radioButtonSelectedFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'radioButtonSelectedFillStyleFor: aRadioButton\r\t"Return the selected radio button fillStyle for the given button."\r\t\r\t^(ImageFillStyle cellForm: self radioButtonSelectedForm) origin: aRadioButton topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2017-06-17T15:49:35.636668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'newCloseControlIn:for:action:help:',			#protocol : #'morph creation',			#sourceCode : 'newCloseControlIn: aThemedMorph for: aModel action: aValuable help: helpText\r\t"Answer a button for closing things."\r\t\r\t|form msb|\r\tform := self windowCloseForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowClosePassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowCloseOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowClosePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: aValuable;\r\t\tsetBalloonText: helpText.\r\t^msb',			#stamp : 'MarcusDenker 7/22/2013 13:50',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'newCloseControlIn:for:action:help:',			#protocol : #'morph creation',			#sourceCode : 'newCloseControlIn: aThemedMorph for: aModel action: aValuable help: helpText\r\t"Answer a button for closing things."\r\t\r\t|form msb|\r\tform := self windowCloseForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowClosePassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowCloseOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowClosePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: aValuable;\r\t\tsetBalloonText: helpText.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2017-06-17T15:49:35.643668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'createExpandBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createExpandBoxFor: aSystemWindow\r\t"Answer a button for maximising/restoring the window."\r\t\r\t|form msb|\r\tform := self windowMaximizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMaximizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow expandBoxHit];\r\t\tsetBalloonText: \'Expand to full screen\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'MarcusDenker 7/22/2013 13:50',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'createExpandBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createExpandBoxFor: aSystemWindow\r\t"Answer a button for maximising/restoring the window."\r\t\r\t|form msb|\r\tform := self windowMaximizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMaximizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow expandBoxHit];\r\t\tsetBalloonText: \'Expand to full screen\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2017-06-17T15:49:35.647668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'checkboxButtonNormalFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'checkboxButtonNormalFillStyleFor: aCheckboxButton\r\t"Return the normal checkbox button fillStyle for the given checkbox button."\r\t\r\t^(ImageFillStyle form: self checkboxForm) origin: aCheckboxButton topLeft',			#stamp : 'gvc 12/9/2008 12:45',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'checkboxButtonNormalFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'checkboxButtonNormalFillStyleFor: aCheckboxButton\r\t"Return the normal checkbox button fillStyle for the given checkbox button."\r\t\r\t^(ImageFillStyle cellForm: self checkboxForm) origin: aCheckboxButton topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2017-06-17T15:49:35.651668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'radioButtonNormalFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'radioButtonNormalFillStyleFor: aRadioButton\r\t"Return the normal radio button fillStyle for the given button."\r\t\r\t^(ImageFillStyle form: self radioButtonForm) origin: aRadioButton topLeft',			#stamp : 'gvc 12/8/2008 18:41',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'radioButtonNormalFillStyleFor:',			#protocol : #fill-styles-buttons,			#sourceCode : 'radioButtonNormalFillStyleFor: aRadioButton\r\t"Return the normal radio button fillStyle for the given button."\r\t\r\t^(ImageFillStyle cellForm: self radioButtonForm) origin: aRadioButton topLeft',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2017-06-17T15:49:35.658668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'Window menu\' translated;\r\t\textent: form extent.\r\t^msb',			#stamp : 'MarcusDenker 7/22/2013 13:50',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UIThemeWatery,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'Window menu\' translated;\r\t\textent: form extent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2017-06-17T15:49:35.761668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ScrollBar,				#isMetaSide : false			},			#name : #updateUpButtonImage,			#protocol : #initialize,			#sourceCode : 'updateUpButtonImage\r"update the receiver\'s upButton. put a new image inside"\r\tupButton removeAllMorphs.\r\tupButton\r\t\taddMorphCentered: (ImageMorph new form: self upImage)',			#stamp : 'StephaneDucasse 5/23/2013 18:39',			#package : #Morphic-Widgets-Scrolling		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ScrollBar,				#isMetaSide : false			},			#name : #updateUpButtonImage,			#protocol : #initialize,			#sourceCode : 'updateUpButtonImage\r"update the receiver\'s upButton. put a new image inside"\r\tupButton removeAllMorphs.\r\tupButton\r\t\taddMorphCentered: (ImageMorph new cellForm: self upImage)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Scrolling		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2017-06-17T15:49:35.768668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ScrollBar,				#isMetaSide : false			},			#name : #updateDownButtonImage,			#protocol : #initialize,			#sourceCode : 'updateDownButtonImage\r\t"update the receiver\'s downButton.  put a new image inside"\r\tdownButton removeAllMorphs.\r\tdownButton\r\t\taddMorphCentered: (ImageMorph new form: self downImage)',			#stamp : 'StephaneDucasse 5/23/2013 18:39',			#package : #Morphic-Widgets-Scrolling		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ScrollBar,				#isMetaSide : false			},			#name : #updateDownButtonImage,			#protocol : #initialize,			#sourceCode : 'updateDownButtonImage\r\t"update the receiver\'s downButton.  put a new image inside"\r\tdownButton removeAllMorphs.\r\tdownButton\r\t\taddMorphCentered: (ImageMorph new cellForm: self downImage)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Scrolling		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2017-06-17T15:49:35.774668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pharo3DarkTheme,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r"\t^aSystemWindow createBox\r\t\tlabelGraphic: (self windowMenuIconFor: aSystemWindow);\r\t\textent: aSystemWindow boxExtent;\r\t\tactWhen: #buttonDown;\r\t\tactionSelector: #offerWindowMenu;\r\t\tsetBalloonText: \'window menu\' translated"\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'window menu\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'EstebanLorenzano 10/15/2013 22:18',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pharo3DarkTheme,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r"\t^aSystemWindow createBox\r\t\tlabelGraphic: (self windowMenuIconFor: aSystemWindow);\r\t\textent: aSystemWindow boxExtent;\r\t\tactWhen: #buttonDown;\r\t\tactionSelector: #offerWindowMenu;\r\t\tsetBalloonText: \'window menu\' translated"\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'window menu\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2017-06-17T15:49:35.877668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DateModel,				#isMetaSide : false			},			#name : #iconMorph,			#protocol : #private,			#sourceCode : 'iconMorph\r\r\t^ ImageMorph new form: (self iconNamed: #calendarIcon)',			#stamp : 'Spirita 8/1/2016 12:13',			#package : #Spec-PolyWidgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #DateModel,				#isMetaSide : false			},			#name : #iconMorph,			#protocol : #private,			#sourceCode : 'iconMorph\r\r\t^ ImageMorph new cellForm: (self iconNamed: #calendarIcon)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Spec-PolyWidgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2017-06-17T15:49:35.983668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SpecTreeColumn,				#isMetaSide : false			},			#name : #'setHeaderButtonLabel:font:icon:target:actionSelector:',			#protocol : #private,			#sourceCode : 'setHeaderButtonLabel: aLabel font: aFont icon: anIconForm target: aReceiver actionSelector: aSelector\r\t(aLabel isNil\r\t\tand: [ anIconForm isNil and: [ aReceiver isNil or: [ aSelector isNil ] ] ])\r\t\tifTrue: [ ^ self ].\r\tself headerButton.\r\taLabel\r\t\tifNil: [ self header label: \'\' font: nil ]\r\t\tifNotNil: [ self header label: aLabel font: aFont ].\r\tanIconForm\r\t\tifNotNil: [ self header icon: (ImageMorph new form: anIconForm) ].\r\t(aSelector notNil and: [ aReceiver notNil ])\r\t\tifFalse: [ ^ self ].\r\tself header actionSelector: aSelector.\r\tself header target: aReceiver',			#stamp : 'Spirita 7/13/2016 14:48',			#package : #Spec-MorphicAdapters		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SpecTreeColumn,				#isMetaSide : false			},			#name : #'setHeaderButtonLabel:font:icon:target:actionSelector:',			#protocol : #private,			#sourceCode : 'setHeaderButtonLabel: aLabel font: aFont icon: anIconForm target: aReceiver actionSelector: aSelector\r\t(aLabel isNil\r\t\tand: [ anIconForm isNil and: [ aReceiver isNil or: [ aSelector isNil ] ] ])\r\t\tifTrue: [ ^ self ].\r\tself headerButton.\r\taLabel\r\t\tifNil: [ self header label: \'\' font: nil ]\r\t\tifNotNil: [ self header label: aLabel font: aFont ].\r\tanIconForm\r\t\tifNotNil: [ self header icon: (ImageMorph new cellForm: anIconForm) ].\r\t(aSelector notNil and: [ aReceiver notNil ])\r\t\tifFalse: [ ^ self ].\r\tself header actionSelector: aSelector.\r\tself header target: aReceiver',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Spec-MorphicAdapters		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2017-06-17T15:49:36.099668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'createExpandBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createExpandBoxFor: aSystemWindow\r\t"Answer a button for maximising/restoring the window."\r\t\r\t|form msb|\r\tform := self windowMaximizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMaximizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow expandBoxHit];\r\t\tsetBalloonText: \'Expand to full screen\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'TudorGirba 5/16/2013 22:10',			#package : #Glamour-Morphic-Theme		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'createExpandBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createExpandBoxFor: aSystemWindow\r\t"Answer a button for maximising/restoring the window."\r\t\r\t|form msb|\r\tform := self windowMaximizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMaximizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMaximizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow expandBoxHit];\r\t\tsetBalloonText: \'Expand to full screen\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Theme		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2017-06-17T15:49:36.107668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'newCloseControlIn:for:action:help:',			#protocol : #'morph creation',			#sourceCode : 'newCloseControlIn: aThemedMorph for: aModel action: aValuable help: helpText\r\t"Answer a button for closing things."\r\t\r\t|form msb|\r\tform := self windowCloseForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowClosePassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowCloseOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowClosePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: aValuable;\r\t\tsetBalloonText: helpText.\r\t^msb',			#stamp : 'TudorGirba 5/16/2013 22:10',			#package : #Glamour-Morphic-Theme		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'newCloseControlIn:for:action:help:',			#protocol : #'morph creation',			#sourceCode : 'newCloseControlIn: aThemedMorph for: aModel action: aValuable help: helpText\r\t"Answer a button for closing things."\r\t\r\t|form msb|\r\tform := self windowCloseForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowClosePassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowCloseOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowClosePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: aValuable;\r\t\tsetBalloonText: helpText.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Theme		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2017-06-17T15:49:36.112668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r"\t^aSystemWindow createBox\r\t\tlabelGraphic: (self windowMenuIconFor: aSystemWindow);\r\t\textent: aSystemWindow boxExtent;\r\t\tactWhen: #buttonDown;\r\t\tactionSelector: #offerWindowMenu;\r\t\tsetBalloonText: \'window menu\' translated"\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'window menu\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'TudorGirba 5/16/2013 22:10',			#package : #Glamour-Morphic-Theme		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r"\t^aSystemWindow createBox\r\t\tlabelGraphic: (self windowMenuIconFor: aSystemWindow);\r\t\textent: aSystemWindow boxExtent;\r\t\tactWhen: #buttonDown;\r\t\tactionSelector: #offerWindowMenu;\r\t\tsetBalloonText: \'window menu\' translated"\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'window menu\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Theme		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2017-06-17T15:49:36.118668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'createCollapseBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createCollapseBoxFor: aSystemWindow\r\t"Answer a button for minimising the window."\r\t\r\t|form msb|\r\tform := self windowMinimizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMinimizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow collapseBoxHit];\r\t\tsetBalloonText: \'Collapse this window\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'TudorGirba 5/16/2013 22:10',			#package : #Glamour-Morphic-Theme		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMWhitespaceTheme,				#isMetaSide : false			},			#name : #'createCollapseBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createCollapseBoxFor: aSystemWindow\r\t"Answer a button for minimising the window."\r\t\r\t|form msb|\r\tform := self windowMinimizeForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb extent: form extent.\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMinimizeOverForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMinimizePassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow collapseBoxHit];\r\t\tsetBalloonText: \'Collapse this window\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Theme		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2017-06-17T15:49:36.125668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TransferMorph,				#isMetaSide : false			},			#name : #updateCopyIcon,			#protocol : #private,			#sourceCode : 'updateCopyIcon\r\r\t| copyIcon |\t\r\tcopyIcon := self submorphWithProperty: #tmCopyIcon.\r\tself shouldCopy ifFalse: [\r\t\t^ copyIcon ifNotNil: [ copyIcon delete ]].\r\tcopyIcon ifNotNil: [ ^ self ].\r\tcopyIcon := ImageMorph new form: CopyPlusIcon.\r\tcopyIcon setProperty: #tmCopyIcon toValue: true.\r\t^ self addMorphFront: copyIcon.\r',			#stamp : 'StephaneDucasse 5/23/2013 18:40',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TransferMorph,				#isMetaSide : false			},			#name : #updateCopyIcon,			#protocol : #private,			#sourceCode : 'updateCopyIcon\r\r\t| copyIcon |\t\r\tcopyIcon := self submorphWithProperty: #tmCopyIcon.\r\tself shouldCopy ifFalse: [\r\t\t^ copyIcon ifNotNil: [ copyIcon delete ]].\r\tcopyIcon ifNotNil: [ ^ self ].\r\tcopyIcon := ImageMorph new cellForm: CopyPlusIcon.\r\tcopyIcon setProperty: #tmCopyIcon toValue: true.\r\t^ self addMorphFront: copyIcon.\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2017-06-17T15:49:36.133668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'multiFormFillStyleFrom:cornerWidths:in:',			#protocol : #fill-styles,			#sourceCode : 'multiFormFillStyleFrom: anArray cornerWidths: widthArray in: aRectangle\r\t"Answer a composite fill style from the given forms and central colour\r\tin the given bounds. Use the widths specified for the portion of the\r\tcorner forms to display."\r\t\r\t|tl tm tr ml mr bl bm br c tlw trw blw brw|\r\ttl := anArray first. tlw:= widthArray first.\r\ttm := anArray second.\r\ttr := anArray third. trw := widthArray second.\r\tml  := anArray fourth.\r\tc := anArray fifth.\r\tmr  := anArray sixth.\r\tbl := anArray seventh. blw := widthArray third.\r\tbm := anArray eighth.\r\tbr := anArray ninth. brw := widthArray fourth.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle form: tl)\r\t\t\torigin: aRectangle topLeft;\r\t\t\textent: tlw@tl height.\r\t\t(AlphaInfiniteForm with: tm)\r\t\t\torigin: aRectangle topLeft + (tlw@0);\r\t\t\textent: (aRectangle width - trw - tlw)@tm height.\r\t\t(ImageFillStyle form: tr)\r\t\t\torigin: aRectangle topRight - (tr width@0);\r\t\t\textent: trw@tr height;\r\t\t\toffset: (tr width - trw)@0.\r\t\t(AlphaInfiniteForm with: ml)\r\t\t\torigin: aRectangle topLeft + (0@tl height);\r\t\t\textent: ml width@(aRectangle height - tl height - bl height).\r\t\t(ColorFillStyle color: c)\r\t\t\torigin: aRectangle topLeft + (tlw@tl height);\r\t\t\textent: aRectangle extent - (tlw@tl height) - (brw@br height).\r\t\t(AlphaInfiniteForm with: mr)\r\t\t\torigin: aRectangle topRight + (trw negated@tr height);\r\t\t\textent: mr width@(aRectangle height - tr height - br height).\r\t\t(ImageFillStyle form: bl)\r\t\t\torigin: aRectangle bottomLeft - (0@bl height);\r\t\t\textent: blw@bl height.\r\t\t(AlphaInfiniteForm with: bm)\r\t\t\torigin: aRectangle bottomLeft - (blw negated@bl height);\r\t\t\textent: (aRectangle width - blw - brw)@bm height.\r\t\t(ImageFillStyle form: br)\r\t\t\torigin: aRectangle bottomRight - br extent;\r\t\t\textent: brw@br height;\r\t\t\toffset: (br width - brw)@0}',			#stamp : 'gvc 1/28/2009 18:00',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'multiFormFillStyleFrom:cornerWidths:in:',			#protocol : #fill-styles,			#sourceCode : 'multiFormFillStyleFrom: anArray cornerWidths: widthArray in: aRectangle\r\t"Answer a composite fill style from the given forms and central colour\r\tin the given bounds. Use the widths specified for the portion of the\r\tcorner forms to display."\r\t\r\t|tl tm tr ml mr bl bm br c tlw trw blw brw|\r\ttl := anArray first. tlw:= widthArray first.\r\ttm := anArray second.\r\ttr := anArray third. trw := widthArray second.\r\tml  := anArray fourth.\r\tc := anArray fifth.\r\tmr  := anArray sixth.\r\tbl := anArray seventh. blw := widthArray third.\r\tbm := anArray eighth.\r\tbr := anArray ninth. brw := widthArray fourth.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle cellForm: tl)\r\t\t\torigin: aRectangle topLeft;\r\t\t\textent: tlw@tl height.\r\t\t(AlphaInfiniteForm with: tm)\r\t\t\torigin: aRectangle topLeft + (tlw@0);\r\t\t\textent: (aRectangle width - trw - tlw)@tm height.\r\t\t(ImageFillStyle cellForm: tr)\r\t\t\torigin: aRectangle topRight - (tr width@0);\r\t\t\textent: trw@tr height;\r\t\t\toffset: (tr width - trw)@0.\r\t\t(AlphaInfiniteForm with: ml)\r\t\t\torigin: aRectangle topLeft + (0@tl height);\r\t\t\textent: ml width@(aRectangle height - tl height - bl height).\r\t\t(ColorFillStyle color: c)\r\t\t\torigin: aRectangle topLeft + (tlw@tl height);\r\t\t\textent: aRectangle extent - (tlw@tl height) - (brw@br height).\r\t\t(AlphaInfiniteForm with: mr)\r\t\t\torigin: aRectangle topRight + (trw negated@tr height);\r\t\t\textent: mr width@(aRectangle height - tr height - br height).\r\t\t(ImageFillStyle cellForm: bl)\r\t\t\torigin: aRectangle bottomLeft - (0@bl height);\r\t\t\textent: blw@bl height.\r\t\t(AlphaInfiniteForm with: bm)\r\t\t\torigin: aRectangle bottomLeft - (blw negated@bl height);\r\t\t\textent: (aRectangle width - blw - brw)@bm height.\r\t\t(ImageFillStyle cellForm: br)\r\t\t\torigin: aRectangle bottomRight - br extent;\r\t\t\textent: brw@br height;\r\t\t\toffset: (br width - brw)@0}',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2017-06-17T15:49:36.140668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'multiFormTopFillStyleFrom:in:',			#protocol : #fill-styles,			#sourceCode : 'multiFormTopFillStyleFrom: anArray in: aRectangle\r\t"Answer a composite fill style from the given forms and central colour\r\tin the given bounds. Only top and middle sections are considered."\r\t\r\t|tl tm tr ml mr c|\r\ttl := anArray first.\r\ttm := anArray second.\r\ttr := anArray third.\r\tml  := anArray fourth.\r\tc := anArray fifth.\r\tmr  := anArray sixth.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle form: tl) origin: aRectangle topLeft.\r\t\t(AlphaInfiniteForm with: tm)\r\t\t\torigin: aRectangle topLeft + (tl width@0);\r\t\t\textent: (aRectangle width - tl width - tr width)@tm height.\r\t\t(ImageFillStyle form: tr)\r\t\t\torigin: aRectangle topRight - (tr width@0).\r\t\t(AlphaInfiniteForm with: ml)\r\t\t\torigin: aRectangle topLeft + (0@tr height);\r\t\t\textent: ml width@(aRectangle height - tl height).\r\t\t(ColorFillStyle color: c)\r\t\t\torigin: aRectangle topLeft + tl extent;\r\t\t\textent: aRectangle extent - tl extent - (mr width @0).\r\t\t(AlphaInfiniteForm with: mr)\r\t\t\torigin: aRectangle topRight + (tr width negated@tr height);\r\t\t\textent: mr width@(aRectangle height - tr height)}',			#stamp : 'gvc 1/12/2009 18:23',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'multiFormTopFillStyleFrom:in:',			#protocol : #fill-styles,			#sourceCode : 'multiFormTopFillStyleFrom: anArray in: aRectangle\r\t"Answer a composite fill style from the given forms and central colour\r\tin the given bounds. Only top and middle sections are considered."\r\t\r\t|tl tm tr ml mr c|\r\ttl := anArray first.\r\ttm := anArray second.\r\ttr := anArray third.\r\tml  := anArray fourth.\r\tc := anArray fifth.\r\tmr  := anArray sixth.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle cellForm: tl) origin: aRectangle topLeft.\r\t\t(AlphaInfiniteForm with: tm)\r\t\t\torigin: aRectangle topLeft + (tl width@0);\r\t\t\textent: (aRectangle width - tl width - tr width)@tm height.\r\t\t(ImageFillStyle cellForm: tr)\r\t\t\torigin: aRectangle topRight - (tr width@0).\r\t\t(AlphaInfiniteForm with: ml)\r\t\t\torigin: aRectangle topLeft + (0@tr height);\r\t\t\textent: ml width@(aRectangle height - tl height).\r\t\t(ColorFillStyle color: c)\r\t\t\torigin: aRectangle topLeft + tl extent;\r\t\t\textent: aRectangle extent - tl extent - (mr width @0).\r\t\t(AlphaInfiniteForm with: mr)\r\t\t\torigin: aRectangle topRight + (tr width negated@tr height);\r\t\t\textent: mr width@(aRectangle height - tr height)}',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2017-06-17T15:49:36.506668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'growlDismissHandleFor:',			#protocol : #'*growl',			#sourceCode : 'growlDismissHandleFor: aGrowlMorph\r\t| handle form image |\r\thandle := BorderedMorph newBounds: ((3@3) extent: (20@20))  color: Color white.\r\thandle borderColor: handle color muchDarker.\r\thandle borderWidth: 1.\r\thandle wantsYellowButtonMenu: false.\r\tform := self "haloDismissIcon" windowCloseForm.\r\tform ifNotNil: [\r\t\timage := ImageMorph new.\r\t\timage form: form.\r\t\timage color: handle color contrastingForegroundColor.\r\t\timage lock.\r\t\thandle addMorphCentered: image].\r\t^ handle',			#stamp : 'FernandoOlivero 9/9/2013 01:51',			#package : #Growl		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'growlDismissHandleFor:',			#protocol : #'*growl',			#sourceCode : 'growlDismissHandleFor: aGrowlMorph\r\t| handle form image |\r\thandle := BorderedMorph newBounds: ((3@3) extent: (20@20))  color: Color white.\r\thandle borderColor: handle color muchDarker.\r\thandle borderWidth: 1.\r\thandle wantsYellowButtonMenu: false.\r\tform := self "haloDismissIcon" windowCloseForm.\r\tform ifNotNil: [\r\t\timage := ImageMorph new.\r\t\timage cellForm: form.\r\t\timage color: handle color contrastingForegroundColor.\r\t\timage lock.\r\t\thandle addMorphCentered: image].\r\t^ handle',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Growl		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2017-06-17T15:49:36.515668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'newCloseControlIn:for:action:help:',			#protocol : #'morph creation',			#sourceCode : 'newCloseControlIn: aThemedMorph for: aModel action: aValuable help: helpText\r\t"Answer a button for closing things."\r\t\r\t|form msb|\r\tform := self windowCloseForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb\r\t\tactiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: aValuable;\r\t\tsetBalloonText: helpText.\r\t^msb',			#stamp : 'GaryChambers 8/10/2010 16:33',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'newCloseControlIn:for:action:help:',			#protocol : #'morph creation',			#sourceCode : 'newCloseControlIn: aThemedMorph for: aModel action: aValuable help: helpText\r\t"Answer a button for closing things."\r\t\r\t|form msb|\r\tform := self windowCloseForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb\r\t\tactiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: aValuable;\r\t\tsetBalloonText: helpText.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2017-06-17T15:49:36.523668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'multiFormFillStyleFrom:in:',			#protocol : #fill-styles,			#sourceCode : 'multiFormFillStyleFrom: anArray in: aRectangle\r\t"Answer a composite fill style from the given forms and central colour\r\tin the given bounds."\r\t\r\t|tl tm tr ml mr bl bm br c|\r\ttl := anArray first.\r\ttm := anArray second.\r\ttr := anArray third.\r\tml  := anArray fourth.\r\tc := anArray fifth.\r\tmr  := anArray sixth.\r\tbl := anArray seventh.\r\tbm := anArray eighth.\r\tbr := anArray ninth.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle form: tl) origin: aRectangle topLeft.\r\t\t(AlphaInfiniteForm with: tm)\r\t\t\torigin: aRectangle topLeft + (tl width@0);\r\t\t\textent: (aRectangle width - tl width - tr width)@tm height.\r\t\t(ImageFillStyle form: tr)\r\t\t\torigin: aRectangle topRight - (tr width@0).\r\t\t(AlphaInfiniteForm with: ml)\r\t\t\torigin: aRectangle topLeft + (0@tl height);\r\t\t\textent: ml width@(aRectangle height - tl height - bl height).\r\t\t(ColorFillStyle color: c)\r\t\t\torigin: aRectangle topLeft + tl extent;\r\t\t\textent: aRectangle extent - tl extent - br extent.\r\t\t(AlphaInfiniteForm with: mr)\r\t\t\torigin: aRectangle topRight + (tr width negated@tr height);\r\t\t\textent: mr width@(aRectangle height - tr height - br height).\r\t\t(ImageFillStyle form: bl) origin: aRectangle bottomLeft - (0@bl height).\r\t\t(AlphaInfiniteForm with: bm)\r\t\t\torigin: aRectangle bottomLeft - (bl width negated@bl height);\r\t\t\textent: (aRectangle width - bl width - br width)@bm height.\r\t\t(ImageFillStyle form: br)\r\t\t\torigin: aRectangle bottomRight - br extent}',			#stamp : 'gvc 1/28/2009 17:43',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'multiFormFillStyleFrom:in:',			#protocol : #fill-styles,			#sourceCode : 'multiFormFillStyleFrom: anArray in: aRectangle\r\t"Answer a composite fill style from the given forms and central colour\r\tin the given bounds."\r\t\r\t|tl tm tr ml mr bl bm br c|\r\ttl := anArray first.\r\ttm := anArray second.\r\ttr := anArray third.\r\tml  := anArray fourth.\r\tc := anArray fifth.\r\tmr  := anArray sixth.\r\tbl := anArray seventh.\r\tbm := anArray eighth.\r\tbr := anArray ninth.\r\t^CompositeFillStyle fillStyles: {\r\t\t(ImageFillStyle cellForm: tl) origin: aRectangle topLeft.\r\t\t(AlphaInfiniteForm with: tm)\r\t\t\torigin: aRectangle topLeft + (tl width@0);\r\t\t\textent: (aRectangle width - tl width - tr width)@tm height.\r\t\t(ImageFillStyle cellForm: tr)\r\t\t\torigin: aRectangle topRight - (tr width@0).\r\t\t(AlphaInfiniteForm with: ml)\r\t\t\torigin: aRectangle topLeft + (0@tl height);\r\t\t\textent: ml width@(aRectangle height - tl height - bl height).\r\t\t(ColorFillStyle color: c)\r\t\t\torigin: aRectangle topLeft + tl extent;\r\t\t\textent: aRectangle extent - tl extent - br extent.\r\t\t(AlphaInfiniteForm with: mr)\r\t\t\torigin: aRectangle topRight + (tr width negated@tr height);\r\t\t\textent: mr width@(aRectangle height - tr height - br height).\r\t\t(ImageFillStyle cellForm: bl) origin: aRectangle bottomLeft - (0@bl height).\r\t\t(AlphaInfiniteForm with: bm)\r\t\t\torigin: aRectangle bottomLeft - (bl width negated@bl height);\r\t\t\textent: (aRectangle width - bl width - br width)@bm height.\r\t\t(ImageFillStyle cellForm: br)\r\t\t\torigin: aRectangle bottomRight - br extent}',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2017-06-17T15:49:36.537668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IconicButton,				#isMetaSide : false			},			#name : #'labelGraphic:',			#protocol : #accessing,			#sourceCode : 'labelGraphic: aForm\r\t"Changed to look for any image morph rather than just a sketch."\r\t\r\tgraphicalMorph ifNotNil: [graphicalMorph delete].\r\tgraphicalMorph := ImageMorph new form: aForm.\r\tself extent: graphicalMorph extent + (self borderWidth + self extraBorder).\r\tgraphicalMorph position: self center - (graphicalMorph extent // 2).\r\tself addMorph: graphicalMorph.\r\tgraphicalMorph lock',			#stamp : 'StephaneDucasse 5/23/2013 18:35',			#package : #Morphic-Widgets-Basic		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IconicButton,				#isMetaSide : false			},			#name : #'labelGraphic:',			#protocol : #accessing,			#sourceCode : 'labelGraphic: aForm\r\t"Changed to look for any image morph rather than just a sketch."\r\t\r\tgraphicalMorph ifNotNil: [graphicalMorph delete].\r\tgraphicalMorph := ImageMorph new cellForm: aForm.\r\tself extent: graphicalMorph extent + (self borderWidth + self extraBorder).\r\tgraphicalMorph position: self center - (graphicalMorph extent // 2).\r\tself addMorph: graphicalMorph.\r\tgraphicalMorph lock',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Basic		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2017-06-17T15:49:36.543668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageFillStyle class',				#isMetaSide : true			},			#name : #'form:',			#protocol : #'as yet unclassified',			#sourceCode : 'form: aForm\r\t"Answer a new instance of the receiver with the given form."\r\r\t^self new form: aForm',			#stamp : 'gvc 3/26/2008 19:17',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageFillStyle class',				#isMetaSide : true			},			#name : #'form:',			#protocol : #'as yet unclassified',			#sourceCode : 'form: aForm\r\t"Answer a new instance of the receiver with the given form."\r\r\t^self new cellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2017-06-17T15:49:36.548668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageFillStyle class',				#isMetaSide : true			},			#name : #'cellForm:',			#protocol : #'as yet unclassified',			#sourceCode : 'cellForm: aForm\r\t"Answer a new instance of the receiver with the given form."\r\r\t^self new form: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageFillStyle class',				#isMetaSide : true			},			#name : #'cellForm:',			#protocol : #'as yet unclassified',			#sourceCode : 'cellForm: aForm\r\t"Answer a new instance of the receiver with the given form."\r\r\t^self new cellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2017-06-17T15:49:36.555668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PopupChoiceDialogWindowWithMessage,				#isMetaSide : false			},			#name : #newIconMorph,			#protocol : #'as yet unclassified',			#sourceCode : 'newIconMorph\r\t"Answer an icon for the receiver."\r\t\r\t^ImageMorph new form: self icon',			#stamp : 'StephaneDucasse 5/23/2013 18:39',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #PopupChoiceDialogWindowWithMessage,				#isMetaSide : false			},			#name : #newIconMorph,			#protocol : #'as yet unclassified',			#sourceCode : 'newIconMorph\r\t"Answer an icon for the receiver."\r\t\r\t^ImageMorph new cellForm: self icon',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2017-06-17T15:49:36.561668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MessageDialogWindow,				#isMetaSide : false			},			#name : #newIconMorph,			#protocol : #private,			#sourceCode : 'newIconMorph\r\t"Answer an icon for the receiver."\r\t\r\t^ImageMorph new form: self icon',			#stamp : 'StephaneDucasse 5/23/2013 18:38',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MessageDialogWindow,				#isMetaSide : false			},			#name : #newIconMorph,			#protocol : #private,			#sourceCode : 'newIconMorph\r\t"Answer an icon for the receiver."\r\t\r\t^ImageMorph new cellForm: self icon',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2017-06-17T15:49:36.569668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMBrick,				#isMetaSide : false			},			#name : #'taskThumbnailOfSize:',			#protocol : #morph-common,			#sourceCode : 'taskThumbnailOfSize: thumbExtent\r\t"Answer a new task thumbnail for the receiver."\r\r\t|f t r|\r\tr := self globalBounds scaledAndCenteredIn: (0@0 extent: thumbExtent).\r\tf := Form extent: r extent depth: Display depth.\r\tt := MatrixTransform2x3 withScale: f extent / self extent.\r\tf getCanvas\r\t\ttransformBy: t\r\t\tclippingTo: f boundingBox\r\t\tduring: [:c | c translateBy: self globalBounds topLeft negated during: [:ct | self fullDrawOn: ct]]\r\t\tsmoothing: 2.\r\t^ImageMorph new\r\t\tform: f',			#stamp : 'AliakseiSyrel 2/9/2015 14:42',			#package : #Glamour-Morphic-Brick		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMBrick,				#isMetaSide : false			},			#name : #'taskThumbnailOfSize:',			#protocol : #morph-common,			#sourceCode : 'taskThumbnailOfSize: thumbExtent\r\t"Answer a new task thumbnail for the receiver."\r\r\t|f t r|\r\tr := self globalBounds scaledAndCenteredIn: (0@0 extent: thumbExtent).\r\tf := Form extent: r extent depth: Display depth.\r\tt := MatrixTransform2x3 withScale: f extent / self extent.\r\tf getCanvas\r\t\ttransformBy: t\r\t\tclippingTo: f boundingBox\r\t\tduring: [:c | c translateBy: self globalBounds topLeft negated during: [:ct | self fullDrawOn: ct]]\r\t\tsmoothing: 2.\r\t^ImageMorph new\r\t\tcellForm: f',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Brick		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2017-06-17T15:49:36.575668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellGrid: grid;\r\t\tform: form.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:48',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellGrid: grid;\r\t\tcellForm: form.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2017-06-17T15:49:36.581668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #'asAthensPaintOn:',			#protocol : #converting,			#sourceCode : 'asAthensPaintOn: aCanvas\r\t^ AthensBalloonImagePaint new form: self asForm; yourself',			#stamp : 'NicolaiHess 6/24/2014 22:56',			#package : #Athens-Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #'asAthensPaintOn:',			#protocol : #converting,			#sourceCode : 'asAthensPaintOn: aCanvas\r\t^ AthensBalloonImagePaint new cellForm: self asForm; yourself',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2017-06-17T15:49:36.584668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #'createFormPaint:',			#protocol : #paints,			#sourceCode : 'createFormPaint: aForm  \r\t^ AthensBalloonImagePaint new\r\t\tform: aForm',			#stamp : 'IgorStasenko 3/8/2012 13:48',			#package : #Athens-Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #'createFormPaint:',			#protocol : #paints,			#sourceCode : 'createFormPaint: aForm  \r\t^ AthensBalloonImagePaint new\r\t\tcellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ],		#time : DateAndTime [ '2017-06-17T15:49:36.588668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensBalloonSurface class',				#isMetaSide : true			},			#name : #'extent:',			#protocol : #'as yet unclassified',			#sourceCode : 'extent: aPoint\r\t"Create a new surface with given extent."\r\t\r\t^ self new form: (Form extent: aPoint depth: 32)',			#stamp : 'sig 2/29/2012 21:45',			#package : #Athens-Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AthensBalloonSurface class',				#isMetaSide : true			},			#name : #'extent:',			#protocol : #'as yet unclassified',			#sourceCode : 'extent: aPoint\r\t"Create a new surface with given extent."\r\t\r\t^ self new cellForm: (Form extent: aPoint depth: 32)',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ],		#time : DateAndTime [ '2017-06-17T15:49:36.593668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pharo3Theme,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r"\t^aSystemWindow createBox\r\t\tlabelGraphic: (self windowMenuIconFor: aSystemWindow);\r\t\textent: aSystemWindow boxExtent;\r\t\tactWhen: #buttonDown;\r\t\tactionSelector: #offerWindowMenu;\r\t\tsetBalloonText: \'window menu\' translated"\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle form: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle form: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'window menu\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'tg 9/3/2010 11:34',			#package : #Polymorph-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Pharo3Theme,				#isMetaSide : false			},			#name : #'createMenuBoxFor:',			#protocol : #label-styles,			#sourceCode : 'createMenuBoxFor: aSystemWindow\r\t"Answer a button for the window menu."\r\t\r"\t^aSystemWindow createBox\r\t\tlabelGraphic: (self windowMenuIconFor: aSystemWindow);\r\t\textent: aSystemWindow boxExtent;\r\t\tactWhen: #buttonDown;\r\t\tactionSelector: #offerWindowMenu;\r\t\tsetBalloonText: \'window menu\' translated"\r\t\r\t|form msb|\r\tform := self windowMenuForm.\r\tmsb := MultistateButtonMorph new extent: form extent.\r\tmsb activeEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb extent: form extent.\r\tmsb activeDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveEnabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tmsb passiveDisabledNotOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuForm.\r\tmsb extent: form extent.\r\tmsb\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: form).\r\tform := self windowMenuPassiveForm.\r\tmsb\r\t\textent: form extent;\r\t\tactiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\tpassiveEnabledOverDownFillStyle: (ImageFillStyle cellForm: form);\r\t\taddUpAction: [aSystemWindow offerWindowMenu];\r\t\tsetBalloonText: \'window menu\' translated;\r\t\textent: aSystemWindow boxExtent.\r\t^msb',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Polymorph-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ],		#time : DateAndTime [ '2017-06-17T15:49:36.598668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Form,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'*Morphic-Base',			#sourceCode : 'asMorph\r\t^ImageMorph new form: self',			#stamp : 'StephaneDucasse 5/23/2013 18:34',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Form,				#isMetaSide : false			},			#name : #asMorph,			#protocol : #'*Morphic-Base',			#sourceCode : 'asMorph\r\t^ImageMorph new cellForm: self',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ],		#time : DateAndTime [ '2017-06-17T15:49:36.732668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMPrintPopper,				#isMetaSide : false			},			#name : #initializeInspectButton,			#protocol : #initialization,			#sourceCode : 'initializeInspectButton\r\r\tinspectButton := MultistateButtonMorph new\r\t\textent: GLMUIThemeExtraIcons glamorousInspect extent;\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle form: GLMUIThemeExtraIcons glamorousInspect);\r\t\tsetBalloonText: \'Inspect\' translated.\r\tself\r\t\taddMorph: inspectButton\r\t\tfullFrame: (LayoutFrame fractions: (1 @ 0 corner: 1 @ 0) offsets: (inspectButton width  @ 0 corner: 0 @ (2*inspectButton width) ))',			#stamp : 'AndreiChis 9/30/2014 16:58',			#package : #Glamour-Morphic-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GLMPrintPopper,				#isMetaSide : false			},			#name : #initializeInspectButton,			#protocol : #initialization,			#sourceCode : 'initializeInspectButton\r\r\tinspectButton := MultistateButtonMorph new\r\t\textent: GLMUIThemeExtraIcons glamorousInspect extent;\r\t\tactiveEnabledOverUpFillStyle: (ImageFillStyle cellForm: GLMUIThemeExtraIcons glamorousInspect);\r\t\tsetBalloonText: \'Inspect\' translated.\r\tself\r\t\taddMorph: inspectButton\r\t\tfullFrame: (LayoutFrame fractions: (1 @ 0 corner: 1 @ 0) offsets: (inspectButton width  @ 0 corner: 0 @ (2*inspectButton width) ))',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ],		#time : DateAndTime [ '2017-06-17T15:49:36.746668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MenuItemMorph,				#isMetaSide : false			},			#name : #'contents:withMarkers:inverse:',			#protocol : #accessing,			#sourceCode : 'contents: aString withMarkers: aBool inverse: inverse \r\t"Set the menu item entry. If aBool is true, parse aString for embedded markers."\r\r\t| markerIndex marker |\r\tself contentString: nil.\t"get rid of old"\r\taBool ifFalse: [^super contents: aString].\r\tself removeAllMorphs.\t"get rid of old markers if updating"\r\tself hasIcon ifTrue: [ self icon: nil ].\r\tself flag: #CleanYesNoOnOffAfter.\r\t(aString isKindOf: Association)\r\t\tifTrue: [ super contents: aString value. \r\t\t\t\tmarker := aString key   \r\t\t\t\t\tifTrue: [self onImage]\r\t\t\t\t\tifFalse: [self offImage]]\r\t\tifFalse: [\r\t\t(aString notEmpty and: [aString first = $<]) \r\t\t\tifFalse: [^super contents: aString].\r\t\tmarkerIndex := aString indexOf: $>.\r\t\tmarkerIndex = 0 ifTrue: [^super contents: aString].\r\tmarker := (aString copyFrom: 1 to: markerIndex) asLowercase.\r\t(#(\'<on>\' \'<off>\' \'<yes>\' \'<no>\') includes: marker) \r\t\tifFalse: [^super contents: aString].\r\tself contentString: aString.\t"remember actual string"\r\tmarker := (marker = \'<on>\' or: [marker = \'<yes>\']) ~= inverse \r\t\t\t\tifTrue: [self onImage]\r\t\t\t\tifFalse: [self offImage].\r\tsuper contents:  (aString copyFrom: markerIndex + 1 to: aString size)].\r\t"And set the marker"\r\tmarker := ImageMorph new form: marker.\r\tmarker position: self left @ (self top + 2).\r\tself addMorphFront: marker',			#stamp : 'StephaneDucasse 5/23/2013 18:38',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MenuItemMorph,				#isMetaSide : false			},			#name : #'contents:withMarkers:inverse:',			#protocol : #accessing,			#sourceCode : 'contents: aString withMarkers: aBool inverse: inverse \r\t"Set the menu item entry. If aBool is true, parse aString for embedded markers."\r\r\t| markerIndex marker |\r\tself contentString: nil.\t"get rid of old"\r\taBool ifFalse: [^super contents: aString].\r\tself removeAllMorphs.\t"get rid of old markers if updating"\r\tself hasIcon ifTrue: [ self icon: nil ].\r\tself flag: #CleanYesNoOnOffAfter.\r\t(aString isKindOf: Association)\r\t\tifTrue: [ super contents: aString value. \r\t\t\t\tmarker := aString key   \r\t\t\t\t\tifTrue: [self onImage]\r\t\t\t\t\tifFalse: [self offImage]]\r\t\tifFalse: [\r\t\t(aString notEmpty and: [aString first = $<]) \r\t\t\tifFalse: [^super contents: aString].\r\t\tmarkerIndex := aString indexOf: $>.\r\t\tmarkerIndex = 0 ifTrue: [^super contents: aString].\r\tmarker := (aString copyFrom: 1 to: markerIndex) asLowercase.\r\t(#(\'<on>\' \'<off>\' \'<yes>\' \'<no>\') includes: marker) \r\t\tifFalse: [^super contents: aString].\r\tself contentString: aString.\t"remember actual string"\r\tmarker := (marker = \'<on>\' or: [marker = \'<yes>\']) ~= inverse \r\t\t\t\tifTrue: [self onImage]\r\t\t\t\tifFalse: [self offImage].\r\tsuper contents:  (aString copyFrom: markerIndex + 1 to: aString size)].\r\t"And set the marker"\r\tmarker := ImageMorph new cellForm: marker.\r\tmarker position: self left @ (self top + 2).\r\tself addMorphFront: marker',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ],		#time : DateAndTime [ '2017-06-17T15:49:36.752668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'InfiniteForm class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aForm \r\t"Answer an instance of me whose pattern form is the argument, aForm."\r\r\t^self new form: aForm',			#stamp : '',			#package : #'Graphics-Display Objects'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'InfiniteForm class',				#isMetaSide : true			},			#name : #'with:',			#protocol : #'instance creation',			#sourceCode : 'with: aForm \r\t"Answer an instance of me whose pattern form is the argument, aForm."\r\r\t^self new cellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #'Graphics-Display Objects'		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ],		#time : DateAndTime [ '2017-06-17T15:49:36.757668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphicTreeColumnAdapter,				#isMetaSide : false			},			#name : #headerIconChanged,			#protocol : #private,			#sourceCode : 'headerIconChanged\r\t\r\tself widgetDo: [ :w | \r\t\tself headerIcon\r\t\t\tifNil: [ w header removeIcon ]\r\t\t\tifNotNil: [ w header icon: (ImageMorph new form: self headerIcon) ] ]',			#stamp : 'BenjaminVanRyseghem 11/8/2013 20:18',			#package : #Spec-MorphicAdapters		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphicTreeColumnAdapter,				#isMetaSide : false			},			#name : #headerIconChanged,			#protocol : #private,			#sourceCode : 'headerIconChanged\r\t\r\tself widgetDo: [ :w | \r\t\tself headerIcon\r\t\t\tifNil: [ w header removeIcon ]\r\t\t\tifNotNil: [ w header icon: (ImageMorph new cellForm: self headerIcon) ] ]',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Spec-MorphicAdapters		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ],		#time : DateAndTime [ '2017-06-17T15:49:36.763668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GLMMorphic class',				#isMetaSide : true			},			#name : #'morphElement:',			#protocol : #'utils - morph creation',			#sourceCode : 'morphElement: anObject\r\r\tanObject isString\r\tifTrue:[ ^StringMorph \r\t\t\t\t\tcontents: anObject \r\t\t\t\t\tfont: (LogicalFont \r\t\t\t\t\t\tfamilyName: UITheme current buttonFont familyName\r\t\t\t\t\t\tpointSize: UITheme current buttonFont pointSize - 2) ].\r\t\r\tanObject isCollection \r\tifTrue: [ |row|\r\t\t\t\trow:= OrderedCollection new.\r\t\t\t\tanObject do: [ :e| row add: (self morphElement: e) ].\r\t\t\t\t^self alignmentMorph: row ].\r\t\t\t\t\r\tanObject isForm\r\tifTrue:[ ^ImageMorph new form: anObject ].\r\t\r\t^self containerMorph',			#stamp : 'TudorGirba 11/1/2013 23:31',			#package : #Glamour-Morphic-Widgets		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GLMMorphic class',				#isMetaSide : true			},			#name : #'morphElement:',			#protocol : #'utils - morph creation',			#sourceCode : 'morphElement: anObject\r\r\tanObject isString\r\tifTrue:[ ^StringMorph \r\t\t\t\t\tcontents: anObject \r\t\t\t\t\tfont: (LogicalFont \r\t\t\t\t\t\tfamilyName: UITheme current buttonFont familyName\r\t\t\t\t\t\tpointSize: UITheme current buttonFont pointSize - 2) ].\r\t\r\tanObject isCollection \r\tifTrue: [ |row|\r\t\t\t\trow:= OrderedCollection new.\r\t\t\t\tanObject do: [ :e| row add: (self morphElement: e) ].\r\t\t\t\t^self alignmentMorph: row ].\r\t\t\t\t\r\tanObject isForm\r\tifTrue:[ ^ImageMorph new cellForm: anObject ].\r\t\r\t^self containerMorph',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Glamour-Morphic-Widgets		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ],		#time : DateAndTime [ '2017-06-17T15:49:36.767668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #'newForm:forMorph:',			#protocol : #'*Morphic-Base-Balloon',			#sourceCode : 'newForm: aForm forMorph: aMorph\r\tself form: aForm.\r\tself direction: (aForm width @ 0).\r\tself normal: (0 @ aForm height).\r\taMorph changed.',			#stamp : 'ar 6/25/1999 11:57',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #'newForm:forMorph:',			#protocol : #'*Morphic-Base-Balloon',			#sourceCode : 'newForm: aForm forMorph: aMorph\r\tself cellForm: aForm.\r\tself direction: (aForm width @ 0).\r\tself normal: (0 @ aForm height).\r\taMorph changed.',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ],		#time : DateAndTime [ '2017-06-17T15:49:36.774668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #'grabNewGraphicIn:event:',			#protocol : #'*Morphic-Base-Balloon',			#sourceCode : 'grabNewGraphicIn: aMorph event: evt \r\t"Used by any morph that can be represented by a graphic"\r\t| fill |\r\tfill := Form fromUser.\r\tfill boundingBox area = 0\r\t\tifTrue: [^ self].\r\tself form: fill.\r\tself direction: fill width @ 0.\r\tself normal: 0 @ fill height.\r\taMorph changed',			#stamp : 'wiz 8/30/2003 16:54',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #'grabNewGraphicIn:event:',			#protocol : #'*Morphic-Base-Balloon',			#sourceCode : 'grabNewGraphicIn: aMorph event: evt \r\t"Used by any morph that can be represented by a graphic"\r\t| fill |\r\tfill := Form fromUser.\r\tfill boundingBox area = 0\r\t\tifTrue: [^ self].\r\tself cellForm: fill.\r\tself direction: fill width @ 0.\r\tself normal: 0 @ fill height.\r\taMorph changed',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ],		#time : DateAndTime [ '2017-06-17T15:49:36.779668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'form:',			#protocol : #'instance creation',			#sourceCode : 'form: aForm\r\t^self new form: aForm',			#stamp : 'ar 11/13/1998 20:32',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'form:',			#protocol : #'instance creation',			#sourceCode : 'form: aForm\r\t^self new cellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ],		#time : DateAndTime [ '2017-06-17T15:49:36.784668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #fromUser,			#protocol : #'instance creation',			#sourceCode : 'fromUser\r\t| fill |\r\tfill := self form: Form fromUser.\r\tfill origin: 0@0.\r\tfill direction: fill cellForm width @ 0.\r\tfill normal: 0 @ fill cellForm height.\r\tfill tileFlag: true. "So that we can fill arbitrary objects"\r\t^fill',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #fromUser,			#protocol : #'instance creation',			#sourceCode : 'fromUser\r\t| fill |\r\tfill := self cellForm: Form fromUser.\r\tfill origin: 0@0.\r\tfill direction: fill cellForm width @ 0.\r\tfill normal: 0 @ fill cellForm height.\r\tfill tileFlag: true. "So that we can fill arbitrary objects"\r\t^fill',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ],		#time : DateAndTime [ '2017-06-17T15:49:36.788668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'cellForm:',			#protocol : #'instance creation',			#sourceCode : 'cellForm: aForm\r\t^self new form: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'cellForm:',			#protocol : #'instance creation',			#sourceCode : 'cellForm: aForm\r\t^self new cellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ],		#time : DateAndTime [ '2017-06-17T15:49:36.793668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'fromForm:',			#protocol : #'instance creation',			#sourceCode : 'fromForm: aForm\r\t| fs |\r\tfs := self form: aForm.\r\tfs origin: 0@0.\r\tfs direction: aForm width @ 0.\r\tfs normal: 0 @ aForm height.\r\tfs tileFlag: true.\r\t^fs',			#stamp : 'KLC 1/27/2004 13:33',			#package : #Balloon		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'fromForm:',			#protocol : #'instance creation',			#sourceCode : 'fromForm: aForm\r\t| fs |\r\tfs := self cellForm: aForm.\r\tfs origin: 0@0.\r\tfs direction: aForm width @ 0.\r\tfs normal: 0 @ aForm height.\r\tfs tileFlag: true.\r\t^fs',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ],		#time : DateAndTime [ '2017-06-17T15:49:36.798668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMWindowHandle,				#isMetaSide : false			},			#name : #'newFormRenderer:',			#protocol : #instance-creation,			#sourceCode : 'newFormRenderer: form \r\t^ renderer := OSVMFormRenderer new \r\t\tform: form;\r\t\twindow: self;\r\t\tyourself',			#stamp : 'RonieSalgado 1/10/2014 17:21',			#package : #OSWindow-VM		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMWindowHandle,				#isMetaSide : false			},			#name : #'newFormRenderer:',			#protocol : #instance-creation,			#sourceCode : 'newFormRenderer: form \r\t^ renderer := OSVMFormRenderer new \r\t\tcellForm: form;\r\t\twindow: self;\r\t\tyourself',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-VM		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ],		#time : DateAndTime [ '2017-06-17T15:49:36.803668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HaloMorph,				#isMetaSide : false			},			#name : #'addGraphicalHandleFrom:at:',			#protocol : #private,			#sourceCode : 'addGraphicalHandleFrom: formKey at: aPoint\r\t"Add the supplied form as a graphical handle centered at the given point.  Return the handle."\r\t| handle aForm |\r\taForm := Smalltalk ui icons\r\t\ticonNamed: formKey \r\t\tifNone: [ self iconNamed: #solidMenuIcon ].\r\thandle := ImageMorph new form: aForm; bounds: (Rectangle center: aPoint extent: aForm extent).\r\thandle wantsYellowButtonMenu: false.\r\tself addMorph: handle.\r\thandle on: #mouseUp send: #endInteraction to: self.\r\t^ handle\r',			#stamp : 'StephaneDucasse 10/12/2016 18:28',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HaloMorph,				#isMetaSide : false			},			#name : #'addGraphicalHandleFrom:at:',			#protocol : #private,			#sourceCode : 'addGraphicalHandleFrom: formKey at: aPoint\r\t"Add the supplied form as a graphical handle centered at the given point.  Return the handle."\r\t| handle aForm |\r\taForm := Smalltalk ui icons\r\t\ticonNamed: formKey \r\t\tifNone: [ self iconNamed: #solidMenuIcon ].\r\thandle := ImageMorph new cellForm: aForm; bounds: (Rectangle center: aPoint extent: aForm extent).\r\thandle wantsYellowButtonMenu: false.\r\tself addMorph: handle.\r\thandle on: #mouseUp send: #endInteraction to: self.\r\t^ handle\r',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ],		#time : DateAndTime [ '2017-06-17T15:49:36.811668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HaloMorph,				#isMetaSide : false			},			#name : #'createHandleAt:color:iconName:',			#protocol : #private,			#sourceCode : 'createHandleAt: aPoint color: aColor iconName: iconName \r\t| bou handle |\r\tbou := Rectangle center: aPoint extent: self handleSize asPoint.\r\tself gradientHalo\r\t\tifTrue: [\r\t\t\thandle := Morph newBounds: bou color: aColor.\r\t\t\thandle borderWidth: 1.\r\t\t\thandle useRoundedCorners.\r\t\t\tself setColor: aColor toHandle: handle]\r\t\tifFalse: [handle := EllipseMorph newBounds: bou color: aColor].\r\thandle borderColor: aColor muchDarker.\r\thandle wantsYellowButtonMenu: false.\r\ticonName isNil\r\t\tifFalse: [| form | \r\t\t\tform := self iconNamed: iconName.\r\t\t\tform isNil\r\t\t\t\tifFalse: [| image | \r\t\t\t\t\timage := ImageMorph new.\r\t\t\t\t\timage form: form.\r\t\t\t\t\timage color: aColor contrastingForegroundColor.\r\t\t\t\t\timage lock.\r\t\t\t\t\thandle addMorphCentered: image]].\r\t^ handle',			#stamp : 'StephaneDucasse 10/12/2016 18:28',			#package : #Morphic-Base		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HaloMorph,				#isMetaSide : false			},			#name : #'createHandleAt:color:iconName:',			#protocol : #private,			#sourceCode : 'createHandleAt: aPoint color: aColor iconName: iconName \r\t| bou handle |\r\tbou := Rectangle center: aPoint extent: self handleSize asPoint.\r\tself gradientHalo\r\t\tifTrue: [\r\t\t\thandle := Morph newBounds: bou color: aColor.\r\t\t\thandle borderWidth: 1.\r\t\t\thandle useRoundedCorners.\r\t\t\tself setColor: aColor toHandle: handle]\r\t\tifFalse: [handle := EllipseMorph newBounds: bou color: aColor].\r\thandle borderColor: aColor muchDarker.\r\thandle wantsYellowButtonMenu: false.\r\ticonName isNil\r\t\tifFalse: [| form | \r\t\t\tform := self iconNamed: iconName.\r\t\t\tform isNil\r\t\t\t\tifFalse: [| image | \r\t\t\t\t\timage := ImageMorph new.\r\t\t\t\t\timage cellForm: form.\r\t\t\t\t\timage color: aColor contrastingForegroundColor.\r\t\t\t\t\timage lock.\r\t\t\t\t\thandle addMorphCentered: image]].\r\t^ handle',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ],		#time : DateAndTime [ '2017-06-17T15:49:36.926668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SVColorSelectorMorph,				#isMetaSide : false			},			#name : #newLocationMorph,			#protocol : #'instance creation',			#sourceCode : 'newLocationMorph\r\t"Answer a new morph indicating the location of the selected color."\r\r\t^ImageMorph new\r\t\tform: Cursor crossHair withMask asCursorForm',			#stamp : 'StephaneDucasse 5/23/2013 18:40',			#package : #Morphic-Widgets-ColorPicker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SVColorSelectorMorph,				#isMetaSide : false			},			#name : #newLocationMorph,			#protocol : #'instance creation',			#sourceCode : 'newLocationMorph\r\t"Answer a new morph indicating the location of the selected color."\r\r\t^ImageMorph new\r\t\tcellForm: Cursor crossHair withMask asCursorForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-ColorPicker		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ],		#time : DateAndTime [ '2017-06-17T15:49:37.043668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #'taskThumbnailOfSize:',			#protocol : #'*Morphic-Widgets-Taskbar',			#sourceCode : 'taskThumbnailOfSize: thumbExtent\r\t"Answer a new task thumbnail for the receiver."\r\r\t|f t r|\r\tr := self bounds scaledAndCenteredIn: (0@0 extent: thumbExtent).\r\tf := Form extent: r extent depth: Display depth.\r\tt := MatrixTransform2x3 withScale: f extent / self extent.\r\tf getCanvas\r\t\ttransformBy: t\r\t\tclippingTo: f boundingBox\r\t\tduring: [:c | c translateBy: self topLeft negated during: [:ct | self fullDrawOn: ct]]\r\t\tsmoothing: 2.\r\t^ImageMorph new\r\t\tform: f',			#stamp : 'StephaneDucasse 5/23/2013 18:34',			#package : #Morphic-Widgets-Taskbar		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Morph,				#isMetaSide : false			},			#name : #'taskThumbnailOfSize:',			#protocol : #'*Morphic-Widgets-Taskbar',			#sourceCode : 'taskThumbnailOfSize: thumbExtent\r\t"Answer a new task thumbnail for the receiver."\r\r\t|f t r|\r\tr := self bounds scaledAndCenteredIn: (0@0 extent: thumbExtent).\r\tf := Form extent: r extent depth: Display depth.\r\tt := MatrixTransform2x3 withScale: f extent / self extent.\r\tf getCanvas\r\t\ttransformBy: t\r\t\tclippingTo: f boundingBox\r\t\tduring: [:c | c translateBy: self topLeft negated during: [:ct | self fullDrawOn: ct]]\r\t\tsmoothing: 2.\r\t^ImageMorph new\r\t\tcellForm: f',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Morphic-Widgets-Taskbar		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ],		#time : DateAndTime [ '2017-06-17T15:49:37.046668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonSurface,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: aForm\r\r\tform := aForm.\r\tmask := Form extent: form extent depth: 1. \r\r\tengine := AthensBalloonEngine new.\r\tengine bitBlt: (GrafPort toForm: form) .\r\tengine clipRect: (0@0 extent: form extent).\r\tengine edgeTransform: pathTransform.\r\tengine destOffset: 0@0.\r\tengine reset.',			#stamp : 'IgorStasenko 4/21/2011 16:17',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ],		#time : DateAndTime [ '2017-06-17T15:49:37.054668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageFillStyle,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: aForm\r\t"Set the value of form"\r\r\tform := aForm.\r\tself direction: aForm extent',			#stamp : 'gvc 10/21/2008 15:51',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ],		#time : DateAndTime [ '2017-06-17T15:49:37.059668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: anObject\r\tform := anObject',			#stamp : 'Patrick 6/17/2017 15:23',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ],		#time : DateAndTime [ '2017-06-17T15:49:37.091668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BitmapFillStyle,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: aForm\r\tform := aForm',			#stamp : 'ar 11/11/1998 22:40',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ],		#time : DateAndTime [ '2017-06-17T15:49:37.096668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSWindowFormRenderer,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: anObject\r\t\r\tform := anObject',			#stamp : 'RonieSalgado 1/6/2014 15:03',			#package : #OSWindow-Core		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ],		#time : DateAndTime [ '2017-06-17T15:49:37.101668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ImageMorph,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: aForm\r\timage := aForm. \r\tsuper extent: (2 * self borderWidth) asPoint + image extent.\r\tself changed',			#stamp : 'StephaneDucasse 5/23/2013 18:33',			#package : #Morphic-Base		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ],		#time : DateAndTime [ '2017-06-17T15:49:37.105668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #InfiniteForm,				#isMetaSide : false			},			#name : #'form:',			#protocol : #private,			#sourceCode : 'form: aForm\r\r\tpatternForm := aForm',			#stamp : '',			#package : #'Graphics-Display Objects'		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ],		#time : DateAndTime [ '2017-06-17T15:49:37.109668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BitmapFillStyle class',				#isMetaSide : true			},			#name : #'form:',			#protocol : #'instance creation',			#sourceCode : 'form: aForm\r\t^self new cellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ],		#time : DateAndTime [ '2017-06-17T15:49:37.113668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #OSVMFormRenderer,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: aForm\r\tsuper cellForm: aForm.\r\tself beDisplay',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #OSWindow-VM		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ],		#time : DateAndTime [ '2017-06-17T15:49:37.116668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AthensBalloonImagePaint,				#isMetaSide : false			},			#name : #'form:',			#protocol : #accessing,			#sourceCode : 'form: anObject\r\r\tform := anObject.\r\torigin := 0@0.\r\tdirection := form extent x @0.',			#stamp : 'IgorStasenko 4/21/2011 15:49',			#package : #Athens-Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ],		#time : DateAndTime [ '2017-06-17T15:49:37.122668+02:00' ],		#trigger : OmReference [ '126' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ImageFillStyle class',				#isMetaSide : true			},			#name : #'form:',			#protocol : #'as yet unclassified',			#sourceCode : 'form: aForm\r\t"Answer a new instance of the receiver with the given form."\r\r\t^self new cellForm: aForm',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Balloon		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:49:44.357668+02:00' ],		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: anObject\r\tform := anObject',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Model		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CellRenderer,				#isMetaSide : false			},			#name : #'cellForm:',			#protocol : #accessing,			#sourceCode : 'cellForm: anObject\r\tcellForm := anObject',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Model		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:57:42.393668+02:00' ],		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellGrid: grid;\r\t\tcellForm: form.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:49',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc.\r\t"\tcellGrid: grid;\r\t\tcellForm: form.\r\trenderer render.\r\tform displayAt: 10@10."',			#stamp : 'Patrick 6/17/2017 15:57',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:57:57.407668+02:00' ],		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc.\r\t"\tcellGrid: grid;\r\t\tcellForm: form.\r\trenderer render.\r\tform displayAt: 10@10."',			#stamp : 'Patrick 6/17/2017 15:57',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form.\r\t"\tcellGrid: grid;\r\t\t\r\trenderer render.\r\tform displayAt: 10@10."',			#stamp : 'Patrick 6/17/2017 15:57',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:57:59.499668+02:00' ],		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form.\r\t"\tcellGrid: grid;\r\t\t\r\trenderer render.\r\tform displayAt: 10@10."',			#stamp : 'Patrick 6/17/2017 15:57',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form.\r\t"\tcellGrid: grid;\r\trenderer render.\r\tform displayAt: 10@10."',			#stamp : 'Patrick 6/17/2017 15:57',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:59:04.273668+02:00' ],		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trendererClass := CellRenderer modelClass.\r\trenderer := rendererClass new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form.\r\t"\tcellGrid: grid;\r\trenderer render.\r\tform displayAt: 10@10."',			#stamp : 'Patrick 6/17/2017 15:57',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trenderer := CellRenderer  new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:59',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:59:10.764668+02:00' ],		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell rendererClass renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trenderer := CellRenderer  new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:59',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trenderer := CellRenderer  new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:59',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T15:59:22.385668+02:00' ],		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trenderer := CellRenderer  new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:59',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trenderer := CellRenderer new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:59',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T16:00:02.946668+02:00' ],		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\tcell := grid at: cellLoc.\r\trenderer := CellRenderer new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 15:59',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\trenderer := CellRenderer new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 16:00',			#package : #Snake_Game_Test		}	}}OmEntry {	#tags : {		#author : 'Patrick',		#time : DateAndTime [ '2017-06-17T16:00:06.692668+02:00' ],		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc cell renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\trenderer := CellRenderer new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 16:00',			#package : #Snake_Game_Test		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RenderTest,				#isMetaSide : false			},			#name : #testDraw,			#protocol : #tests,			#sourceCode : 'testDraw\r\t| grid form cellLoc renderer |\r\tgrid := Grid newOfSize: 30@30.\r\tform := Form extent: 25@25 depth: Display depth.\r\tcellLoc := 1@1.\r\trenderer := CellRenderer new.\r\trenderer\r\t\tposition: cellLoc;\r\t\tcellForm: form;\r\t\tcellGrid: grid.\r\trenderer render.\r\tform displayAt: 10@10.',			#stamp : 'Patrick 6/17/2017 16:00',			#package : #Snake_Game_Test		}	}}