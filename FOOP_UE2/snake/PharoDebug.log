THERE_BE_DRAGONS_HERE

19 June 2017 5:04:20.750576 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(0@111) corner: (16@127)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(0@111) mouseOver 21290454 nil]
		targetOffset: 	(237@88)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21290454 6 120 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@111) corner: (16@127)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(0@111) mouseOver 21290454 nil]
		targetOffset: 	(237@88)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21290454 6 120 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	431494
		lastStepMessage: 	nil
		lastCycleTime: 	431515
		alarms: 	a Heap()
		lastAlarmTime: 	431494
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 5:19:15.992576 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1326882
		lastStepMessage: 	nil
		lastCycleTime: 	1326904
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1326882
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 6:18:19.888092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1326882
		lastStepMessage: 	nil
		lastCycleTime: 	1326904
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1326882
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 6:35:07.217092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(629@307) corner: (645@323)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@307) mouseOver 2912991 nil]
		targetOffset: 	(318@174)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2912991 620 307 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(629@307) corner: (645@323)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@307) mouseOver 2912991 nil]
		targetOffset: 	(318@174)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2912991 620 307 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1007187
		lastStepMessage: 	nil
		lastCycleTime: 	1007208
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1007187
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 6:50:05.402092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(545@503) corner: (561@519)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(545@503) mouseOver CTRL 3811151 nil]
		targetOffset: 	(279@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3811104 545 503 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(545@503) corner: (561@519)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(545@503) mouseOver CTRL 3811151 nil]
		targetOffset: 	(279@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3811104 545 503 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1905324
		lastStepMessage: 	nil
		lastCycleTime: 	1905344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1905324
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TicTacToeModel did not understand #checkWinConditionInSet:
19 June 2017 6:51:08.569092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
	Receiver: ('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
	Arguments and temporary variables: 
		aMessage: 	checkWinConditionInSet: a Set('O' 'X')
		exception: 	MessageNotUnderstood: TicTacToeModel>>checkWinConditionInSet:
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	#('X' 'X' 'O' nil 'O' nil nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinConditionInRow:
	Receiver: ('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
	Arguments and temporary variables: 
		row: 	1
		set: 	a Set('O' 'X')
	Receiver's instance variables: 
		contents: 	#('X' 'X' 'O' nil 'O' nil nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinCondition
	Receiver: ('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
	Arguments and temporary variables: 
		idx: 	1
	Receiver's instance variables: 
		contents: 	#('X' 'X' 'O' nil 'O' nil nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
	Receiver: a TicTacToeCell(151953408)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@384.0) corner: (439.0@407.0)
		owner: 	a Morph(525559808)
		submorphs: 	an Array(a StringMorph(547852288)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (419952640) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(547852288)'X'
		parent: 	('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
		row: 	1
		column: 	2


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(482@430) mouseDown red 3875470 nil]
		sourceMorph: 	a TicTacToeCell(151953408)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(482@430) mouseDown red 3875470 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(151953408)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	4
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a MorphEventSubscription nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(482@430) mouseDown red 3875470 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(151953408)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(482@430) mouseDown red 3875470 nil]
		sourceMorph: 	a TicTacToeCell(151953408)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


TicTacToeCell(Morph)>>click:
	Receiver: a TicTacToeCell(151953408)
	Arguments and temporary variables: 
		evt: 	[(482@430) mouseDown red 3875470 nil]
	Receiver's instance variables: 
		bounds: 	(424.0@384.0) corner: (439.0@407.0)
		owner: 	a Morph(525559808)
		submorphs: 	an Array(a StringMorph(547852288)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (419952640) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(547852288)'X'
		parent: 	('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
		row: 	1
		column: 	2


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(151953408)
		clickState: 	#firstClickUp
		firstClickDown: 	[(482@430) mouseDown red 3875470 nil]
		firstClickUp: 	[(482@430) mouseUp 3875564 nil]
		firstClickTime: 	3875470
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1968880


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(482@430) mouseUp 3875564 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(482@430) mouseUp 3875564 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(151953408)
		clickState: 	#firstClickUp
		firstClickDown: 	[(482@430) mouseDown red 3875470 nil]
		firstClickUp: 	[(482@430) mouseUp 3875564 nil]
		firstClickTime: 	3875470
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1968880


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(482@430) mouseUp 3875564 nil]
		evt: 	[(482@430) mouseUp 3875564 nil]
	Receiver's instance variables: 
		bounds: 	(482@430) corner: (498@446)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(482@430) corner: (498@446)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(151953408)
		keyboardFocus: 	a SystemWindow(605392384)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(482@430) mouseUp 3875564 nil]
		targetOffset: 	(58.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3875564 482 430 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(482@430) mouseUp 3875564 nil]
		evtBuf: 	#(1 3875564 482 430 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(482@430) corner: (498@446)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(482@430) corner: (498@446)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(151953408)
		keyboardFocus: 	a SystemWindow(605392384)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(482@430) mouseUp 3875564 nil]
		targetOffset: 	(58.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3875564 482 430 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(482@430) corner: (498@446)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(482@430) corner: (498@446)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(151953408)
		keyboardFocus: 	a SystemWindow(605392384)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(482@430) mouseUp 3875564 nil]
		targetOffset: 	(58.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3875564 482 430 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
TicTacToeModel>>checkWinConditionInRow:
TicTacToeModel>>checkWinCondition
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
TicTacToeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------THERE_BE_DRAGONS_HERE
Instance of TicTacToeModel did not understand #checkWinConditionInSet:
19 June 2017 6:51:54.235092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
	Receiver: ('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
	Arguments and temporary variables: 
		aMessage: 	checkWinConditionInSet: a Set('O' nil 'X')
		exception: 	MessageNotUnderstood: TicTacToeModel>>checkWinConditionInSet:
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	#('X' nil 'O' nil 'X' 'O' nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinConditionInRow:
	Receiver: ('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
	Arguments and temporary variables: 
		row: 	1
		set: 	a Set('O' nil 'X')
	Receiver's instance variables: 
		contents: 	#('X' nil 'O' nil 'X' 'O' nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinCondition
	Receiver: ('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
	Arguments and temporary variables: 
		idx: 	1
	Receiver's instance variables: 
		contents: 	#('X' nil 'O' nil 'X' 'O' nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
	Receiver: a TicTacToeCell(466208256)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(745.0@413.0) corner: (760.0@436.0)
		owner: 	a Morph(181661696)
		submorphs: 	an Array(a StringMorph(103371264)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (49251840) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(103371264)'X'
		parent: 	('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
		row: 	1
		column: 	1


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(770@473) mouseDown red 3921163 nil]
		sourceMorph: 	a TicTacToeCell(466208256)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(770@473) mouseDown red 3921163 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(466208256)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(770@473) mouseDown red 3921163 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(466208256)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(770@473) mouseDown red 3921163 nil]
		sourceMorph: 	a TicTacToeCell(466208256)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


TicTacToeCell(Morph)>>click:
	Receiver: a TicTacToeCell(466208256)
	Arguments and temporary variables: 
		evt: 	[(770@473) mouseDown red 3921163 nil]
	Receiver's instance variables: 
		bounds: 	(745.0@413.0) corner: (760.0@436.0)
		owner: 	a Morph(181661696)
		submorphs: 	an Array(a StringMorph(103371264)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (49251840) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(103371264)'X'
		parent: 	('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
		row: 	1
		column: 	1


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(466208256)
		clickState: 	#firstClickUp
		firstClickDown: 	[(770@473) mouseDown red 3921163 nil]
		firstClickUp: 	[(770@473) mouseUp 3921256 nil]
		firstClickTime: 	3921163
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2014582


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(770@473) mouseUp 3921256 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(770@473) mouseUp 3921256 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(466208256)
		clickState: 	#firstClickUp
		firstClickDown: 	[(770@473) mouseDown red 3921163 nil]
		firstClickUp: 	[(770@473) mouseUp 3921256 nil]
		firstClickTime: 	3921163
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2014582


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(770@473) mouseUp 3921256 nil]
		evt: 	[(770@473) mouseUp 3921256 nil]
	Receiver's instance variables: 
		bounds: 	(770@473) corner: (786@489)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(770@473) corner: (786@489)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(466208256)
		keyboardFocus: 	a SystemWindow(563448832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(770@473) mouseUp 3921256 nil]
		targetOffset: 	(25.0@60.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3921256 770 473 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(770@473) mouseUp 3921256 nil]
		evtBuf: 	#(1 3921256 770 473 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(770@473) corner: (786@489)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(770@473) corner: (786@489)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(466208256)
		keyboardFocus: 	a SystemWindow(563448832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(770@473) mouseUp 3921256 nil]
		targetOffset: 	(25.0@60.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3921256 770 473 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(770@473) corner: (786@489)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(770@473) corner: (786@489)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(466208256)
		keyboardFocus: 	a SystemWindow(563448832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(770@473) mouseUp 3921256 nil]
		targetOffset: 	(25.0@60.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3921256 770 473 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
TicTacToeModel>>checkWinConditionInRow:
TicTacToeModel>>checkWinCondition
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
TicTacToeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#adaptToNumber:andSend: was sent to nil
21 June 2017 5:10:20.139448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 3 andSend: #'<='
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	3
		selector: 	#'<='
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andCompare:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	3
		selector: 	#'<='
	Receiver's instance variables: 
nil

SmallInteger(Integer)>><=
	Receiver: 3
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
3

SmallInteger>><=
	Receiver: 3
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
3

SmallInteger(Magnitude)>>between:and:
	Receiver: 3
	Arguments and temporary variables: 
		min: 	1
		max: 	nil
	Receiver's instance variables: 
3

SnakeModel(Matrix)>>indexForRow:andColumn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		row: 	3
		column: 	3
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel(Matrix)>>at:at:put:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		rowNumber: 	3
		columnNumber: 	3
		value: 	'X'
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel>>updateAtRow:col:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		row: 	3
		col: 	3
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		filledCells: 	0
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
	Receiver: a SnakeCell(483847424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(709.0@312.0) corner: (789.0@392.0)
		owner: 	a Morph(592519168)
		submorphs: 	an Array(a StringMorph(838343936)'')
		fullBounds: 	(709.0@312.0) corner: (789.0@392.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (409544704) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(838343936)''
		parent: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(773@358) mouseDown red 586438 nil]
		sourceMorph: 	a SnakeCell(483847424)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(773@358) mouseDown red 586438 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(483847424)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(773@358) mouseDown red 586438 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(483847424)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(773@358) mouseDown red 586438 nil]
		sourceMorph: 	a SnakeCell(483847424)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SnakeCell(Morph)>>click:
	Receiver: a SnakeCell(483847424)
	Arguments and temporary variables: 
		evt: 	[(773@358) mouseDown red 586438 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@312.0) corner: (789.0@392.0)
		owner: 	a Morph(592519168)
		submorphs: 	an Array(a StringMorph(838343936)'')
		fullBounds: 	(709.0@312.0) corner: (789.0@392.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (409544704) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(838343936)''
		parent: 	<<error during printing>>

MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SnakeCell(483847424)
		clickState: 	#firstClickUp
		firstClickDown: 	[(773@358) mouseDown red 586438 nil]
		firstClickUp: 	[(772@358) mouseUp 586516 nil]
		firstClickTime: 	586438
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	330844


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(772@358) mouseUp 586516 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(772@358) mouseUp 586516 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SnakeCell(483847424)
		clickState: 	#firstClickUp
		firstClickDown: 	[(773@358) mouseDown red 586438 nil]
		firstClickUp: 	[(772@358) mouseUp 586516 nil]
		firstClickTime: 	586438
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	330844


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(772@358) mouseUp 586516 nil]
		evt: 	[(772@358) mouseUp 586516 nil]
	Receiver's instance variables: 
		bounds: 	(773@358) corner: (789@374)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(773@358) corner: (789@374)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(483847424)
		keyboardFocus: 	a SystemWindow(1065829632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@358) mouseUp 586516 nil]
		targetOffset: 	(64.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 586516 772 358 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(772@358) mouseUp 586516 nil]
		evtBuf: 	#(1 586516 772 358 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(773@358) corner: (789@374)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(773@358) corner: (789@374)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(483847424)
		keyboardFocus: 	a SystemWindow(1065829632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@358) mouseUp 586516 nil]
		targetOffset: 	(64.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 586516 772 358 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(773@358) corner: (789@374)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(773@358) corner: (789@374)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(483847424)
		keyboardFocus: 	a SystemWindow(1065829632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@358) mouseUp 586516 nil]
		targetOffset: 	(64.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 586516 772 358 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	330907
		lastStepMessage: 	nil
		lastCycleTime: 	330928
		alarms: 	a Heap()
		lastAlarmTime: 	330907
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#close was sent to nil
21 June 2017 5:21:34.938448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #close
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: receiver of "close" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ container delete.
container window close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(870059264)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(749@277) mouseDown red 1261268 nil]
		sourceMorph: 	a SimpleButtonMorph(571102464)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ container delete.
container window close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(749@277) mouseDown red 1261268 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(571102464)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(749@277) mouseDown red 1261268 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(571102464)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(749@277) mouseDown red 1261268 nil]
		sourceMorph: 	a SimpleButtonMorph(571102464)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(571102464)
	Arguments and temporary variables: 
		evt: 	[(749@277) mouseDown red 1261268 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(185060608)
		submorphs: 	an Array(a StringMorph(756960256)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (538967296) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(756960256)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(571102464)
		clickState: 	#firstClickUp
		firstClickDown: 	[(749@277) mouseDown red 1261268 nil]
		firstClickUp: 	[(749@277) mouseUp 1261346 nil]
		firstClickTime: 	1261268
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1005662


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(749@277) mouseUp 1261346 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(749@277) mouseUp 1261346 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(571102464)
		clickState: 	#firstClickUp
		firstClickDown: 	[(749@277) mouseDown red 1261268 nil]
		firstClickUp: 	[(749@277) mouseUp 1261346 nil]
		firstClickTime: 	1261268
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1005662


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(749@277) mouseUp 1261346 nil]
		evt: 	[(749@277) mouseUp 1261346 nil]
	Receiver's instance variables: 
		bounds: 	(749@277) corner: (765@293)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(749@277) corner: (765@293)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(571102464)
		keyboardFocus: 	a SystemWindow(704911360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(749@277) mouseUp 1261346 nil]
		targetOffset: 	(40.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1261346 749 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(749@277) mouseUp 1261346 nil]
		evtBuf: 	#(1 1261346 749 277 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(749@277) corner: (765@293)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(749@277) corner: (765@293)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(571102464)
		keyboardFocus: 	a SystemWindow(704911360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(749@277) mouseUp 1261346 nil]
		targetOffset: 	(40.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1261346 749 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(749@277) corner: (765@293)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(749@277) corner: (765@293)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(571102464)
		keyboardFocus: 	a SystemWindow(704911360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(749@277) mouseUp 1261346 nil]
		targetOffset: 	(40.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1261346 749 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #close
[ container delete.
container window close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #onClickExecution
21 June 2017 5:24:47.904448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
	Receiver: a SnakeCell(73754624)
	Arguments and temporary variables: 
		aMessage: 	onClickExecution
		exception: 	MessageNotUnderstood: SnakeCell>>onClickExecution
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(496976128)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (43361280)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(496976128)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell>>initialize
	Receiver: a SnakeCell(73754624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(496976128)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (43361280)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(496976128)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell class(Behavior)>>new
	Receiver: SnakeCell
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SimpleButtonMorph
		methodDict: 	a MethodDictionary(#initialize->SnakeCell>>#initialize #setModel:ro...etc...
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


Snake>>addRows
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	a Morph(21888256)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(659441664)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake>>initialize
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(659441664)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake class(Behavior)>>new
	Receiver: Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->Snake>>#addControls #addRows->Snak...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Snake
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(70034432))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(294@36)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1198682
		lastStepMessage: 	nil
		lastCycleTime: 	1198702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1198682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1198682
		lastStepMessage: 	nil
		lastCycleTime: 	1198702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1198682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1198682
		lastStepMessage: 	nil
		lastCycleTime: 	1198702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1198682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
SnakeCell>>initialize
SnakeCell class(Behavior)>>new
Snake>>addRows
Snake>>initialize
Snake class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #onClickExecution
21 June 2017 5:27:04.908448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
	Receiver: a SnakeCell(39478528)
	Arguments and temporary variables: 
		aMessage: 	onClickExecution
		exception: 	MessageNotUnderstood: SnakeCell>>onClickExecution
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1020141568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (10963200)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1020141568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell>>initialize
	Receiver: a SnakeCell(39478528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1020141568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (10963200)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1020141568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell class(Behavior)>>new
	Receiver: SnakeCell
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SimpleButtonMorph
		methodDict: 	a MethodDictionary(#initialize->SnakeCell>>#initialize #setModel:ro...etc...
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


Snake>>addRows
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	a Morph(651877376)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(716303616)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake>>initialize
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(716303616)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake class(Behavior)>>new
	Receiver: Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->Snake>>#addControls #addRows->Snak...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Snake
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(357594368))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(294@36)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1335691
		lastStepMessage: 	nil
		lastCycleTime: 	1335712
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1335691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1335691
		lastStepMessage: 	nil
		lastCycleTime: 	1335712
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1335691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1335691
		lastStepMessage: 	nil
		lastCycleTime: 	1335712
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1335691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
SnakeCell>>initialize
SnakeCell class(Behavior)>>new
Snake>>addRows
Snake>>initialize
Snake class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #onClickExecution
21 June 2017 5:28:27.337448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
	Receiver: a SnakeCell(485533952)
	Arguments and temporary variables: 
		aMessage: 	onClickExecution
		exception: 	MessageNotUnderstood: SnakeCell>>onClickExecution
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1008237568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (730156288)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1008237568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell>>initialize
	Receiver: a SnakeCell(485533952)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1008237568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (730156288)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1008237568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell class(Behavior)>>new
	Receiver: SnakeCell
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SimpleButtonMorph
		methodDict: 	a MethodDictionary(#initialize->SnakeCell>>#initialize #setModel:ro...etc...
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


Snake>>addRows
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	a Morph(1018394624)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(714846464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake>>initialize
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(714846464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake class(Behavior)>>new
	Receiver: Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->Snake>>#addControls #addRows->Snak...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Snake
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(278771968))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(294@36)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1418120
		lastStepMessage: 	nil
		lastCycleTime: 	1418142
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1418120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1418120
		lastStepMessage: 	nil
		lastCycleTime: 	1418142
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1418120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1418120
		lastStepMessage: 	nil
		lastCycleTime: 	1418142
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1418120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
SnakeCell>>initialize
SnakeCell class(Behavior)>>new
Snake>>addRows
Snake>>initialize
Snake class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:03.690448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(761@294) mouseDown red 1889998 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(761@294) mouseDown red 1889998 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(761@294) mouseDown red 1889998 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(761@294) mouseDown red 1889998 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(761@294) mouseDown red 1889998 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(761@294) mouseDown red 1889998 nil]
		firstClickUp: 	[(761@294) mouseUp 1890092 nil]
		firstClickTime: 	1889998
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1634413


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(761@294) mouseUp 1890092 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(761@294) mouseUp 1890092 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(761@294) mouseDown red 1889998 nil]
		firstClickUp: 	[(761@294) mouseUp 1890092 nil]
		firstClickTime: 	1889998
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1634413


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(761@294) mouseUp 1890092 nil]
		evt: 	[(761@294) mouseUp 1890092 nil]
	Receiver's instance variables: 
		bounds: 	(761@294) corner: (777@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(761@294) corner: (777@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a SystemWindow(491309312)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(761@294) mouseUp 1890092 nil]
		targetOffset: 	(52.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1890092 761 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(761@294) mouseUp 1890092 nil]
		evtBuf: 	#(1 1890092 761 294 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(761@294) corner: (777@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(761@294) corner: (777@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a SystemWindow(491309312)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(761@294) mouseUp 1890092 nil]
		targetOffset: 	(52.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1890092 761 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(761@294) corner: (777@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(761@294) corner: (777@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a SystemWindow(491309312)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(761@294) mouseUp 1890092 nil]
		targetOffset: 	(52.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1890092 761 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:06.100448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(860@326) mouseDown red 1892416 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(860@326) mouseDown red 1892416 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(860@326) mouseDown red 1892416 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(860@326) mouseDown red 1892416 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(860@326) mouseDown red 1892416 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(860@326) mouseDown red 1892416 nil]
		firstClickUp: 	[(860@326) mouseUp 1892510 nil]
		firstClickTime: 	1892416
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1636832


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(860@326) mouseUp 1892510 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(860@326) mouseUp 1892510 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(860@326) mouseDown red 1892416 nil]
		firstClickUp: 	[(860@326) mouseUp 1892510 nil]
		firstClickTime: 	1892416
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1636832


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(860@326) mouseUp 1892510 nil]
		evt: 	[(860@326) mouseUp 1892510 nil]
	Receiver's instance variables: 
		bounds: 	(860@326) corner: (876@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(860@326) corner: (876@342)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(547034112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(860@326) mouseUp 1892510 nil]
		targetOffset: 	(151.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1892510 860 326 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(860@326) mouseUp 1892510 nil]
		evtBuf: 	#(1 1892510 860 326 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(860@326) corner: (876@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(860@326) corner: (876@342)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(547034112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(860@326) mouseUp 1892510 nil]
		targetOffset: 	(151.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1892510 860 326 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(860@326) corner: (876@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(860@326) corner: (876@342)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(547034112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(860@326) mouseUp 1892510 nil]
		targetOffset: 	(151.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1892510 860 326 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:08.029448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(887@345) mouseDown red 1894351 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(887@345) mouseDown red 1894351 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(887@345) mouseDown red 1894351 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(887@345) mouseDown red 1894351 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(887@345) mouseDown red 1894351 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(887@345) mouseDown red 1894351 nil]
		firstClickUp: 	[(887@345) mouseUp 1894444 nil]
		firstClickTime: 	1894351
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1638758


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(887@345) mouseUp 1894444 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(887@345) mouseUp 1894444 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(887@345) mouseDown red 1894351 nil]
		firstClickUp: 	[(887@345) mouseUp 1894444 nil]
		firstClickTime: 	1894351
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1638758


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(887@345) mouseUp 1894444 nil]
		evt: 	[(887@345) mouseUp 1894444 nil]
	Receiver's instance variables: 
		bounds: 	(887@345) corner: (903@361)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(887@345) corner: (903@361)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(586070016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(887@345) mouseUp 1894444 nil]
		targetOffset: 	(178.0@83.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1894444 887 345 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(887@345) mouseUp 1894444 nil]
		evtBuf: 	#(1 1894444 887 345 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(887@345) corner: (903@361)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(887@345) corner: (903@361)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(586070016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(887@345) mouseUp 1894444 nil]
		targetOffset: 	(178.0@83.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1894444 887 345 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(887@345) corner: (903@361)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(887@345) corner: (903@361)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(586070016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(887@345) mouseUp 1894444 nil]
		targetOffset: 	(178.0@83.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1894444 887 345 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:09.447448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(620@311) mouseDown red 1895786 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(620@311) mouseDown red 1895786 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(620@311) mouseDown red 1895786 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(620@311) mouseDown red 1895786 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(620@311) mouseDown red 1895786 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@311) mouseDown red 1895786 nil]
		firstClickUp: 	[(620@311) mouseUp 1895864 nil]
		firstClickTime: 	1895786
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640199


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(620@311) mouseUp 1895864 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(620@311) mouseUp 1895864 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@311) mouseDown red 1895786 nil]
		firstClickUp: 	[(620@311) mouseUp 1895864 nil]
		firstClickTime: 	1895786
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640199


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(620@311) mouseUp 1895864 nil]
		evt: 	[(620@311) mouseUp 1895864 nil]
	Receiver's instance variables: 
		bounds: 	(620@311) corner: (636@327)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@311) corner: (636@327)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(238197760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@311) mouseUp 1895864 nil]
		targetOffset: 	(-89.0@49.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1895864 620 311 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(620@311) mouseUp 1895864 nil]
		evtBuf: 	#(1 1895864 620 311 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(620@311) corner: (636@327)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@311) corner: (636@327)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(238197760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@311) mouseUp 1895864 nil]
		targetOffset: 	(-89.0@49.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1895864 620 311 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@311) corner: (636@327)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@311) corner: (636@327)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(238197760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@311) mouseUp 1895864 nil]
		targetOffset: 	(-89.0@49.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1895864 620 311 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:09.946448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896238 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896238 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(620@295) mouseDown red 1896238 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(620@295) mouseDown red 1896238 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseDown red 1896238 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896238 nil]
		firstClickUp: 	[(620@295) mouseUp 1896348 nil]
		firstClickTime: 	1896238
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640658


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseUp 1896348 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(620@295) mouseUp 1896348 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896238 nil]
		firstClickUp: 	[(620@295) mouseUp 1896348 nil]
		firstClickTime: 	1896238
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640658


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseUp 1896348 nil]
		evt: 	[(620@295) mouseUp 1896348 nil]
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(499826688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896348 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896348 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(620@295) mouseUp 1896348 nil]
		evtBuf: 	#(1 1896348 620 295 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(499826688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896348 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896348 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(499826688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896348 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896348 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:10.513448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896847 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896847 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(620@295) mouseDown red 1896847 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(620@295) mouseDown red 1896847 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseDown red 1896847 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896847 nil]
		firstClickUp: 	[(620@295) mouseUp 1896925 nil]
		firstClickTime: 	1896847
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1641241


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseUp 1896925 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(620@295) mouseUp 1896925 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896847 nil]
		firstClickUp: 	[(620@295) mouseUp 1896925 nil]
		firstClickTime: 	1896847
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1641241


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseUp 1896925 nil]
		evt: 	[(620@295) mouseUp 1896925 nil]
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(425403392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896925 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896925 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(620@295) mouseUp 1896925 nil]
		evtBuf: 	#(1 1896925 620 295 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(425403392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896925 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896925 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(425403392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896925 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896925 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #label:
21 June 2017 5:35:06.737448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SystemWindow(Object)>>doesNotUnderstand: #label:
	Receiver: a SystemWindow(436197376)
	Arguments and temporary variables: 
		aMessage: 	label: 'Hello'
		exception: 	MessageNotUnderstood: SystemWindow>>label:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (300@200)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(734941440) a WindowEdgeGripMorph(9118...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (306214144)
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		labelString: 	'Untitled Window'
		stripes: 	an Array(a Morph(99782656) a Morph(937187584))
		label: 	a LabelMorph(596134912)'Untitled Window'
		closeBox: 	a MultistateButtonMorph(155581696)
		collapseBox: 	a MultistateButtonMorph(303450112)
		paneMorphs: 	#()
		collapsedFrame: 	nil
		fullFrame: 	(0@0) corner: (300@200)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(887185664)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(953713664)
		expandBox: 	a MultistateButtonMorph(248677632)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Snake>>open
	Receiver: a Snake
	Arguments and temporary variables: 
		window: 	nil
	Receiver's instance variables: 
		container: 	a Morph(690600960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(727446528))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1817516
		lastStepMessage: 	nil
		lastCycleTime: 	1817536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1817516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1817516
		lastStepMessage: 	nil
		lastCycleTime: 	1817536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1817516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1817516
		lastStepMessage: 	nil
		lastCycleTime: 	1817536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1817516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #label:
Snake>>open
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:36:59.027448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(616832000)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(966737152)
		submorphs: 	an Array(a Morph(500741120) a Morph(469811456) a Morph(164677888) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (711810048)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(784@286) mouseDown red 2185386 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(784@286) mouseDown red 2185386 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(784@286) mouseDown red 2185386 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(784@286) mouseDown red 2185386 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(900736000)
	Arguments and temporary variables: 
		evt: 	[(784@286) mouseDown red 2185386 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(500741120)
		submorphs: 	an Array(a StringMorph(64014336)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (712960) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(64014336)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(784@286) mouseDown red 2185386 nil]
		firstClickUp: 	[(784@286) mouseUp 2185449 nil]
		firstClickTime: 	2185386
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1929778


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(784@286) mouseUp 2185449 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(784@286) mouseUp 2185449 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(784@286) mouseDown red 2185386 nil]
		firstClickUp: 	[(784@286) mouseUp 2185449 nil]
		firstClickTime: 	2185386
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1929778


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(784@286) mouseUp 2185449 nil]
		evt: 	[(784@286) mouseUp 2185449 nil]
	Receiver's instance variables: 
		bounds: 	(784@286) corner: (800@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(784@286) corner: (800@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a SystemWindow(966737152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(784@286) mouseUp 2185449 nil]
		targetOffset: 	(75.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2185449 784 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(784@286) mouseUp 2185449 nil]
		evtBuf: 	#(1 2185449 784 286 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(784@286) corner: (800@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(784@286) corner: (800@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a SystemWindow(966737152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(784@286) mouseUp 2185449 nil]
		targetOffset: 	(75.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2185449 784 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(784@286) corner: (800@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(784@286) corner: (800@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a SystemWindow(966737152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(784@286) mouseUp 2185449 nil]
		targetOffset: 	(75.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2185449 784 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:37:01.066448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(616832000)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(966737152)
		submorphs: 	an Array(a Morph(500741120) a Morph(469811456) a Morph(164677888) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (711810048) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(857@328) mouseDown red 2187399 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(857@328) mouseDown red 2187399 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(857@328) mouseDown red 2187399 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(857@328) mouseDown red 2187399 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(900736000)
	Arguments and temporary variables: 
		evt: 	[(857@328) mouseDown red 2187399 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(500741120)
		submorphs: 	an Array(a StringMorph(64014336)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (712960) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(64014336)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(857@328) mouseDown red 2187399 nil]
		firstClickUp: 	[(856@328) mouseUp 2187477 nil]
		firstClickTime: 	2187399
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1931817


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(856@328) mouseUp 2187477 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(856@328) mouseUp 2187477 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(857@328) mouseDown red 2187399 nil]
		firstClickUp: 	[(856@328) mouseUp 2187477 nil]
		firstClickTime: 	2187399
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1931817


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(856@328) mouseUp 2187477 nil]
		evt: 	[(856@328) mouseUp 2187477 nil]
	Receiver's instance variables: 
		bounds: 	(857@328) corner: (873@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(857@328) corner: (873@344)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(965862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(856@328) mouseUp 2187477 nil]
		targetOffset: 	(148.0@66.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2187477 856 328 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(856@328) mouseUp 2187477 nil]
		evtBuf: 	#(1 2187477 856 328 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(857@328) corner: (873@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(857@328) corner: (873@344)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(965862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(856@328) mouseUp 2187477 nil]
		targetOffset: 	(148.0@66.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2187477 856 328 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(857@328) corner: (873@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(857@328) corner: (873@344)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(965862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(856@328) mouseUp 2187477 nil]
		targetOffset: 	(148.0@66.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2187477 856 328 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:37:02.280448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(616832000)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(966737152)
		submorphs: 	an Array(a Morph(500741120) a Morph(469811456) a Morph(164677888) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (711810048) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(623@286) mouseDown red 2188600 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(623@286) mouseDown red 2188600 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(623@286) mouseDown red 2188600 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(623@286) mouseDown red 2188600 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(900736000)
	Arguments and temporary variables: 
		evt: 	[(623@286) mouseDown red 2188600 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(500741120)
		submorphs: 	an Array(a StringMorph(64014336)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (712960) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(64014336)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@286) mouseDown red 2188600 nil]
		firstClickUp: 	[(623@286) mouseUp 2188678 nil]
		firstClickTime: 	2188600
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1933012


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(623@286) mouseUp 2188678 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(623@286) mouseUp 2188678 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@286) mouseDown red 2188600 nil]
		firstClickUp: 	[(623@286) mouseUp 2188678 nil]
		firstClickTime: 	2188600
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1933012


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(623@286) mouseUp 2188678 nil]
		evt: 	[(623@286) mouseUp 2188678 nil]
	Receiver's instance variables: 
		bounds: 	(623@286) corner: (639@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@286) corner: (639@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(445286400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@286) mouseUp 2188678 nil]
		targetOffset: 	(-86.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2188678 623 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(623@286) mouseUp 2188678 nil]
		evtBuf: 	#(1 2188678 623 286 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(623@286) corner: (639@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@286) corner: (639@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(445286400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@286) mouseUp 2188678 nil]
		targetOffset: 	(-86.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2188678 623 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(623@286) corner: (639@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@286) corner: (639@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(445286400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@286) mouseUp 2188678 nil]
		targetOffset: 	(-86.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2188678 623 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:37:55.416448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(485492992)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(272.0@294.0) corner: (607.0@584.0)
		owner: 	a SystemWindow(807077888)
		submorphs: 	an Array(a Morph(892720384) a Morph(514115840) a Morph(347692032) a ...etc...
		fullBounds: 	(272.0@294.0) corner: (607.0@584.0)
		color: 	Color transparent
		extension: 	a MorphExtension (358051072)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(485492992)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(485492992)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(391@329) mouseDown red 2241734 nil]
		sourceMorph: 	a SimpleButtonMorph(422534400)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(391@329) mouseDown red 2241734 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(422534400)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(391@329) mouseDown red 2241734 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(422534400)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(391@329) mouseDown red 2241734 nil]
		sourceMorph: 	a SimpleButtonMorph(422534400)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(422534400)
	Arguments and temporary variables: 
		evt: 	[(391@329) mouseDown red 2241734 nil]
	Receiver's instance variables: 
		bounds: 	(367.0@294.0) corner: (487.0@344.0)
		owner: 	a Morph(892720384)
		submorphs: 	an Array(a StringMorph(425648384)'Exit')
		fullBounds: 	(367.0@294.0) corner: (487.0@344.0)
		color: 	Color gray
		extension: 	a MorphExtension (607585280) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(425648384)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(422534400)
		clickState: 	#firstClickUp
		firstClickDown: 	[(391@329) mouseDown red 2241734 nil]
		firstClickUp: 	[(391@329) mouseUp 2241827 nil]
		firstClickTime: 	2241734
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1986123


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(391@329) mouseUp 2241827 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(391@329) mouseUp 2241827 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(422534400)
		clickState: 	#firstClickUp
		firstClickDown: 	[(391@329) mouseDown red 2241734 nil]
		firstClickUp: 	[(391@329) mouseUp 2241827 nil]
		firstClickTime: 	2241734
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1986123


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(391@329) mouseUp 2241827 nil]
		evt: 	[(391@329) mouseUp 2241827 nil]
	Receiver's instance variables: 
		bounds: 	(391@329) corner: (407@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@329) corner: (407@345)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(422534400)
		keyboardFocus: 	a SystemWindow(807077888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@329) mouseUp 2241827 nil]
		targetOffset: 	(24.0@35.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2241827 391 329 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(391@329) mouseUp 2241827 nil]
		evtBuf: 	#(1 2241827 391 329 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(391@329) corner: (407@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@329) corner: (407@345)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(422534400)
		keyboardFocus: 	a SystemWindow(807077888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@329) mouseUp 2241827 nil]
		targetOffset: 	(24.0@35.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2241827 391 329 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(391@329) corner: (407@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@329) corner: (407@345)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(422534400)
		keyboardFocus: 	a SystemWindow(807077888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@329) mouseUp 2241827 nil]
		targetOffset: 	(24.0@35.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2241827 391 329 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:41:14.868448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(997268736)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(742405376)
		submorphs: 	an Array(a Morph(601731072) a Morph(938225920) a Morph(927587584) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (310208512)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(794@294) mouseDown red 2441212 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(794@294) mouseDown red 2441212 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(794@294) mouseDown red 2441212 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(794@294) mouseDown red 2441212 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1059083520)
	Arguments and temporary variables: 
		evt: 	[(794@294) mouseDown red 2441212 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(601731072)
		submorphs: 	an Array(a StringMorph(360342784)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (380510208) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(360342784)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(794@294) mouseDown red 2441212 nil]
		firstClickUp: 	[(794@294) mouseUp 2441290 nil]
		firstClickTime: 	2441212
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2185617


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(794@294) mouseUp 2441290 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(794@294) mouseUp 2441290 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(794@294) mouseDown red 2441212 nil]
		firstClickUp: 	[(794@294) mouseUp 2441290 nil]
		firstClickTime: 	2441212
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2185617


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(794@294) mouseUp 2441290 nil]
		evt: 	[(794@294) mouseUp 2441290 nil]
	Receiver's instance variables: 
		bounds: 	(794@294) corner: (810@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(794@294) corner: (810@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a SystemWindow(742405376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(794@294) mouseUp 2441290 nil]
		targetOffset: 	(85.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2441290 794 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(794@294) mouseUp 2441290 nil]
		evtBuf: 	#(1 2441290 794 294 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(794@294) corner: (810@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(794@294) corner: (810@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a SystemWindow(742405376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(794@294) mouseUp 2441290 nil]
		targetOffset: 	(85.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2441290 794 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(794@294) corner: (810@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(794@294) corner: (810@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a SystemWindow(742405376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(794@294) mouseUp 2441290 nil]
		targetOffset: 	(85.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2441290 794 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:41:20.833448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(997268736)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(742405376)
		submorphs: 	an Array(a Morph(601731072) a Morph(938225920) a Morph(927587584) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (310208512) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(618@270) mouseDown red 2447156 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(618@270) mouseDown red 2447156 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(618@270) mouseDown red 2447156 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(618@270) mouseDown red 2447156 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1059083520)
	Arguments and temporary variables: 
		evt: 	[(618@270) mouseDown red 2447156 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(601731072)
		submorphs: 	an Array(a StringMorph(360342784)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (380510208) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(360342784)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(618@270) mouseDown red 2447156 nil]
		firstClickUp: 	[(618@270) mouseUp 2447250 nil]
		firstClickTime: 	2447156
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2191564


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(618@270) mouseUp 2447250 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(618@270) mouseUp 2447250 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(618@270) mouseDown red 2447156 nil]
		firstClickUp: 	[(618@270) mouseUp 2447250 nil]
		firstClickTime: 	2447156
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2191564


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(618@270) mouseUp 2447250 nil]
		evt: 	[(618@270) mouseUp 2447250 nil]
	Receiver's instance variables: 
		bounds: 	(618@270) corner: (634@286)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@270) corner: (634@286)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(670132480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@270) mouseUp 2447250 nil]
		targetOffset: 	(-91.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447250 618 270 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(618@270) mouseUp 2447250 nil]
		evtBuf: 	#(1 2447250 618 270 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(618@270) corner: (634@286)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@270) corner: (634@286)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(670132480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@270) mouseUp 2447250 nil]
		targetOffset: 	(-91.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447250 618 270 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(618@270) corner: (634@286)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@270) corner: (634@286)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(670132480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@270) mouseUp 2447250 nil]
		targetOffset: 	(-91.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447250 618 270 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:41:21.459448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(997268736)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(742405376)
		submorphs: 	an Array(a Morph(601731072) a Morph(938225920) a Morph(927587584) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (310208512) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(626@251) mouseDown red 2447749 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(626@251) mouseDown red 2447749 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(626@251) mouseDown red 2447749 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(626@251) mouseDown red 2447749 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1059083520)
	Arguments and temporary variables: 
		evt: 	[(626@251) mouseDown red 2447749 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(601731072)
		submorphs: 	an Array(a StringMorph(360342784)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (380510208) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(360342784)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(626@251) mouseDown red 2447749 nil]
		firstClickUp: 	[(626@251) mouseUp 2447858 nil]
		firstClickTime: 	2447749
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2192167


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(626@251) mouseUp 2447858 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(626@251) mouseUp 2447858 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(626@251) mouseDown red 2447749 nil]
		firstClickUp: 	[(626@251) mouseUp 2447858 nil]
		firstClickTime: 	2447749
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2192167


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(626@251) mouseUp 2447858 nil]
		evt: 	[(626@251) mouseUp 2447858 nil]
	Receiver's instance variables: 
		bounds: 	(626@251) corner: (642@267)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@251) corner: (642@267)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(855811328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@251) mouseUp 2447858 nil]
		targetOffset: 	(-83.0@ -11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447858 626 251 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(626@251) mouseUp 2447858 nil]
		evtBuf: 	#(1 2447858 626 251 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(626@251) corner: (642@267)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@251) corner: (642@267)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(855811328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@251) mouseUp 2447858 nil]
		targetOffset: 	(-83.0@ -11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447858 626 251 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(626@251) corner: (642@267)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@251) corner: (642@267)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(855811328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@251) mouseUp 2447858 nil]
		targetOffset: 	(-83.0@ -11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447858 626 251 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:42:29.933448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(792950016)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(1059732480)
		submorphs: 	an Array(a Morph(673122560) a Morph(959059968) a Morph(194301952) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (385095936)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(792950016)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(792950016)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(768@290) mouseDown red 2516264 nil]
		sourceMorph: 	a SimpleButtonMorph(230235136)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(768@290) mouseDown red 2516264 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(230235136)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(768@290) mouseDown red 2516264 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(230235136)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(768@290) mouseDown red 2516264 nil]
		sourceMorph: 	a SimpleButtonMorph(230235136)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(230235136)
	Arguments and temporary variables: 
		evt: 	[(768@290) mouseDown red 2516264 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(673122560)
		submorphs: 	an Array(a StringMorph(868649984)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (807517440) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(868649984)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(230235136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(768@290) mouseDown red 2516264 nil]
		firstClickUp: 	[(768@290) mouseUp 2516342 nil]
		firstClickTime: 	2516264
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2260683


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(768@290) mouseUp 2516342 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(768@290) mouseUp 2516342 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(230235136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(768@290) mouseDown red 2516264 nil]
		firstClickUp: 	[(768@290) mouseUp 2516342 nil]
		firstClickTime: 	2516264
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2260683


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(768@290) mouseUp 2516342 nil]
		evt: 	[(768@290) mouseUp 2516342 nil]
	Receiver's instance variables: 
		bounds: 	(768@290) corner: (784@306)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(768@290) corner: (784@306)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(230235136)
		keyboardFocus: 	a SystemWindow(1059732480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(768@290) mouseUp 2516342 nil]
		targetOffset: 	(59.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2516342 768 290 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(768@290) mouseUp 2516342 nil]
		evtBuf: 	#(1 2516342 768 290 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(768@290) corner: (784@306)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(768@290) corner: (784@306)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(230235136)
		keyboardFocus: 	a SystemWindow(1059732480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(768@290) mouseUp 2516342 nil]
		targetOffset: 	(59.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2516342 768 290 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(768@290) corner: (784@306)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(768@290) corner: (784@306)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(230235136)
		keyboardFocus: 	a SystemWindow(1059732480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(768@290) mouseUp 2516342 nil]
		targetOffset: 	(59.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2516342 768 290 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of FixedLayout did not understand #flushLayoutCache
21 June 2017 5:48:37.674448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

FixedLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: FixedLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		host: 	nil
		compactClassIndex: 	0
		slotScope: 	nil


Morph>>layoutChanged
	Receiver: a Morph(934298880)
	Arguments and temporary variables: 
		layout: 	a FixedLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (792212480)


Morph>>layoutPolicy:
	Receiver: a Morph(934298880)
	Arguments and temporary variables: 
		aLayoutPolicy: 	a FixedLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (792212480)


SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(259841024)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(259841024)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1059787776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2628456
		lastStepMessage: 	nil
		lastCycleTime: 	2628477
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	2628456
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2628456
		lastStepMessage: 	nil
		lastCycleTime: 	2628477
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	2628456
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2628456
		lastStepMessage: 	nil
		lastCycleTime: 	2628477
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	2628456
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
FixedLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addControls
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #help:
21 June 2017 6:00:09.137448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #help:
	Receiver: a TextMorph(950118400)
	Arguments and temporary variables: 
		aMessage: 	help: 'Welcome to Snake'
		exception: 	MessageNotUnderstood: TextMorph>>help:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1026359552) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	nil
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


SnakeGame>>createTextArea:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		string: 	'Welcome to Snake'
		newTextArea: 	a TextMorph(950118400)
	Receiver's instance variables: 
		container: 	a Morph(973758464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	a Morph(810169600)
		startBtn: 	a SimpleButtonMorph(403623936)
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(973758464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(973758464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(711624704))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3319919
		lastStepMessage: 	nil
		lastCycleTime: 	3319939
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3319919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3319919
		lastStepMessage: 	nil
		lastCycleTime: 	3319939
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3319919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3319919
		lastStepMessage: 	nil
		lastCycleTime: 	3319939
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3319919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #help:
SnakeGame>>createTextArea:
SnakeGame>>addControls
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #addMorph:frame:
21 June 2017 6:09:00.138448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #addMorph:frame:
	Receiver: a Morph(485748992)
	Arguments and temporary variables: 
		aMessage: 	addMorph: a TextMorph(327447552) frame: (1@1)
		exception: 	MessageNotUnderstood: Morph>>addMorph:frame:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (485233920)


SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	a Morph(485748992)
		startBtn: 	a SimpleButtonMorph(1005315072)
		messageArea: 	a TextMorph(327447552)
	Receiver's instance variables: 
		container: 	a Morph(1003889920)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(1003889920)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(19271936))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3850917
		lastStepMessage: 	nil
		lastCycleTime: 	3850938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3850917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3850917
		lastStepMessage: 	nil
		lastCycleTime: 	3850938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3850917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3850917
		lastStepMessage: 	nil
		lastCycleTime: 	3850938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3850917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #addMorph:frame:
SnakeGame>>addControls
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 1st subscript out of range
21 June 2017 6:18:53.492448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>error:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'1st subscript out of range'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel(Matrix)>>indexForRow:andColumn:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		column: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel(Matrix)>>at:at:put:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		rowNumber: 	25
		columnNumber: 	12
		value: 	'X'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel>>updateAtRow:col:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		col: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(931@113) mouseDown red 4699795 nil]
		sourceMorph: 	a SnakeCell(419233792)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(931@113) mouseDown red 4699795 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(931@113) mouseDown red 4699795 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(931@113) mouseDown red 4699795 nil]
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SnakeCell(Morph)>>click:
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 
		evt: 	[(931@113) mouseDown red 4699795 nil]
	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(931@113) mouseDown red 4699795 nil]
		firstClickUp: 	[(931@113) mouseUp 4699888 nil]
		firstClickTime: 	4699795
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444194


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(931@113) mouseUp 4699888 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(931@113) mouseUp 4699888 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(931@113) mouseDown red 4699795 nil]
		firstClickUp: 	[(931@113) mouseUp 4699888 nil]
		firstClickTime: 	4699795
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444194


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(931@113) mouseUp 4699888 nil]
		evt: 	[(931@113) mouseUp 4699888 nil]
	Receiver's instance variables: 
		bounds: 	(931@113) corner: (947@129)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(931@113) corner: (947@129)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a SystemWindow(907987968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@113) mouseUp 4699888 nil]
		targetOffset: 	(17.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4699888 931 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(931@113) mouseUp 4699888 nil]
		evtBuf: 	#(1 4699888 931 113 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(931@113) corner: (947@129)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(931@113) corner: (947@129)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a SystemWindow(907987968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@113) mouseUp 4699888 nil]
		targetOffset: 	(17.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4699888 931 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(931@113) corner: (947@129)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(931@113) corner: (947@129)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a SystemWindow(907987968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@113) mouseUp 4699888 nil]
		targetOffset: 	(17.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4699888 931 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>error:
SnakeModel(Matrix)>>indexForRow:andColumn:
SnakeModel(Matrix)>>at:at:put:
SnakeModel>>updateAtRow:col:
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SnakeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 1st subscript out of range
21 June 2017 6:18:53.895448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>error:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'1st subscript out of range'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


SnakeModel(Matrix)>>indexForRow:andColumn:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		column: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


SnakeModel(Matrix)>>at:at:put:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		rowNumber: 	25
		columnNumber: 	12
		value: 	'O'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


SnakeModel>>updateAtRow:col:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		col: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(926@116) mouseDown red 4700216 nil]
		sourceMorph: 	a SnakeCell(419233792)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(926@116) mouseDown red 4700216 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(926@116) mouseDown red 4700216 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(926@116) mouseDown red 4700216 nil]
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SnakeCell(Morph)>>click:
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 
		evt: 	[(926@116) mouseDown red 4700216 nil]
	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(926@116) mouseDown red 4700216 nil]
		firstClickUp: 	[(926@116) mouseUp 4700310 nil]
		firstClickTime: 	4700216
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444626


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(926@116) mouseUp 4700310 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(926@116) mouseUp 4700310 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(926@116) mouseDown red 4700216 nil]
		firstClickUp: 	[(926@116) mouseUp 4700310 nil]
		firstClickTime: 	4700216
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444626


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(926@116) mouseUp 4700310 nil]
		evt: 	[(926@116) mouseUp 4700310 nil]
	Receiver's instance variables: 
		bounds: 	(926@116) corner: (942@132)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(926@116) corner: (942@132)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a PluggableButtonMorph(943533056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@116) mouseUp 4700310 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4700310 926 116 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(926@116) mouseUp 4700310 nil]
		evtBuf: 	#(1 4700310 926 116 0 0 2 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(926@116) corner: (942@132)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(926@116) corner: (942@132)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a PluggableButtonMorph(943533056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@116) mouseUp 4700310 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4700310 926 116 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(926@116) corner: (942@132)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(926@116) corner: (942@132)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a PluggableButtonMorph(943533056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@116) mouseUp 4700310 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4700310 926 116 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>error:
SnakeModel(Matrix)>>indexForRow:andColumn:
SnakeModel(Matrix)>>at:at:put:
SnakeModel>>updateAtRow:col:
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SnakeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #margins:
21 June 2017 6:28:50.319448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #margins:
	Receiver: a Morph(919084032)
	Arguments and temporary variables: 
		aMessage: 	margins: (0@0)
		exception: 	MessageNotUnderstood: Morph>>margins:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (196521216)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(177178624)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(177178624)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(266796032))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5041104
		lastStepMessage: 	nil
		lastCycleTime: 	5041125
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5041104
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5041104
		lastStepMessage: 	nil
		lastCycleTime: 	5041125
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5041104
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5041104
		lastStepMessage: 	nil
		lastCycleTime: 	5041125
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5041104
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #margins:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #margins:
21 June 2017 6:29:46.442448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #margins:
	Receiver: a SnakeCell(670718976)
	Arguments and temporary variables: 
		aMessage: 	margins: (0@0)
		exception: 	MessageNotUnderstood: SnakeCell>>margins:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (20@20)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(633236736)'')
		fullBounds: 	nil
		color: 	Color lightGray
		extension: 	a MorphExtension (957831168)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(633236736)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	a Morph(546693376)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(270009344)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(270009344)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(217660416))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	5097222
		lastStepMessage: 	nil
		lastCycleTime: 	5097243
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5097222
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	5097222
		lastStepMessage: 	nil
		lastCycleTime: 	5097243
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5097222
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	5097222
		lastStepMessage: 	nil
		lastCycleTime: 	5097243
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5097222
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #margins:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of EmptyLayout did not understand #flushLayoutCache
21 June 2017 6:30:35.218448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

EmptyLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: an EmptyLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: EmptyLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		host: 	nil


Morph>>layoutChanged
	Receiver: a Morph(565049344)
	Arguments and temporary variables: 
		layout: 	an EmptyLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (612708608)


Morph>>layoutPolicy:
	Receiver: a Morph(565049344)
	Arguments and temporary variables: 
		aLayoutPolicy: 	an EmptyLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (612708608)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(574399488)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(574399488)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(619305984))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5146002
		lastStepMessage: 	nil
		lastCycleTime: 	5146024
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5146002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5146002
		lastStepMessage: 	nil
		lastCycleTime: 	5146024
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5146002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5146002
		lastStepMessage: 	nil
		lastCycleTime: 	5146024
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5146002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
EmptyLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpecRowLayout did not understand #flushLayoutCache
21 June 2017 6:31:17.524448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: a SpecRowLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: SpecRowLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		type: 	#ContainerModel
		commands: 	an OrderedCollection()
		selector: 	nil
		result: 	nil
		shouldCheckSplitters: 	nil
		currentOffset: 	nil
		currentProportional: 	nil
		numberOfProportionals: 	nil
		lastFractionIndex: 	nil
		autoFractionComputation: 	nil
		size: 	nil
		width: 	nil


Morph>>layoutChanged
	Receiver: a Morph(1000415232)
	Arguments and temporary variables: 
		layout: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (256657664)


Morph>>layoutPolicy:
	Receiver: a Morph(1000415232)
	Arguments and temporary variables: 
		aLayoutPolicy: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (256657664)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(735792128)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(735792128)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(734757888))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5188309
		lastStepMessage: 	nil
		lastCycleTime: 	5188330
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5188309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5188309
		lastStepMessage: 	nil
		lastCycleTime: 	5188330
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5188309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5188309
		lastStepMessage: 	nil
		lastCycleTime: 	5188330
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5188309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpecRowLayout did not understand #flushLayoutCache
21 June 2017 6:31:22.668448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: a SpecRowLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: SpecRowLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		type: 	#ContainerModel
		commands: 	an OrderedCollection()
		selector: 	nil
		result: 	nil
		shouldCheckSplitters: 	nil
		currentOffset: 	nil
		currentProportional: 	nil
		numberOfProportionals: 	nil
		lastFractionIndex: 	nil
		autoFractionComputation: 	nil
		size: 	nil
		width: 	nil


Morph>>layoutChanged
	Receiver: a Morph(903628800)
	Arguments and temporary variables: 
		layout: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (285958400)


Morph>>layoutPolicy:
	Receiver: a Morph(903628800)
	Arguments and temporary variables: 
		aLayoutPolicy: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (285958400)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(37651456)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(37651456)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(802143232))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5193450
		lastStepMessage: 	nil
		lastCycleTime: 	5193471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5193450
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5193450
		lastStepMessage: 	nil
		lastCycleTime: 	5193471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5193450
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5193450
		lastStepMessage: 	nil
		lastCycleTime: 	5193471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5193450
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 6:55:34.922448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(706@232) mouseDown red 6901250 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(706@232) mouseDown red 6901250 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(706@232) mouseDown red 6901250 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(706@232) mouseDown red 6901250 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1022952704)
	Arguments and temporary variables: 
		evt: 	[(706@232) mouseDown red 6901250 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(15237120)
		submorphs: 	an Array(a StringMorph(699475200)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (757424128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(699475200)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(706@232) mouseDown red 6901250 nil]
		firstClickUp: 	[(706@232) mouseUp 6901312 nil]
		firstClickTime: 	6901250
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6645668


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(706@232) mouseUp 6901312 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(706@232) mouseUp 6901312 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(706@232) mouseDown red 6901250 nil]
		firstClickUp: 	[(706@232) mouseUp 6901312 nil]
		firstClickTime: 	6901250
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6645668


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(706@232) mouseUp 6901312 nil]
		evt: 	[(706@232) mouseUp 6901312 nil]
	Receiver's instance variables: 
		bounds: 	(706@232.0) corner: (722@248.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(706@232.0) corner: (722@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a SystemWindow(921191424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(706@232) mouseUp 6901312 nil]
		targetOffset: 	(92.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6901312 706 232 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(706@232) mouseUp 6901312 nil]
		evtBuf: 	#(1 6901312 706 232 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(706@232.0) corner: (722@248.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(706@232.0) corner: (722@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a SystemWindow(921191424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(706@232) mouseUp 6901312 nil]
		targetOffset: 	(92.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6901312 706 232 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(706@232.0) corner: (722@248.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(706@232.0) corner: (722@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a SystemWindow(921191424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(706@232) mouseUp 6901312 nil]
		targetOffset: 	(92.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6901312 706 232 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 6:55:39.532448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(621@205) mouseDown red 6905867 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(621@205) mouseDown red 6905867 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(621@205) mouseDown red 6905867 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(621@205) mouseDown red 6905867 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1022952704)
	Arguments and temporary variables: 
		evt: 	[(621@205) mouseDown red 6905867 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(15237120)
		submorphs: 	an Array(a StringMorph(699475200)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (757424128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(699475200)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(621@205) mouseDown red 6905867 nil]
		firstClickUp: 	[(621@205) mouseUp 6905945 nil]
		firstClickTime: 	6905867
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6650264


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(621@205) mouseUp 6905945 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(621@205) mouseUp 6905945 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(621@205) mouseDown red 6905867 nil]
		firstClickUp: 	[(621@205) mouseUp 6905945 nil]
		firstClickTime: 	6905867
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6650264


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(621@205) mouseUp 6905945 nil]
		evt: 	[(621@205) mouseUp 6905945 nil]
	Receiver's instance variables: 
		bounds: 	(621@205.0) corner: (637@221.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(621@205.0) corner: (637@221.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a PluggableButtonMorph(546043904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@205) mouseUp 6905945 nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6905945 621 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(621@205) mouseUp 6905945 nil]
		evtBuf: 	#(1 6905945 621 205 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(621@205.0) corner: (637@221.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(621@205.0) corner: (637@221.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a PluggableButtonMorph(546043904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@205) mouseUp 6905945 nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6905945 621 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(621@205.0) corner: (637@221.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(621@205.0) corner: (637@221.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a PluggableButtonMorph(546043904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@205) mouseUp 6905945 nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6905945 621 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #basicNew: in Array class failed
21 June 2017 6:57:02.400448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array class(Object)>>primitiveFailed:
	Receiver: Array
	Arguments and temporary variables: 
		selector: 	#basicNew:
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class(Object)>>primitiveFailed
	Receiver: Array
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class(Behavior)>>basicNew:
	Receiver: Array
	Arguments and temporary variables: 
		sizeRequested: 	(25@25)
		ec: 	#'bad argument'
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class>>new:
	Receiver: Array
	Arguments and temporary variables: 
		sizeRequested: 	(25@25)
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(935332864)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(935332864)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(672055296))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6733185
		lastStepMessage: 	nil
		lastCycleTime: 	6733206
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	6733185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6733185
		lastStepMessage: 	nil
		lastCycleTime: 	6733206
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	6733185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6733185
		lastStepMessage: 	nil
		lastCycleTime: 	6733206
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	6733185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array class(Object)>>primitiveFailed:
Array class(Object)>>primitiveFailed
Array class(Behavior)>>basicNew:
Array class>>new:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:30.298448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(634@145) mouseDown red 7376616 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(634@145) mouseDown red 7376616 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(634@145) mouseDown red 7376616 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(634@145) mouseDown red 7376616 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(634@145) mouseDown red 7376616 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	Color gray
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(634@145) mouseDown red 7376616 nil]
		firstClickUp: 	[(634@145) mouseUp 7376694 nil]
		firstClickTime: 	7376616
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7121027


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(634@145) mouseUp 7376694 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(634@145) mouseUp 7376694 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(634@145) mouseDown red 7376616 nil]
		firstClickUp: 	[(634@145) mouseUp 7376694 nil]
		firstClickTime: 	7376616
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7121027


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(634@145) mouseUp 7376694 nil]
		evt: 	[(634@145) mouseUp 7376694 nil]
	Receiver's instance variables: 
		bounds: 	(634@145.0) corner: (650@161.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(634@145.0) corner: (650@161.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a SystemWindow(598984704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(634@145) mouseUp 7376694 nil]
		targetOffset: 	(77.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7376694 634 145 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(634@145) mouseUp 7376694 nil]
		evtBuf: 	#(1 7376694 634 145 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(634@145.0) corner: (650@161.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(634@145.0) corner: (650@161.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a SystemWindow(598984704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(634@145) mouseUp 7376694 nil]
		targetOffset: 	(77.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7376694 634 145 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(634@145.0) corner: (650@161.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(634@145.0) corner: (650@161.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a SystemWindow(598984704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(634@145) mouseUp 7376694 nil]
		targetOffset: 	(77.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7376694 634 145 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:32.275448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(774@182) mouseDown red 7378597 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(774@182) mouseDown red 7378597 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(774@182) mouseDown red 7378597 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(774@182) mouseDown red 7378597 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(774@182) mouseDown red 7378597 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	Color gray
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(774@182) mouseDown red 7378597 nil]
		firstClickUp: 	[(774@182) mouseUp 7378691 nil]
		firstClickTime: 	7378597
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7123007


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(774@182) mouseUp 7378691 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(774@182) mouseUp 7378691 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(774@182) mouseDown red 7378597 nil]
		firstClickUp: 	[(774@182) mouseUp 7378691 nil]
		firstClickTime: 	7378597
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7123007


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(774@182) mouseUp 7378691 nil]
		evt: 	[(774@182) mouseUp 7378691 nil]
	Receiver's instance variables: 
		bounds: 	(774@182.0) corner: (790@198.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(774@182.0) corner: (790@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(299064320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@182) mouseUp 7378691 nil]
		targetOffset: 	(217.0@63.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7378691 774 182 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(774@182) mouseUp 7378691 nil]
		evtBuf: 	#(1 7378691 774 182 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(774@182.0) corner: (790@198.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(774@182.0) corner: (790@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(299064320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@182) mouseUp 7378691 nil]
		targetOffset: 	(217.0@63.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7378691 774 182 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(774@182.0) corner: (790@198.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(774@182.0) corner: (790@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(299064320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@182) mouseUp 7378691 nil]
		targetOffset: 	(217.0@63.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7378691 774 182 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:33.888448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(610@146) mouseDown red 7380188 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(610@146) mouseDown red 7380188 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(610@146) mouseDown red 7380188 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(610@146) mouseDown red 7380188 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(610@146) mouseDown red 7380188 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(610@146) mouseDown red 7380188 nil]
		firstClickUp: 	[(610@146) mouseUp 7380298 nil]
		firstClickTime: 	7380188
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7124598


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(610@146) mouseUp 7380298 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(610@146) mouseUp 7380298 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(610@146) mouseDown red 7380188 nil]
		firstClickUp: 	[(610@146) mouseUp 7380298 nil]
		firstClickTime: 	7380188
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7124598


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(610@146) mouseUp 7380298 nil]
		evt: 	[(610@146) mouseUp 7380298 nil]
	Receiver's instance variables: 
		bounds: 	(610@146.0) corner: (626@162.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(610@146.0) corner: (626@162.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(412581888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(610@146) mouseUp 7380298 nil]
		targetOffset: 	(53.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380298 610 146 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(610@146) mouseUp 7380298 nil]
		evtBuf: 	#(1 7380298 610 146 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(610@146.0) corner: (626@162.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(610@146.0) corner: (626@162.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(412581888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(610@146) mouseUp 7380298 nil]
		targetOffset: 	(53.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380298 610 146 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(610@146.0) corner: (626@162.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(610@146.0) corner: (626@162.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(412581888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(610@146) mouseUp 7380298 nil]
		targetOffset: 	(53.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380298 610 146 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:34.511448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(583@129) mouseDown red 7380812 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(583@129) mouseDown red 7380812 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(583@129) mouseDown red 7380812 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(583@129) mouseDown red 7380812 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(583@129) mouseDown red 7380812 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(583@129) mouseDown red 7380812 nil]
		firstClickUp: 	[(583@129) mouseUp 7380922 nil]
		firstClickTime: 	7380812
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7125223


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(583@129) mouseUp 7380922 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(583@129) mouseUp 7380922 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(583@129) mouseDown red 7380812 nil]
		firstClickUp: 	[(583@129) mouseUp 7380922 nil]
		firstClickTime: 	7380812
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7125223


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(583@129) mouseUp 7380922 nil]
		evt: 	[(583@129) mouseUp 7380922 nil]
	Receiver's instance variables: 
		bounds: 	(583@129.0) corner: (599@145.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(583@129.0) corner: (599@145.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(1303552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(583@129) mouseUp 7380922 nil]
		targetOffset: 	(26.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380922 583 129 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(583@129) mouseUp 7380922 nil]
		evtBuf: 	#(1 7380922 583 129 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(583@129.0) corner: (599@145.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(583@129.0) corner: (599@145.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(1303552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(583@129) mouseUp 7380922 nil]
		targetOffset: 	(26.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380922 583 129 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(583@129.0) corner: (599@145.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(583@129.0) corner: (599@145.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(1303552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(583@129) mouseUp 7380922 nil]
		targetOffset: 	(26.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380922 583 129 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:35.830448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(623@188) mouseDown red 7382123 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(623@188) mouseDown red 7382123 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(623@188) mouseDown red 7382123 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(623@188) mouseDown red 7382123 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(623@188) mouseDown red 7382123 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@188) mouseDown red 7382123 nil]
		firstClickUp: 	[(623@188) mouseUp 7382232 nil]
		firstClickTime: 	7382123
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7126518


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(623@188) mouseUp 7382232 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(623@188) mouseUp 7382232 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@188) mouseDown red 7382123 nil]
		firstClickUp: 	[(623@188) mouseUp 7382232 nil]
		firstClickTime: 	7382123
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7126518


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(623@188) mouseUp 7382232 nil]
		evt: 	[(623@188) mouseUp 7382232 nil]
	Receiver's instance variables: 
		bounds: 	(623@188.0) corner: (639@204.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@188.0) corner: (639@204.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(741115904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@188) mouseUp 7382232 nil]
		targetOffset: 	(66.0@69.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7382232 623 188 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(623@188) mouseUp 7382232 nil]
		evtBuf: 	#(1 7382232 623 188 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(623@188.0) corner: (639@204.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@188.0) corner: (639@204.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(741115904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@188) mouseUp 7382232 nil]
		targetOffset: 	(66.0@69.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7382232 623 188 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(623@188.0) corner: (639@204.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@188.0) corner: (639@204.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(741115904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@188) mouseUp 7382232 nil]
		targetOffset: 	(66.0@69.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7382232 623 188 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:05:03.218448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7213534
		lastStepMessage: 	nil
		lastCycleTime: 	7213555
		alarms: 	a Heap()
		lastAlarmTime: 	7213534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:05:56.32128 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7213534
		lastStepMessage: 	nil
		lastCycleTime: 	7213555
		alarms: 	a Heap()
		lastAlarmTime: 	7213534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:06:49.38528 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(521@492.0) corner: (537@508.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(521@492) mouseOver 7574597 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7574597 521 492 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(521@492.0) corner: (537@508.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(521@492) mouseOver 7574597 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7574597 521 492 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	52665
		lastStepMessage: 	nil
		lastCycleTime: 	52686
		alarms: 	a Heap()
		lastAlarmTime: 	52665
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:53.33228 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(649@215) mouseDown red 7579651 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(649@215) mouseDown red 7579651 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(649@215) mouseDown red 7579651 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(649@215) mouseDown red 7579651 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(649@215) mouseDown red 7579651 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(649@215) mouseDown red 7579651 nil]
		firstClickUp: 	[(649@215) mouseUp 7579729 nil]
		firstClickTime: 	7579651
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	57174


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(649@215) mouseUp 7579729 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(649@215) mouseUp 7579729 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(649@215) mouseDown red 7579651 nil]
		firstClickUp: 	[(649@215) mouseUp 7579729 nil]
		firstClickTime: 	7579651
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	57174


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(649@215) mouseUp 7579729 nil]
		evt: 	[(649@215) mouseUp 7579729 nil]
	Receiver's instance variables: 
		bounds: 	(649@215.0) corner: (665@231.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@215.0) corner: (665@231.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a SystemWindow(53765120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@215) mouseUp 7579729 nil]
		targetOffset: 	(35.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7579729 649 215 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(649@215) mouseUp 7579729 nil]
		evtBuf: 	#(1 7579729 649 215 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(649@215.0) corner: (665@231.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@215.0) corner: (665@231.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a SystemWindow(53765120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@215) mouseUp 7579729 nil]
		targetOffset: 	(35.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7579729 649 215 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(649@215.0) corner: (665@231.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@215.0) corner: (665@231.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a SystemWindow(53765120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@215) mouseUp 7579729 nil]
		targetOffset: 	(35.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7579729 649 215 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:55.03128 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(615@206) mouseDown red 7581336 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(615@206) mouseDown red 7581336 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(615@206) mouseDown red 7581336 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(615@206) mouseDown red 7581336 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(615@206) mouseDown red 7581336 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(615@206) mouseDown red 7581336 nil]
		firstClickUp: 	[(615@206) mouseUp 7581430 nil]
		firstClickTime: 	7581336
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	58847


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(615@206) mouseUp 7581430 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(615@206) mouseUp 7581430 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(615@206) mouseDown red 7581336 nil]
		firstClickUp: 	[(615@206) mouseUp 7581430 nil]
		firstClickTime: 	7581336
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	58847


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(615@206) mouseUp 7581430 nil]
		evt: 	[(615@206) mouseUp 7581430 nil]
	Receiver's instance variables: 
		bounds: 	(615@206.0) corner: (631@222.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(615@206.0) corner: (631@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(696936704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(615@206) mouseUp 7581430 nil]
		targetOffset: 	(1.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7581430 615 206 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(615@206) mouseUp 7581430 nil]
		evtBuf: 	#(1 7581430 615 206 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(615@206.0) corner: (631@222.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(615@206.0) corner: (631@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(696936704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(615@206) mouseUp 7581430 nil]
		targetOffset: 	(1.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7581430 615 206 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(615@206.0) corner: (631@222.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(615@206.0) corner: (631@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(696936704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(615@206) mouseUp 7581430 nil]
		targetOffset: 	(1.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7581430 615 206 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:55.95828 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(619@224) mouseDown red 7582272 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(619@224) mouseDown red 7582272 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(619@224) mouseDown red 7582272 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(619@224) mouseDown red 7582272 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(619@224) mouseDown red 7582272 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(619@224) mouseDown red 7582272 nil]
		firstClickUp: 	[(619@224) mouseUp 7582366 nil]
		firstClickTime: 	7582272
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	59774


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(619@224) mouseUp 7582366 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(619@224) mouseUp 7582366 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(619@224) mouseDown red 7582272 nil]
		firstClickUp: 	[(619@224) mouseUp 7582366 nil]
		firstClickTime: 	7582272
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	59774


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(619@224) mouseUp 7582366 nil]
		evt: 	[(619@224) mouseUp 7582366 nil]
	Receiver's instance variables: 
		bounds: 	(619@224.0) corner: (635@240.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(619@224.0) corner: (635@240.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(334417152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(619@224) mouseUp 7582366 nil]
		targetOffset: 	(5.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7582366 619 224 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(619@224) mouseUp 7582366 nil]
		evtBuf: 	#(1 7582366 619 224 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(619@224.0) corner: (635@240.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(619@224.0) corner: (635@240.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(334417152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(619@224) mouseUp 7582366 nil]
		targetOffset: 	(5.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7582366 619 224 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(619@224.0) corner: (635@240.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(619@224.0) corner: (635@240.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(334417152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(619@224) mouseUp 7582366 nil]
		targetOffset: 	(5.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7582366 619 224 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:56.83428 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(622@246) mouseDown red 7583130 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(622@246) mouseDown red 7583130 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(622@246) mouseDown red 7583130 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(622@246) mouseDown red 7583130 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(622@246) mouseDown red 7583130 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@246) mouseDown red 7583130 nil]
		firstClickUp: 	[(622@246) mouseUp 7583239 nil]
		firstClickTime: 	7583130
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	60651


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(622@246) mouseUp 7583239 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(622@246) mouseUp 7583239 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@246) mouseDown red 7583130 nil]
		firstClickUp: 	[(622@246) mouseUp 7583239 nil]
		firstClickTime: 	7583130
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	60651


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(622@246) mouseUp 7583239 nil]
		evt: 	[(622@246) mouseUp 7583239 nil]
	Receiver's instance variables: 
		bounds: 	(622@246.0) corner: (638@262.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@246.0) corner: (638@262.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(593293568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@246) mouseUp 7583239 nil]
		targetOffset: 	(8.0@50.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7583239 622 246 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(622@246) mouseUp 7583239 nil]
		evtBuf: 	#(1 7583239 622 246 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(622@246.0) corner: (638@262.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@246.0) corner: (638@262.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(593293568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@246) mouseUp 7583239 nil]
		targetOffset: 	(8.0@50.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7583239 622 246 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@246.0) corner: (638@262.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@246.0) corner: (638@262.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(593293568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@246) mouseUp 7583239 nil]
		targetOffset: 	(8.0@50.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7583239 622 246 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:58.63028 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(622@203) mouseDown red 7584940 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(622@203) mouseDown red 7584940 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(622@203) mouseDown red 7584940 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(622@203) mouseDown red 7584940 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(622@203) mouseDown red 7584940 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.9380000000000001 g: 0.9380000000000001 b: 0.9380000000000001...etc...
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@203) mouseDown red 7584940 nil]
		firstClickUp: 	[(622@203) mouseUp 7585033 nil]
		firstClickTime: 	7584940
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	62445


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(622@203) mouseUp 7585033 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(622@203) mouseUp 7585033 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@203) mouseDown red 7584940 nil]
		firstClickUp: 	[(622@203) mouseUp 7585033 nil]
		firstClickTime: 	7584940
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	62445


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(622@203) mouseUp 7585033 nil]
		evt: 	[(622@203) mouseUp 7585033 nil]
	Receiver's instance variables: 
		bounds: 	(622@203.0) corner: (638@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@203.0) corner: (638@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(305714432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@203) mouseUp 7585033 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7585033 622 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(622@203) mouseUp 7585033 nil]
		evtBuf: 	#(1 7585033 622 203 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(622@203.0) corner: (638@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@203.0) corner: (638@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(305714432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@203) mouseUp 7585033 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7585033 622 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@203.0) corner: (638@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@203.0) corner: (638@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(305714432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@203) mouseUp 7585033 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7585033 622 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:15:18.077111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(799@446.0) corner: (815@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(791@437) mouseOver 8077482 nil]
		targetOffset: 	(126@97)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8077482 788 436 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(799@446.0) corner: (815@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(791@437) mouseOver 8077482 nil]
		targetOffset: 	(126@97)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8077482 788 436 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	284747
		lastStepMessage: 	nil
		lastCycleTime: 	284769
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	284747
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SimpleHierarchicalListMorph did not understand #fillRectangle:fillStyle:borderStyle:
21 June 2017 7:36:15.811111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
	Receiver: a SimpleHierarchicalListMorph(724824064)
	Arguments and temporary variables: 
		aMessage: 	fillRectangle: (0@0) corner: (150@120) fillStyle: Color transparent b...etc...
		exception: 	MessageNotUnderstood: SimpleHierarchicalListMorph>>fillRectangle:fil...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(315674624))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (187204352) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(282150912)
		scroller: 	a TransformMorph(315674624)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(468634368)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


BorderedMorph(Morph)>>drawOn:
	Receiver: a BorderedMorph(443695104)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(724824064)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (996006656)
		borderWidth: 	1
		borderColor: 	(Color r: 0.38 g: 0.638 b: 0.882 alpha: 1.0)


SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
	Receiver: a SimpleHierarchicalListMorph(724824064)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(724824064)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(315674624))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (187204352) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(282150912)
		scroller: 	a TransformMorph(315674624)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(468634368)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(572203008)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(572203008)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(68139776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1542846
		lastStepMessage: 	nil
		lastCycleTime: 	1542866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1542846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1542846
		lastStepMessage: 	nil
		lastCycleTime: 	1542866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1542846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1542846
		lastStepMessage: 	nil
		lastCycleTime: 	1542866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1542846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
BorderedMorph(Morph)>>drawOn:
SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #drawKeyboardFocusOn:
21 June 2017 7:36:32.841111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #drawKeyboardFocusOn:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	drawKeyboardFocusOn: a SimpleHierarchicalListMorph(416977664)
		exception: 	MessageNotUnderstood: SnakeGame>>drawKeyboardFocusOn:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(906606592)
		model: 	<<error during printing>>

SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(906606592)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(906606592)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(324608000))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1559736
		lastStepMessage: 	nil
		lastCycleTime: 	1559757
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1559736
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1559736
		lastStepMessage: 	nil
		lastCycleTime: 	1559757
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1559736
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1559736
		lastStepMessage: 	nil
		lastCycleTime: 	1559757
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1559736
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #drawKeyboardFocusOn:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #content:
21 June 2017 7:38:00.416111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #content:
	Receiver: a TextMorph(743057408)
	Arguments and temporary variables: 
		aMessage: 	content: 'no'
		exception: 	MessageNotUnderstood: TextMorph>>content:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (120@21)
		owner: 	a Morph(950594304)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (436019200) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'Welcome to Snake'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(994641920)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(994641920)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(283867136))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1647459
		lastStepMessage: 	nil
		lastCycleTime: 	1647481
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1647459
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1647459
		lastStepMessage: 	nil
		lastCycleTime: 	1647481
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1647459
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1647459
		lastStepMessage: 	nil
		lastCycleTime: 	1647481
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1647459
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #content:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #textArea
21 June 2017 7:38:36.447111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #textArea
	Receiver: a TextMorph(1018303232)
	Arguments and temporary variables: 
		aMessage: 	textArea
		exception: 	MessageNotUnderstood: TextMorph>>textArea
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (120@21)
		owner: 	a Morph(253638656)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (152001280) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'Welcome to Snake'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(626799360)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(626799360)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(460735232))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1683490
		lastStepMessage: 	nil
		lastCycleTime: 	1683511
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1683490
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1683490
		lastStepMessage: 	nil
		lastCycleTime: 	1683511
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1683490
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1683490
		lastStepMessage: 	nil
		lastCycleTime: 	1683511
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1683490
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #textArea
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SimpleHierarchicalListMorph did not understand #fillRectangle:fillStyle:borderStyle:
21 June 2017 7:41:58.463111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
	Receiver: a SimpleHierarchicalListMorph(278416128)
	Arguments and temporary variables: 
		aMessage: 	fillRectangle: (0@0) corner: (150@120) fillStyle: Color transparent b...etc...
		exception: 	MessageNotUnderstood: SimpleHierarchicalListMorph>>fillRectangle:fil...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(1048887296))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (1031410432) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(429275136)
		scroller: 	a TransformMorph(1048887296)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(358046464)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


BorderedMorph(Morph)>>drawOn:
	Receiver: a BorderedMorph(439889920)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(278416128)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (519578368)
		borderWidth: 	1
		borderColor: 	(Color r: 0.38 g: 0.638 b: 0.882 alpha: 1.0)


SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
	Receiver: a SimpleHierarchicalListMorph(278416128)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(278416128)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(1048887296))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (1031410432) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(429275136)
		scroller: 	a TransformMorph(1048887296)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(358046464)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(113346560)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(113346560)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(13891584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1885500
		lastStepMessage: 	nil
		lastCycleTime: 	1885521
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1885500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1885500
		lastStepMessage: 	nil
		lastCycleTime: 	1885521
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1885500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1885500
		lastStepMessage: 	nil
		lastCycleTime: 	1885521
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1885500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
BorderedMorph(Morph)>>drawOn:
SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.164111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(856@260.0) (891@443) mouseEnter 10490412 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(856@260.0) (891@443) mouseEnter 10490412 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490412
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(891@443)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(856@260.0)
		trail: 	{(856@264). (857@274). (861@294). (865@326). (874@370). (881@410). (886@...etc...


MouseMoveEvent>>sentTo:
	Receiver: [(856@260.0) (891@443) mouseEnter 10490412 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490412
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(891@443)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(856@260.0)
		trail: 	{(856@264). (857@274). (861@294). (865@326). (874@370). (881@410). (886@...etc...


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		originalEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		asMouseEnterEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		asMouseEnterEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		evt: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(891@443.0) corner: (907@459.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(891@443.0) corner: (907@459.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(891@443) mouseOver 10490412 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490412 856 264 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		evtBuf: 	#(1 10490412 856 264 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(891@443.0) corner: (907@459.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(891@443.0) corner: (907@459.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(891@443) mouseOver 10490412 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490412 856 264 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(891@443.0) corner: (907@459.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(891@443.0) corner: (907@459.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(891@443) mouseOver 10490412 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490412 856 264 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.230111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(891@443.0) (892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(891@443.0) (892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(891@443.0)
		trail: 	{(891@444). (892@446)}


MouseMoveEvent>>sentTo:
	Receiver: [(891@443.0) (892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(891@443.0)
		trail: 	{(891@444). (892@446)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		asMouseEnterEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		asMouseEnterEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		evt: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		evtBuf: 	#(1 10490568 891 444 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.266111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.297111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.328111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.359111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.390111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.424111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446.0) (894@445) mouseEnter 10490833 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(892@446.0) (894@445) mouseEnter 10490833 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490833
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(894@445)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(892@446.0)
		trail: 	{(894@445)}


MouseMoveEvent>>sentTo:
	Receiver: [(892@446.0) (894@445) mouseEnter 10490833 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490833
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(894@445)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(892@446.0)
		trail: 	{(894@445)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		originalEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		asMouseEnterEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		asMouseEnterEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		evt: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(894@445.0) corner: (910@461.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(894@445.0) corner: (910@461.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(894@445) mouseOver 10490833 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490833 894 445 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		evtBuf: 	#(1 10490833 894 445 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(894@445.0) corner: (910@461.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(894@445.0) corner: (910@461.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(894@445) mouseOver 10490833 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490833 894 445 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(894@445.0) corner: (910@461.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(894@445.0) corner: (910@461.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(894@445) mouseOver 10490833 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490833 894 445 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.462111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(894@445.0) (898@433) mouseEnter 10490848 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(894@445.0) (898@433) mouseEnter 10490848 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490848
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(898@433)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(894@445.0)
		trail: 	{(896@440). (898@433)}


MouseMoveEvent>>sentTo:
	Receiver: [(894@445.0) (898@433) mouseEnter 10490848 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490848
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(898@433)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(894@445.0)
		trail: 	{(896@440). (898@433)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		originalEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		asMouseEnterEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		asMouseEnterEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		evt: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(898@433.0) corner: (914@449.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(898@433.0) corner: (914@449.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(898@433) mouseOver 10490848 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490848 896 440 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		evtBuf: 	#(1 10490848 896 440 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(898@433.0) corner: (914@449.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(898@433.0) corner: (914@449.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(898@433) mouseOver 10490848 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490848 896 440 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(898@433.0) corner: (914@449.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(898@433.0) corner: (914@449.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(898@433) mouseOver 10490848 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490848 896 440 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.502111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(898@433.0) (903@418) mouseEnter 10490880 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(898@433.0) (903@418) mouseEnter 10490880 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490880
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(903@418)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(898@433.0)
		trail: 	{(901@426). (903@418)}


MouseMoveEvent>>sentTo:
	Receiver: [(898@433.0) (903@418) mouseEnter 10490880 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490880
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(903@418)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(898@433.0)
		trail: 	{(901@426). (903@418)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		originalEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		asMouseEnterEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		asMouseEnterEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		evt: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(903@418.0) corner: (919@434.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(903@418.0) corner: (919@434.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(903@418) mouseOver 10490880 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490880 901 426 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		evtBuf: 	#(1 10490880 901 426 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(903@418.0) corner: (919@434.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(903@418.0) corner: (919@434.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(903@418) mouseOver 10490880 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490880 901 426 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(903@418.0) corner: (919@434.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(903@418.0) corner: (919@434.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(903@418) mouseOver 10490880 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490880 901 426 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.540111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(903@418.0) (908@403) mouseEnter 10490926 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(903@418.0) (908@403) mouseEnter 10490926 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490926
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(908@403)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(903@418.0)
		trail: 	{(906@410). (908@403)}


MouseMoveEvent>>sentTo:
	Receiver: [(903@418.0) (908@403) mouseEnter 10490926 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490926
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(908@403)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(903@418.0)
		trail: 	{(906@410). (908@403)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		originalEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		asMouseEnterEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		asMouseEnterEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		evt: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(908@403.0) corner: (924@419.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(908@403.0) corner: (924@419.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(908@403) mouseOver 10490926 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490926 906 410 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		evtBuf: 	#(1 10490926 906 410 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(908@403.0) corner: (924@419.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(908@403.0) corner: (924@419.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(908@403) mouseOver 10490926 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490926 906 410 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908@403.0) corner: (924@419.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(908@403.0) corner: (924@419.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(908@403) mouseOver 10490926 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490926 906 410 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.577111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(908@403.0) (909@392) mouseEnter 10490973 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(908@403.0) (909@392) mouseEnter 10490973 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490973
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(909@392)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(908@403.0)
		trail: 	{(908@397). (909@392)}


MouseMoveEvent>>sentTo:
	Receiver: [(908@403.0) (909@392) mouseEnter 10490973 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490973
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(909@392)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(908@403.0)
		trail: 	{(908@397). (909@392)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		originalEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		asMouseEnterEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		asMouseEnterEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		evt: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(909@392.0) corner: (925@408.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(909@392.0) corner: (925@408.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(909@392) mouseOver 10490973 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490973 908 397 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		evtBuf: 	#(1 10490973 908 397 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(909@392.0) corner: (925@408.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(909@392.0) corner: (925@408.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(909@392) mouseOver 10490973 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490973 908 397 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(909@392.0) corner: (925@408.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(909@392.0) corner: (925@408.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(909@392) mouseOver 10490973 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490973 908 397 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.614111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(909@392.0) (912@385) mouseEnter 10491004 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(909@392.0) (912@385) mouseEnter 10491004 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491004
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@385)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(909@392.0)
		trail: 	{(911@387). (912@385)}


MouseMoveEvent>>sentTo:
	Receiver: [(909@392.0) (912@385) mouseEnter 10491004 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491004
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@385)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(909@392.0)
		trail: 	{(911@387). (912@385)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		originalEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		asMouseEnterEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		asMouseEnterEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		evt: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(912@385.0) corner: (928@401.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@385.0) corner: (928@401.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@385) mouseOver 10491004 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491004 911 387 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		evtBuf: 	#(1 10491004 911 387 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@385.0) corner: (928@401.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@385.0) corner: (928@401.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@385) mouseOver 10491004 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491004 911 387 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@385.0) corner: (928@401.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@385.0) corner: (928@401.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@385) mouseOver 10491004 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491004 911 387 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.650111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@385.0) (912@382) mouseEnter 10491036 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(912@385.0) (912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@385.0)
		trail: 	{(912@383). (912@382)}


MouseMoveEvent>>sentTo:
	Receiver: [(912@385.0) (912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@385.0)
		trail: 	{(912@383). (912@382)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		originalEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		asMouseEnterEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		asMouseEnterEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		evt: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		evtBuf: 	#(1 10491036 912 383 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.685111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@382) mouseEnter 10491036 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
		originalEvent: 	[(912@382) mouseOver 10491036 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'W']
		evt: 	[keyDown 'W']
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'W']
		evtBuf: 	#(2 10491098 87 1 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.722111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@382) mouseEnter 10491036 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
		originalEvent: 	[(912@382) mouseOver 10491036 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		evt: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'w']
		evtBuf: 	#(2 10491114 119 0 0 119 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.756111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@382.0) (913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(912@382.0) (913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@382.0)
		trail: 	{(913@382)}


MouseMoveEvent>>sentTo:
	Receiver: [(912@382.0) (913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@382.0)
		trail: 	{(913@382)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		asMouseEnterEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		asMouseEnterEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		evt: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		evtBuf: 	#(1 10491098 913 382 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.791111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10491145 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.826111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10491145 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.861111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'D']
		evt: 	[keyDown 'D']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'D']
		evtBuf: 	#(2 10491192 68 1 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.894111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 10491207 100 0 0 100 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.929111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'W']
		evt: 	[keyUp 'W']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'W']
		evtBuf: 	#(2 10491238 87 2 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.964111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10491285 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.997111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'D']
		evt: 	[keyUp 'D']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'D']
		evtBuf: 	#(2 10491363 68 2 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.031111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10491379 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.066111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10491394 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.100111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'S']
		evt: 	[keyDown 'S']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'S']
		evtBuf: 	#(2 10491488 83 1 0 83 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.137111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 's']
		evtBuf: 	#(2 10491488 115 0 0 115 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.174111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382.0) (890@375) mouseEnter 10491550 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(913@382.0) (890@375) mouseEnter 10491550 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491550
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(890@375)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(913@382.0)
		trail: 	{(906@380). (890@375)}


MouseMoveEvent>>sentTo:
	Receiver: [(913@382.0) (890@375) mouseEnter 10491550 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491550
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(890@375)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(913@382.0)
		trail: 	{(906@380). (890@375)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		originalEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		asMouseEnterEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		asMouseEnterEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		evt: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		evtBuf: 	#(1 10491550 906 380 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.212111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(890@375) mouseEnter 10491550 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(890@375) mouseEnter 10491550 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491550
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(890@375)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseEnter 10491550 nil]
		originalEvent: 	[(890@375) mouseOver 10491550 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		asMouseEnterEvent: 	[(890@375) mouseEnter 10491550 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		asMouseEnterEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseOver 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10491566 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.250111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(890@375.0) (800@344) mouseEnter 10491566 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(890@375.0) (800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(890@375.0)
		trail: 	{(887@374). (856@364). (818@351). (800@344)}


MouseMoveEvent>>sentTo:
	Receiver: [(890@375.0) (800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(890@375.0)
		trail: 	{(887@374). (856@364). (818@351). (800@344)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		originalEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		asMouseEnterEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		asMouseEnterEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		evt: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		evtBuf: 	#(1 10491566 887 374 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.289111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(800@344) mouseEnter 10491566 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
		originalEvent: 	[(800@344) mouseOver 10491566 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'D']
		evt: 	[keyDown 'D']
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'D']
		evtBuf: 	#(2 10491613 68 1 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.324111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(800@344) mouseEnter 10491566 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
		originalEvent: 	[(800@344) mouseOver 10491566 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 10491628 100 0 0 100 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.362111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(800@344.0) (730@306) mouseEnter 10491628 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(800@344.0) (730@306) mouseEnter 10491628 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491628
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(730@306)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(800@344.0)
		trail: 	{(777@335). (746@318). (730@306)}


MouseMoveEvent>>sentTo:
	Receiver: [(800@344.0) (730@306) mouseEnter 10491628 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491628
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(730@306)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(800@344.0)
		trail: 	{(777@335). (746@318). (730@306)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		originalEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		asMouseEnterEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		asMouseEnterEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		evt: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		evtBuf: 	#(1 10491628 777 335 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.397111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(730@306) mouseEnter 10491628 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(730@306) mouseEnter 10491628 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491628
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(730@306)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseEnter 10491628 nil]
		originalEvent: 	[(730@306) mouseOver 10491628 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		asMouseEnterEvent: 	[(730@306) mouseEnter 10491628 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		asMouseEnterEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseOver 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'S']
		evt: 	[keyUp 'S']
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'S']
		evtBuf: 	#(2 10491660 83 2 0 83 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.435111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(730@306.0) (704@265) mouseEnter 10491660 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(730@306.0) (704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(730@306.0)
		trail: 	{(725@301). (712@285). (707@276). (706@271). (706@268). (705@266). (704@...etc...


MouseMoveEvent>>sentTo:
	Receiver: [(730@306.0) (704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(730@306.0)
		trail: 	{(725@301). (712@285). (707@276). (706@271). (706@268). (705@266). (704@...etc...


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		originalEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		asMouseEnterEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		asMouseEnterEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		evt: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		evtBuf: 	#(1 10491660 725 301 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.473111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(704@265) mouseEnter 10491660 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
		originalEvent: 	[(704@265) mouseOver 10491660 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10491784 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.507111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(704@265) mouseEnter 10491660 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
		originalEvent: 	[(704@265) mouseOver 10491660 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10491784 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.543111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(704@265.0) (703@262) mouseEnter 10491784 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(704@265.0) (703@262) mouseEnter 10491784 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491784
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(703@262)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(704@265.0)
		trail: 	{(704@264). (703@262)}


MouseMoveEvent>>sentTo:
	Receiver: [(704@265.0) (703@262) mouseEnter 10491784 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491784
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(703@262)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(704@265.0)
		trail: 	{(704@264). (703@262)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		originalEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		asMouseEnterEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		asMouseEnterEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		evt: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		evtBuf: 	#(1 10491784 704 264 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.599111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(703@262) mouseEnter 10491784 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(703@262) mouseEnter 10491784 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491784
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(703@262)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseEnter 10491784 nil]
		originalEvent: 	[(703@262) mouseOver 10491784 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		asMouseEnterEvent: 	[(703@262) mouseEnter 10491784 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		asMouseEnterEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseOver 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'D']
		evt: 	[keyUp 'D']
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'D']
		evtBuf: 	#(2 10491816 68 2 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.633111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(703@262.0) (694@253) mouseEnter 10491831 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(703@262.0) (694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(703@262.0)
		trail: 	{(701@260). (699@257). (696@255). (694@253)}


MouseMoveEvent>>sentTo:
	Receiver: [(703@262.0) (694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(703@262.0)
		trail: 	{(701@260). (699@257). (696@255). (694@253)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		originalEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		asMouseEnterEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		asMouseEnterEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		evt: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		evtBuf: 	#(1 10491831 701 260 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.668111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(694@253) mouseEnter 10491831 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
		originalEvent: 	[(694@253) mouseOver 10491831 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'W']
		evt: 	[keyDown 'W']
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'W']
		evtBuf: 	#(2 10491894 87 1 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.703111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(694@253) mouseEnter 10491831 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
		originalEvent: 	[(694@253) mouseOver 10491831 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		evt: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'w']
		evtBuf: 	#(2 10491909 119 0 0 119 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.737111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(694@253.0) (691@250) mouseEnter 10491909 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(694@253.0) (691@250) mouseEnter 10491909 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491909
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(691@250)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(694@253.0)
		trail: 	{(692@251). (691@250)}


MouseMoveEvent>>sentTo:
	Receiver: [(694@253.0) (691@250) mouseEnter 10491909 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491909
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(691@250)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(694@253.0)
		trail: 	{(692@251). (691@250)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		originalEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		asMouseEnterEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		asMouseEnterEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		evt: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		evtBuf: 	#(1 10491909 692 251 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.773111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(691@250) mouseEnter 10491909 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(691@250) mouseEnter 10491909 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491909
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(691@250)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseEnter 10491909 nil]
		originalEvent: 	[(691@250) mouseOver 10491909 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		asMouseEnterEvent: 	[(691@250) mouseEnter 10491909 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		asMouseEnterEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseOver 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10491909 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.809111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(691@250.0) (685@243) mouseEnter 10491925 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(691@250.0) (685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(691@250.0)
		trail: 	{(690@248). (688@245). (685@243)}


MouseMoveEvent>>sentTo:
	Receiver: [(691@250.0) (685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(691@250.0)
		trail: 	{(690@248). (688@245). (685@243)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		originalEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		asMouseEnterEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		asMouseEnterEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		evt: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		evtBuf: 	#(1 10491925 690 248 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.843111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(685@243) mouseEnter 10491925 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
		originalEvent: 	[(685@243) mouseOver 10491925 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'D']
		evt: 	[keyDown 'D']
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'D']
		evtBuf: 	#(2 10491972 68 1 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.879111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(685@243) mouseEnter 10491925 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
		originalEvent: 	[(685@243) mouseOver 10491925 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 10491987 100 0 0 100 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.916111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(685@243.0) (684@240) mouseEnter 10491987 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(685@243.0) (684@240) mouseEnter 10491987 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491987
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(684@240)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(685@243.0)
		trail: 	{(684@241). (684@240)}


MouseMoveEvent>>sentTo:
	Receiver: [(685@243.0) (684@240) mouseEnter 10491987 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491987
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(684@240)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(685@243.0)
		trail: 	{(684@241). (684@240)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		originalEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		asMouseEnterEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		asMouseEnterEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		evt: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		evtBuf: 	#(1 10491987 684 241 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.954111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(684@240) mouseEnter 10491987 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(684@240) mouseEnter 10491987 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491987
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(684@240)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseEnter 10491987 nil]
		originalEvent: 	[(684@240) mouseOver 10491987 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		asMouseEnterEvent: 	[(684@240) mouseEnter 10491987 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		asMouseEnterEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseOver 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'W']
		evt: 	[keyUp 'W']
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'W']
		evtBuf: 	#(2 10492003 87 2 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.992111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(684@240.0) (682@230) mouseEnter 10492018 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(684@240.0) (682@230) mouseEnter 10492018 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492018
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@230)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(684@240.0)
		trail: 	{(683@238). (682@236). (682@234). (682@232). (682@230)}


MouseMoveEvent>>sentTo:
	Receiver: [(684@240.0) (682@230) mouseEnter 10492018 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492018
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@230)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(684@240.0)
		trail: 	{(683@238). (682@236). (682@234). (682@232). (682@230)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		originalEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		asMouseEnterEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		asMouseEnterEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		evt: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		evtBuf: 	#(1 10492018 683 238 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.029111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@230) mouseEnter 10492018 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@230) mouseEnter 10492018 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492018
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@230)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseEnter 10492018 nil]
		originalEvent: 	[(682@230) mouseOver 10492018 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		asMouseEnterEvent: 	[(682@230) mouseEnter 10492018 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		asMouseEnterEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseOver 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'D']
		evt: 	[keyUp 'D']
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'D']
		evtBuf: 	#(2 10492096 68 2 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.064111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@230.0) (682@229) mouseEnter 10492096 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(682@230.0) (682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@230.0)
		trail: 	{(682@229)}


MouseMoveEvent>>sentTo:
	Receiver: [(682@230.0) (682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@230.0)
		trail: 	{(682@229)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		originalEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		asMouseEnterEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		asMouseEnterEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		evt: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		evtBuf: 	#(1 10492096 682 229 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.100111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@229) mouseEnter 10492096 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
		originalEvent: 	[(682@229) mouseOver 10492096 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10492096 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.134111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@229) mouseEnter 10492096 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
		originalEvent: 	[(682@229) mouseOver 10492096 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10492128 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.168111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@229.0) (682@228) mouseEnter 10492112 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(682@229.0) (682@228) mouseEnter 10492112 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492112
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@228)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@229.0)
		trail: 	{(682@228)}


MouseMoveEvent>>sentTo:
	Receiver: [(682@229.0) (682@228) mouseEnter 10492112 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492112
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@228)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@229.0)
		trail: 	{(682@228)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		originalEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		asMouseEnterEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		asMouseEnterEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		evt: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver 10492112 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492112 682 228 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		evtBuf: 	#(1 10492112 682 228 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver 10492112 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492112 682 228 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver 10492112 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492112 682 228 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseDown:
21 June 2017 7:55:26.205111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseDown:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseDown: [(682@228) mouseDown red 10492143 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseDown:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseDown:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handlerForMouseDown:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
		globalPt: 	(682@228)
		localEvt: 	nil
		index: 	nil
		child: 	nil
		morphs: 	nil
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(570172160)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseDown red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(682@228)
		handler: 	a SystemWindow(570172160)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


Morph>>processEvent:using:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a SystemWindow(570172160)
		globalPt: 	(682@228)
		localEvt: 	[(682@228) mouseDown red 10492143 nil]
		index: 	10
		child: 	a Morph(874255104)
		morphs: 	an Array(a WindowEdgeGripMorph(300386304) a WindowEdgeGripMorph(9344478...etc...
		handler: 	a SystemWindow(570172160)
		inside: 	nil
		lastHandler: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseDown red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(682@228)
		handler: 	a SystemWindow(570172160)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a SystemWindow(570172160)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a SystemWindow(570172160)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(570172160)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(609.0@168.0) corner: (1119.0@751.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(300386304) a WindowEdgeGripMorph(9344...etc...
		fullBounds: 	(609@168) corner: (1119@751)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (719618048) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		labelString: 	'Snake'
		stripes: 	an Array(a Morph(1068520192) a Morph(289011712))
		label: 	a LabelMorph(887724800)'Snake'
		closeBox: 	a MultistateButtonMorph(350220288)
		collapseBox: 	a MultistateButtonMorph(975594240)
		paneMorphs: 	an Array(a Morph(874255104))
		collapsedFrame: 	nil
		fullFrame: 	(609.0@168.0) corner: (1119.0@751.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(776890368)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(497986304)
		expandBox: 	a MultistateButtonMorph(914186240)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a WorldMorph(562956288) [world]
		globalPt: 	(682@228)
		localEvt: 	[(682@228) mouseDown red 10492143 nil]
		index: 	3
		child: 	a SystemWindow(570172160)
		morphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWindo...etc...
		handler: 	a WorldMorph(562956288) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseDown red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(682@228)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		evt: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@228) mouseDown red 10492143 nil]
		evtBuf: 	#(1 10492143 682 228 4 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseDown:
Morph>>handlesMouseDown:
Morph>>handlerForMouseDown:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOverDragging:
21 June 2017 7:55:26.266111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOverDragging: [(682@228) mouseEnter red 10492143 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOverDragging:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOverDragging:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseButtonEvent(MouseEvent)>>sentTo:
	Receiver: [(682@228) mouseEnter red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@228)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	4


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseEnter red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@228)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	4


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseEnter red 10492143 nil]
		originalEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseEnter red 10492143 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseEnter red 10492143 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		asMouseEnterEvent: 	[(682@228) mouseEnter red 10492143 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		asMouseEnterEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	nil
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
Morph>>handlesMouseOverDragging:
Morph>>handleMouseEnter:
MouseButtonEvent(MouseEvent)>>sentTo:
MouseButtonEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOverDragging:
21 June 2017 7:55:26.300111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOverDragging: [(682@228.0) (682@227) mouseEnter red 10492...etc...
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOverDragging:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOverDragging:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492159
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@228.0)
		trail: 	{(682@227)}


MouseMoveEvent>>sentTo:
	Receiver: [(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492159
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@228.0)
		trail: 	{(682@227)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		originalEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		asMouseEnterEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		asMouseEnterEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		evt: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		evtBuf: 	#(1 10492159 682 227 4 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
Morph>>handlesMouseOverDragging:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOverDragging:
21 June 2017 7:55:26.335111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOverDragging: [(682@227) mouseEnter red 10492159 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOverDragging:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOverDragging:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@227) mouseEnter red 10492159 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492159
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter red 10492159 nil]
		originalEvent: 	[(682@227) mouseOver red 10492159 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter red 10492159 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10492174 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
Morph>>handlesMouseOverDragging:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.369111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@227) mouseEnter 10492221 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseButtonEvent(MouseEvent)>>sentTo:
	Receiver: [(682@227) mouseEnter 10492221 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492221
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


MouseButtonEvent>>sentTo:
	Receiver: [(682@227) mouseEnter 10492221 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492221
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter 10492221 nil]
		originalEvent: 	[(682@227) mouseUp 10492221 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter 10492221 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter 10492221 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter 10492221 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		evt: 	[(682@227) mouseUp 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver 10492221 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492221 682 227 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@227) mouseUp 10492221 nil]
		evtBuf: 	#(1 10492221 682 227 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver 10492221 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492221 682 227 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver 10492221 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492221 682 227 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseButtonEvent(MouseEvent)>>sentTo:
MouseButtonEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:38.581111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(608@558.0) (627@514) mouseEnter 10504982 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(608@558.0) (627@514) mouseEnter 10504982 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10504982
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(627@514)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(608@558.0)
		trail: 	{(610@554). (612@549). (614@545). (616@541). (618@536). (620@531). (621@...etc...


MouseMoveEvent>>sentTo:
	Receiver: [(608@558.0) (627@514) mouseEnter 10504982 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10504982
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(627@514)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(608@558.0)
		trail: 	{(610@554). (612@549). (614@545). (616@541). (618@536). (620@531). (621@...etc...


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		originalEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		asMouseEnterEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		asMouseEnterEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		evt: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(627@514.0) corner: (643@530.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@514.0) corner: (643@530.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@514) mouseOver 10504982 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10504982 610 554 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		evtBuf: 	#(1 10504982 610 554 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(627@514.0) corner: (643@530.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@514.0) corner: (643@530.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@514) mouseOver 10504982 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10504982 610 554 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(627@514.0) corner: (643@530.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@514.0) corner: (643@530.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@514) mouseOver 10504982 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10504982 610 554 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:38.622111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(627@514.0) (641@429) mouseEnter 10505013 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(627@514.0) (641@429) mouseEnter 10505013 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505013
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(641@429)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(627@514.0)
		trail: 	{(636@478). (641@429)}


MouseMoveEvent>>sentTo:
	Receiver: [(627@514.0) (641@429) mouseEnter 10505013 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505013
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(641@429)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(627@514.0)
		trail: 	{(636@478). (641@429)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		originalEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		asMouseEnterEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		asMouseEnterEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		evt: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(641@429.0) corner: (657@445.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(641@429.0) corner: (657@445.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(641@429) mouseOver 10505013 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505013 636 478 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		evtBuf: 	#(1 10505013 636 478 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(641@429.0) corner: (657@445.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(641@429.0) corner: (657@445.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(641@429) mouseOver 10505013 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505013 636 478 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(641@429.0) corner: (657@445.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(641@429.0) corner: (657@445.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(641@429) mouseOver 10505013 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505013 636 478 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:38.660111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(641@429.0) (626@315) mouseEnter 10505044 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(641@429.0) (626@315) mouseEnter 10505044 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505044
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(626@315)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(641@429.0)
		trail: 	{(637@368). (626@315)}


MouseMoveEvent>>sentTo:
	Receiver: [(641@429.0) (626@315) mouseEnter 10505044 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505044
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(626@315)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(641@429.0)
		trail: 	{(637@368). (626@315)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		originalEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		asMouseEnterEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		asMouseEnterEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		evt: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(626@315.0) corner: (642@331.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@315.0) corner: (642@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@315) mouseOver 10505044 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505044 637 368 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		evtBuf: 	#(1 10505044 637 368 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(626@315.0) corner: (642@331.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@315.0) corner: (642@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@315) mouseOver 10505044 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505044 637 368 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(626@315.0) corner: (642@331.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@315.0) corner: (642@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@315) mouseOver 10505044 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505044 637 368 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:59:26.998111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2933516
		lastStepMessage: 	nil
		lastCycleTime: 	2933537
		alarms: 	a Heap()
		lastAlarmTime: 	2933516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

