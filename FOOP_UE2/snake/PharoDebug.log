THERE_BE_DRAGONS_HERE

19 June 2017 5:04:20.750576 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@164)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(463405824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@164)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(0@111) corner: (16@127)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(0@111) mouseOver 21290454 nil]
		targetOffset: 	(237@88)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21290454 6 120 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@111) corner: (16@127)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(0@111) mouseOver 21290454 nil]
		targetOffset: 	(237@88)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21290454 6 120 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	431494
		lastStepMessage: 	nil
		lastCycleTime: 	431515
		alarms: 	a Heap()
		lastAlarmTime: 	431494
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 5:19:15.992576 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1326882
		lastStepMessage: 	nil
		lastCycleTime: 	1326904
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1326882
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T16:57:08.910576+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 6:18:19.888092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(172439296) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(720@383) corner: (736@399)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(720@383) mouseOver 22190409 nil]
		targetOffset: 	(216@30)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22190409 722 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1326882
		lastStepMessage: 	nil
		lastCycleTime: 	1326904
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1326882
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 6:35:07.217092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@221)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(799757824) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@221)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(629@307) corner: (645@323)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@307) mouseOver 2912991 nil]
		targetOffset: 	(318@174)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2912991 620 307 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(629@307) corner: (645@323)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@307) mouseOver 2912991 nil]
		targetOffset: 	(318@174)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2912991 620 307 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1007187
		lastStepMessage: 	nil
		lastCycleTime: 	1007208
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1007187
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

19 June 2017 6:50:05.402092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@316)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19681280) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@316)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(545@503) corner: (561@519)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(545@503) mouseOver CTRL 3811151 nil]
		targetOffset: 	(279@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3811104 545 503 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(545@503) corner: (561@519)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(545@503) mouseOver CTRL 3811151 nil]
		targetOffset: 	(279@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3811104 545 503 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1905324
		lastStepMessage: 	nil
		lastCycleTime: 	1905344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	1905324
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-19T18:18:19.779092+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TicTacToeModel did not understand #checkWinConditionInSet:
19 June 2017 6:51:08.569092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
	Receiver: ('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
	Arguments and temporary variables: 
		aMessage: 	checkWinConditionInSet: a Set('O' 'X')
		exception: 	MessageNotUnderstood: TicTacToeModel>>checkWinConditionInSet:
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	#('X' 'X' 'O' nil 'O' nil nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinConditionInRow:
	Receiver: ('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
	Arguments and temporary variables: 
		row: 	1
		set: 	a Set('O' 'X')
	Receiver's instance variables: 
		contents: 	#('X' 'X' 'O' nil 'O' nil nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinCondition
	Receiver: ('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
	Arguments and temporary variables: 
		idx: 	1
	Receiver's instance variables: 
		contents: 	#('X' 'X' 'O' nil 'O' nil nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
	Receiver: a TicTacToeCell(151953408)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(424.0@384.0) corner: (439.0@407.0)
		owner: 	a Morph(525559808)
		submorphs: 	an Array(a StringMorph(547852288)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (419952640) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(547852288)'X'
		parent: 	('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
		row: 	1
		column: 	2


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(482@430) mouseDown red 3875470 nil]
		sourceMorph: 	a TicTacToeCell(151953408)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(482@430) mouseDown red 3875470 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(151953408)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	4
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a MorphEventSubscription nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(482@430) mouseDown red 3875470 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(151953408)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(482@430) mouseDown red 3875470 nil]
		sourceMorph: 	a TicTacToeCell(151953408)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


TicTacToeCell(Morph)>>click:
	Receiver: a TicTacToeCell(151953408)
	Arguments and temporary variables: 
		evt: 	[(482@430) mouseDown red 3875470 nil]
	Receiver's instance variables: 
		bounds: 	(424.0@384.0) corner: (439.0@407.0)
		owner: 	a Morph(525559808)
		submorphs: 	an Array(a StringMorph(547852288)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (419952640) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(547852288)'X'
		parent: 	('X' 'X' 'O'
nil 'O' nil
nil nil 'X' )
		row: 	1
		column: 	2


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(151953408)
		clickState: 	#firstClickUp
		firstClickDown: 	[(482@430) mouseDown red 3875470 nil]
		firstClickUp: 	[(482@430) mouseUp 3875564 nil]
		firstClickTime: 	3875470
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1968880


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(482@430) mouseUp 3875564 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(482@430) mouseUp 3875564 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(151953408)
		clickState: 	#firstClickUp
		firstClickDown: 	[(482@430) mouseDown red 3875470 nil]
		firstClickUp: 	[(482@430) mouseUp 3875564 nil]
		firstClickTime: 	3875470
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1968880


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(482@430) mouseUp 3875564 nil]
		evt: 	[(482@430) mouseUp 3875564 nil]
	Receiver's instance variables: 
		bounds: 	(482@430) corner: (498@446)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(482@430) corner: (498@446)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(151953408)
		keyboardFocus: 	a SystemWindow(605392384)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(482@430) mouseUp 3875564 nil]
		targetOffset: 	(58.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3875564 482 430 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(482@430) mouseUp 3875564 nil]
		evtBuf: 	#(1 3875564 482 430 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(482@430) corner: (498@446)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(482@430) corner: (498@446)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(151953408)
		keyboardFocus: 	a SystemWindow(605392384)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(482@430) mouseUp 3875564 nil]
		targetOffset: 	(58.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3875564 482 430 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(482@430) corner: (498@446)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(482@430) corner: (498@446)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(151953408)
		keyboardFocus: 	a SystemWindow(605392384)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(482@430) mouseUp 3875564 nil]
		targetOffset: 	(58.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3875564 482 430 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1968964
		lastStepMessage: 	nil
		lastCycleTime: 	1968985
		alarms: 	a Heap()
		lastAlarmTime: 	1968964
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
TicTacToeModel>>checkWinConditionInRow:
TicTacToeModel>>checkWinCondition
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
TicTacToeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------THERE_BE_DRAGONS_HERE
Instance of TicTacToeModel did not understand #checkWinConditionInSet:
19 June 2017 6:51:54.235092 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
	Receiver: ('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
	Arguments and temporary variables: 
		aMessage: 	checkWinConditionInSet: a Set('O' nil 'X')
		exception: 	MessageNotUnderstood: TicTacToeModel>>checkWinConditionInSet:
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	#('X' nil 'O' nil 'X' 'O' nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinConditionInRow:
	Receiver: ('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
	Arguments and temporary variables: 
		row: 	1
		set: 	a Set('O' nil 'X')
	Receiver's instance variables: 
		contents: 	#('X' nil 'O' nil 'X' 'O' nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


TicTacToeModel>>checkWinCondition
	Receiver: ('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
	Arguments and temporary variables: 
		idx: 	1
	Receiver's instance variables: 
		contents: 	#('X' nil 'O' nil 'X' 'O' nil nil 'X')
		numberOfColumns: 	3
		numberOfRows: 	3
		filledCells: 	5
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
	Receiver: a TicTacToeCell(466208256)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(745.0@413.0) corner: (760.0@436.0)
		owner: 	a Morph(181661696)
		submorphs: 	an Array(a StringMorph(103371264)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (49251840) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(103371264)'X'
		parent: 	('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
		row: 	1
		column: 	1


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(770@473) mouseDown red 3921163 nil]
		sourceMorph: 	a TicTacToeCell(466208256)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(770@473) mouseDown red 3921163 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(466208256)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(770@473) mouseDown red 3921163 nil]
		eventType: 	#click
		sourceMorph: 	a TicTacToeCell(466208256)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(770@473) mouseDown red 3921163 nil]
		sourceMorph: 	a TicTacToeCell(466208256)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


TicTacToeCell(Morph)>>click:
	Receiver: a TicTacToeCell(466208256)
	Arguments and temporary variables: 
		evt: 	[(770@473) mouseDown red 3921163 nil]
	Receiver's instance variables: 
		bounds: 	(745.0@413.0) corner: (760.0@436.0)
		owner: 	a Morph(181661696)
		submorphs: 	an Array(a StringMorph(103371264)'X')
		fullBounds: 	nil
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (49251840) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(103371264)'X'
		parent: 	('X' nil 'O'
nil 'X' 'O'
nil nil 'X' )
		row: 	1
		column: 	1


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(466208256)
		clickState: 	#firstClickUp
		firstClickDown: 	[(770@473) mouseDown red 3921163 nil]
		firstClickUp: 	[(770@473) mouseUp 3921256 nil]
		firstClickTime: 	3921163
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2014582


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(770@473) mouseUp 3921256 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(770@473) mouseUp 3921256 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a TicTacToeCell(466208256)
		clickState: 	#firstClickUp
		firstClickDown: 	[(770@473) mouseDown red 3921163 nil]
		firstClickUp: 	[(770@473) mouseUp 3921256 nil]
		firstClickTime: 	3921163
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2014582


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(770@473) mouseUp 3921256 nil]
		evt: 	[(770@473) mouseUp 3921256 nil]
	Receiver's instance variables: 
		bounds: 	(770@473) corner: (786@489)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(770@473) corner: (786@489)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(466208256)
		keyboardFocus: 	a SystemWindow(563448832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(770@473) mouseUp 3921256 nil]
		targetOffset: 	(25.0@60.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3921256 770 473 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(770@473) mouseUp 3921256 nil]
		evtBuf: 	#(1 3921256 770 473 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(770@473) corner: (786@489)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(770@473) corner: (786@489)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(466208256)
		keyboardFocus: 	a SystemWindow(563448832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(770@473) mouseUp 3921256 nil]
		targetOffset: 	(25.0@60.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3921256 770 473 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(770@473) corner: (786@489)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(770@473) corner: (786@489)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a TicTacToeCell(466208256)
		keyboardFocus: 	a SystemWindow(563448832)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(770@473) mouseUp 3921256 nil]
		targetOffset: 	(25.0@60.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3921256 770 473 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2014645
		lastStepMessage: 	nil
		lastCycleTime: 	2014666
		alarms: 	a Heap()
		lastAlarmTime: 	2014645
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TicTacToeModel(Object)>>doesNotUnderstand: #checkWinConditionInSet:
TicTacToeModel>>checkWinConditionInRow:
TicTacToeModel>>checkWinCondition
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in TicTacToeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
TicTacToeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#adaptToNumber:andSend: was sent to nil
21 June 2017 5:10:20.139448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 3 andSend: #'<='
		exception: 	MessageNotUnderstood: receiver of "adaptToNumber:andSend:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andSend:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	3
		selector: 	#'<='
	Receiver's instance variables: 
nil

UndefinedObject(Object)>>adaptToInteger:andCompare:
	Receiver: nil
	Arguments and temporary variables: 
		rcvr: 	3
		selector: 	#'<='
	Receiver's instance variables: 
nil

SmallInteger(Integer)>><=
	Receiver: 3
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
3

SmallInteger>><=
	Receiver: 3
	Arguments and temporary variables: 
		aNumber: 	nil
	Receiver's instance variables: 
3

SmallInteger(Magnitude)>>between:and:
	Receiver: 3
	Arguments and temporary variables: 
		min: 	1
		max: 	nil
	Receiver's instance variables: 
3

SnakeModel(Matrix)>>indexForRow:andColumn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		row: 	3
		column: 	3
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel(Matrix)>>at:at:put:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		rowNumber: 	3
		columnNumber: 	3
		value: 	'X'
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel>>updateAtRow:col:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		row: 	3
		col: 	3
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		filledCells: 	0
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
	Receiver: a SnakeCell(483847424)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(709.0@312.0) corner: (789.0@392.0)
		owner: 	a Morph(592519168)
		submorphs: 	an Array(a StringMorph(838343936)'')
		fullBounds: 	(709.0@312.0) corner: (789.0@392.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (409544704) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(838343936)''
		parent: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(773@358) mouseDown red 586438 nil]
		sourceMorph: 	a SnakeCell(483847424)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(773@358) mouseDown red 586438 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(483847424)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(773@358) mouseDown red 586438 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(483847424)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(773@358) mouseDown red 586438 nil]
		sourceMorph: 	a SnakeCell(483847424)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SnakeCell(Morph)>>click:
	Receiver: a SnakeCell(483847424)
	Arguments and temporary variables: 
		evt: 	[(773@358) mouseDown red 586438 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@312.0) corner: (789.0@392.0)
		owner: 	a Morph(592519168)
		submorphs: 	an Array(a StringMorph(838343936)'')
		fullBounds: 	(709.0@312.0) corner: (789.0@392.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (409544704) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(838343936)''
		parent: 	<<error during printing>>

MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SnakeCell(483847424)
		clickState: 	#firstClickUp
		firstClickDown: 	[(773@358) mouseDown red 586438 nil]
		firstClickUp: 	[(772@358) mouseUp 586516 nil]
		firstClickTime: 	586438
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	330844


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(772@358) mouseUp 586516 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(772@358) mouseUp 586516 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SnakeCell(483847424)
		clickState: 	#firstClickUp
		firstClickDown: 	[(773@358) mouseDown red 586438 nil]
		firstClickUp: 	[(772@358) mouseUp 586516 nil]
		firstClickTime: 	586438
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	330844


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(772@358) mouseUp 586516 nil]
		evt: 	[(772@358) mouseUp 586516 nil]
	Receiver's instance variables: 
		bounds: 	(773@358) corner: (789@374)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(773@358) corner: (789@374)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(483847424)
		keyboardFocus: 	a SystemWindow(1065829632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@358) mouseUp 586516 nil]
		targetOffset: 	(64.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 586516 772 358 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(772@358) mouseUp 586516 nil]
		evtBuf: 	#(1 586516 772 358 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(773@358) corner: (789@374)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(773@358) corner: (789@374)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(483847424)
		keyboardFocus: 	a SystemWindow(1065829632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@358) mouseUp 586516 nil]
		targetOffset: 	(64.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 586516 772 358 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(773@358) corner: (789@374)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(773@358) corner: (789@374)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(483847424)
		keyboardFocus: 	a SystemWindow(1065829632)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(772@358) mouseUp 586516 nil]
		targetOffset: 	(64.0@46.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 586516 772 358 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	330907
		lastStepMessage: 	nil
		lastCycleTime: 	330928
		alarms: 	a Heap()
		lastAlarmTime: 	330907
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#close was sent to nil
21 June 2017 5:21:34.938448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #close
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: receiver of "close" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ container delete.
container window close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(870059264)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(749@277) mouseDown red 1261268 nil]
		sourceMorph: 	a SimpleButtonMorph(571102464)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ container delete.
container window close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(749@277) mouseDown red 1261268 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(571102464)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(749@277) mouseDown red 1261268 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(571102464)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(749@277) mouseDown red 1261268 nil]
		sourceMorph: 	a SimpleButtonMorph(571102464)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(571102464)
	Arguments and temporary variables: 
		evt: 	[(749@277) mouseDown red 1261268 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(185060608)
		submorphs: 	an Array(a StringMorph(756960256)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (538967296) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(756960256)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(571102464)
		clickState: 	#firstClickUp
		firstClickDown: 	[(749@277) mouseDown red 1261268 nil]
		firstClickUp: 	[(749@277) mouseUp 1261346 nil]
		firstClickTime: 	1261268
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1005662


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(749@277) mouseUp 1261346 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(749@277) mouseUp 1261346 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(571102464)
		clickState: 	#firstClickUp
		firstClickDown: 	[(749@277) mouseDown red 1261268 nil]
		firstClickUp: 	[(749@277) mouseUp 1261346 nil]
		firstClickTime: 	1261268
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1005662


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(749@277) mouseUp 1261346 nil]
		evt: 	[(749@277) mouseUp 1261346 nil]
	Receiver's instance variables: 
		bounds: 	(749@277) corner: (765@293)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(749@277) corner: (765@293)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(571102464)
		keyboardFocus: 	a SystemWindow(704911360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(749@277) mouseUp 1261346 nil]
		targetOffset: 	(40.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1261346 749 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(749@277) mouseUp 1261346 nil]
		evtBuf: 	#(1 1261346 749 277 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(749@277) corner: (765@293)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(749@277) corner: (765@293)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(571102464)
		keyboardFocus: 	a SystemWindow(704911360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(749@277) mouseUp 1261346 nil]
		targetOffset: 	(40.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1261346 749 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(749@277) corner: (765@293)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(749@277) corner: (765@293)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(571102464)
		keyboardFocus: 	a SystemWindow(704911360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(749@277) mouseUp 1261346 nil]
		targetOffset: 	(40.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1261346 749 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1005725
		lastStepMessage: 	nil
		lastCycleTime: 	1005746
		alarms: 	a Heap()
		lastAlarmTime: 	1005725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #close
[ container delete.
container window close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #onClickExecution
21 June 2017 5:24:47.904448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
	Receiver: a SnakeCell(73754624)
	Arguments and temporary variables: 
		aMessage: 	onClickExecution
		exception: 	MessageNotUnderstood: SnakeCell>>onClickExecution
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(496976128)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (43361280)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(496976128)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell>>initialize
	Receiver: a SnakeCell(73754624)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(496976128)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (43361280)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(496976128)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell class(Behavior)>>new
	Receiver: SnakeCell
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SimpleButtonMorph
		methodDict: 	a MethodDictionary(#initialize->SnakeCell>>#initialize #setModel:ro...etc...
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


Snake>>addRows
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	a Morph(21888256)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(659441664)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake>>initialize
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(659441664)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake class(Behavior)>>new
	Receiver: Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->Snake>>#addControls #addRows->Snak...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Snake
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(70034432))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(294@36)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1198682
		lastStepMessage: 	nil
		lastCycleTime: 	1198702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1198682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1198682
		lastStepMessage: 	nil
		lastCycleTime: 	1198702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1198682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1198682
		lastStepMessage: 	nil
		lastCycleTime: 	1198702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1198682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
SnakeCell>>initialize
SnakeCell class(Behavior)>>new
Snake>>addRows
Snake>>initialize
Snake class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #onClickExecution
21 June 2017 5:27:04.908448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
	Receiver: a SnakeCell(39478528)
	Arguments and temporary variables: 
		aMessage: 	onClickExecution
		exception: 	MessageNotUnderstood: SnakeCell>>onClickExecution
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1020141568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (10963200)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1020141568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell>>initialize
	Receiver: a SnakeCell(39478528)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1020141568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (10963200)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1020141568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell class(Behavior)>>new
	Receiver: SnakeCell
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SimpleButtonMorph
		methodDict: 	a MethodDictionary(#initialize->SnakeCell>>#initialize #setModel:ro...etc...
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


Snake>>addRows
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	a Morph(651877376)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(716303616)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake>>initialize
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(716303616)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake class(Behavior)>>new
	Receiver: Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->Snake>>#addControls #addRows->Snak...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Snake
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(357594368))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(294@36)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1335691
		lastStepMessage: 	nil
		lastCycleTime: 	1335712
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1335691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1335691
		lastStepMessage: 	nil
		lastCycleTime: 	1335712
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1335691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1335691
		lastStepMessage: 	nil
		lastCycleTime: 	1335712
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1335691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
SnakeCell>>initialize
SnakeCell class(Behavior)>>new
Snake>>addRows
Snake>>initialize
Snake class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #onClickExecution
21 June 2017 5:28:27.337448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
	Receiver: a SnakeCell(485533952)
	Arguments and temporary variables: 
		aMessage: 	onClickExecution
		exception: 	MessageNotUnderstood: SnakeCell>>onClickExecution
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1008237568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (730156288)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1008237568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell>>initialize
	Receiver: a SnakeCell(485533952)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (80@80)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(1008237568)'')
		fullBounds: 	nil
		color: 	Color yellow
		extension: 	a MorphExtension (730156288)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(1008237568)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeCell class(Behavior)>>new
	Receiver: SnakeCell
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	SimpleButtonMorph
		methodDict: 	a MethodDictionary(#initialize->SnakeCell>>#initialize #setModel:ro...etc...
		format: 	65553
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeCell
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


Snake>>addRows
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	a Morph(1018394624)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(714846464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake>>initialize
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(714846464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


Snake class(Behavior)>>new
	Receiver: Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->Snake>>#addControls #addRows->Snak...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#Snake
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(278771968))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(294@36)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1418120
		lastStepMessage: 	nil
		lastCycleTime: 	1418142
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1418120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1418120
		lastStepMessage: 	nil
		lastCycleTime: 	1418142
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1418120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1418120
		lastStepMessage: 	nil
		lastCycleTime: 	1418142
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1418120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #onClickExecution
SnakeCell>>initialize
SnakeCell class(Behavior)>>new
Snake>>addRows
Snake>>initialize
Snake class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:03.690448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(761@294) mouseDown red 1889998 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(761@294) mouseDown red 1889998 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(761@294) mouseDown red 1889998 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(761@294) mouseDown red 1889998 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(761@294) mouseDown red 1889998 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(761@294) mouseDown red 1889998 nil]
		firstClickUp: 	[(761@294) mouseUp 1890092 nil]
		firstClickTime: 	1889998
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1634413


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(761@294) mouseUp 1890092 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(761@294) mouseUp 1890092 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(761@294) mouseDown red 1889998 nil]
		firstClickUp: 	[(761@294) mouseUp 1890092 nil]
		firstClickTime: 	1889998
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1634413


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(761@294) mouseUp 1890092 nil]
		evt: 	[(761@294) mouseUp 1890092 nil]
	Receiver's instance variables: 
		bounds: 	(761@294) corner: (777@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(761@294) corner: (777@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a SystemWindow(491309312)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(761@294) mouseUp 1890092 nil]
		targetOffset: 	(52.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1890092 761 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(761@294) mouseUp 1890092 nil]
		evtBuf: 	#(1 1890092 761 294 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(761@294) corner: (777@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(761@294) corner: (777@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a SystemWindow(491309312)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(761@294) mouseUp 1890092 nil]
		targetOffset: 	(52.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1890092 761 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(761@294) corner: (777@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(761@294) corner: (777@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a SystemWindow(491309312)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(761@294) mouseUp 1890092 nil]
		targetOffset: 	(52.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1890092 761 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1634478
		lastStepMessage: 	nil
		lastCycleTime: 	1634499
		alarms: 	a Heap()
		lastAlarmTime: 	1634478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:06.100448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(860@326) mouseDown red 1892416 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(860@326) mouseDown red 1892416 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(860@326) mouseDown red 1892416 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(860@326) mouseDown red 1892416 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(860@326) mouseDown red 1892416 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(860@326) mouseDown red 1892416 nil]
		firstClickUp: 	[(860@326) mouseUp 1892510 nil]
		firstClickTime: 	1892416
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1636832


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(860@326) mouseUp 1892510 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(860@326) mouseUp 1892510 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(860@326) mouseDown red 1892416 nil]
		firstClickUp: 	[(860@326) mouseUp 1892510 nil]
		firstClickTime: 	1892416
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1636832


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(860@326) mouseUp 1892510 nil]
		evt: 	[(860@326) mouseUp 1892510 nil]
	Receiver's instance variables: 
		bounds: 	(860@326) corner: (876@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(860@326) corner: (876@342)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(547034112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(860@326) mouseUp 1892510 nil]
		targetOffset: 	(151.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1892510 860 326 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(860@326) mouseUp 1892510 nil]
		evtBuf: 	#(1 1892510 860 326 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(860@326) corner: (876@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(860@326) corner: (876@342)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(547034112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(860@326) mouseUp 1892510 nil]
		targetOffset: 	(151.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1892510 860 326 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(860@326) corner: (876@342)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(860@326) corner: (876@342)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(547034112)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(860@326) mouseUp 1892510 nil]
		targetOffset: 	(151.0@64.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1892510 860 326 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1636896
		lastStepMessage: 	nil
		lastCycleTime: 	1636916
		alarms: 	a Heap()
		lastAlarmTime: 	1636896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:08.029448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(887@345) mouseDown red 1894351 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(887@345) mouseDown red 1894351 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(887@345) mouseDown red 1894351 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(887@345) mouseDown red 1894351 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(887@345) mouseDown red 1894351 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(887@345) mouseDown red 1894351 nil]
		firstClickUp: 	[(887@345) mouseUp 1894444 nil]
		firstClickTime: 	1894351
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1638758


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(887@345) mouseUp 1894444 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(887@345) mouseUp 1894444 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(887@345) mouseDown red 1894351 nil]
		firstClickUp: 	[(887@345) mouseUp 1894444 nil]
		firstClickTime: 	1894351
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1638758


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(887@345) mouseUp 1894444 nil]
		evt: 	[(887@345) mouseUp 1894444 nil]
	Receiver's instance variables: 
		bounds: 	(887@345) corner: (903@361)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(887@345) corner: (903@361)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(586070016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(887@345) mouseUp 1894444 nil]
		targetOffset: 	(178.0@83.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1894444 887 345 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(887@345) mouseUp 1894444 nil]
		evtBuf: 	#(1 1894444 887 345 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(887@345) corner: (903@361)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(887@345) corner: (903@361)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(586070016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(887@345) mouseUp 1894444 nil]
		targetOffset: 	(178.0@83.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1894444 887 345 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(887@345) corner: (903@361)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(887@345) corner: (903@361)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(586070016)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(887@345) mouseUp 1894444 nil]
		targetOffset: 	(178.0@83.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1894444 887 345 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1638822
		lastStepMessage: 	nil
		lastCycleTime: 	1638842
		alarms: 	a Heap()
		lastAlarmTime: 	1638822
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:09.447448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(620@311) mouseDown red 1895786 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(620@311) mouseDown red 1895786 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(620@311) mouseDown red 1895786 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(620@311) mouseDown red 1895786 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(620@311) mouseDown red 1895786 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@311) mouseDown red 1895786 nil]
		firstClickUp: 	[(620@311) mouseUp 1895864 nil]
		firstClickTime: 	1895786
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640199


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(620@311) mouseUp 1895864 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(620@311) mouseUp 1895864 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@311) mouseDown red 1895786 nil]
		firstClickUp: 	[(620@311) mouseUp 1895864 nil]
		firstClickTime: 	1895786
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640199


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(620@311) mouseUp 1895864 nil]
		evt: 	[(620@311) mouseUp 1895864 nil]
	Receiver's instance variables: 
		bounds: 	(620@311) corner: (636@327)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@311) corner: (636@327)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(238197760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@311) mouseUp 1895864 nil]
		targetOffset: 	(-89.0@49.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1895864 620 311 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(620@311) mouseUp 1895864 nil]
		evtBuf: 	#(1 1895864 620 311 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(620@311) corner: (636@327)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@311) corner: (636@327)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(238197760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@311) mouseUp 1895864 nil]
		targetOffset: 	(-89.0@49.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1895864 620 311 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@311) corner: (636@327)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@311) corner: (636@327)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(238197760)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@311) mouseUp 1895864 nil]
		targetOffset: 	(-89.0@49.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1895864 620 311 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640242
		lastStepMessage: 	nil
		lastCycleTime: 	1640263
		alarms: 	a Heap()
		lastAlarmTime: 	1640242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:09.946448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896238 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896238 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(620@295) mouseDown red 1896238 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(620@295) mouseDown red 1896238 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseDown red 1896238 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896238 nil]
		firstClickUp: 	[(620@295) mouseUp 1896348 nil]
		firstClickTime: 	1896238
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640658


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseUp 1896348 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(620@295) mouseUp 1896348 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896238 nil]
		firstClickUp: 	[(620@295) mouseUp 1896348 nil]
		firstClickTime: 	1896238
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1640658


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseUp 1896348 nil]
		evt: 	[(620@295) mouseUp 1896348 nil]
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(499826688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896348 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896348 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(620@295) mouseUp 1896348 nil]
		evtBuf: 	#(1 1896348 620 295 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(499826688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896348 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896348 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(499826688)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896348 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896348 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1640743
		lastStepMessage: 	nil
		lastCycleTime: 	1640763
		alarms: 	a Heap()
		lastAlarmTime: 	1640743
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:32:10.513448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(16680960)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(491309312)
		submorphs: 	an Array(a Morph(290564096) a Morph(760428544) a Morph(422853632) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (723159040) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(16680960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896847 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseDown red 1896847 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(620@295) mouseDown red 1896847 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(620@295) mouseDown red 1896847 nil]
		sourceMorph: 	a SimpleButtonMorph(702258432)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(702258432)
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseDown red 1896847 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(290564096)
		submorphs: 	an Array(a StringMorph(666649856)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (965165056) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(666649856)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896847 nil]
		firstClickUp: 	[(620@295) mouseUp 1896925 nil]
		firstClickTime: 	1896847
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1641241


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(620@295) mouseUp 1896925 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(620@295) mouseUp 1896925 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(702258432)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@295) mouseDown red 1896847 nil]
		firstClickUp: 	[(620@295) mouseUp 1896925 nil]
		firstClickTime: 	1896847
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1641241


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(620@295) mouseUp 1896925 nil]
		evt: 	[(620@295) mouseUp 1896925 nil]
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(425403392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896925 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896925 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(620@295) mouseUp 1896925 nil]
		evtBuf: 	#(1 1896925 620 295 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(425403392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896925 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896925 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@295) corner: (636@311)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@295) corner: (636@311)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(702258432)
		keyboardFocus: 	a PluggableButtonMorph(425403392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@295) mouseUp 1896925 nil]
		targetOffset: 	(-89.0@33.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896925 620 295 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1641306
		lastStepMessage: 	nil
		lastCycleTime: 	1641328
		alarms: 	a Heap()
		lastAlarmTime: 	1641306
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SystemWindow did not understand #label:
21 June 2017 5:35:06.737448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SystemWindow(Object)>>doesNotUnderstand: #label:
	Receiver: a SystemWindow(436197376)
	Arguments and temporary variables: 
		aMessage: 	label: 'Hello'
		exception: 	MessageNotUnderstood: SystemWindow>>label:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (300@200)
		owner: 	nil
		submorphs: 	an Array(a WindowEdgeGripMorph(734941440) a WindowEdgeGripMorph(9118...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (306214144)
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		labelString: 	'Untitled Window'
		stripes: 	an Array(a Morph(99782656) a Morph(937187584))
		label: 	a LabelMorph(596134912)'Untitled Window'
		closeBox: 	a MultistateButtonMorph(155581696)
		collapseBox: 	a MultistateButtonMorph(303450112)
		paneMorphs: 	#()
		collapsedFrame: 	nil
		fullFrame: 	(0@0) corner: (300@200)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(887185664)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(953713664)
		expandBox: 	a MultistateButtonMorph(248677632)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


Snake>>open
	Receiver: a Snake
	Arguments and temporary variables: 
		window: 	nil
	Receiver's instance variables: 
		container: 	a Morph(690600960)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'Snake new open.'
		itsSelection: 	a Text for 'Snake new open.'
		itsSelectionString: 	'Snake new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ Snake new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(727446528))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1817516
		lastStepMessage: 	nil
		lastCycleTime: 	1817536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1817516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1817516
		lastStepMessage: 	nil
		lastCycleTime: 	1817536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1817516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1817516
		lastStepMessage: 	nil
		lastCycleTime: 	1817536
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1817516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SystemWindow(Object)>>doesNotUnderstand: #label:
Snake>>open
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:36:59.027448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(616832000)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(966737152)
		submorphs: 	an Array(a Morph(500741120) a Morph(469811456) a Morph(164677888) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (711810048)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(784@286) mouseDown red 2185386 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(784@286) mouseDown red 2185386 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(784@286) mouseDown red 2185386 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(784@286) mouseDown red 2185386 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(900736000)
	Arguments and temporary variables: 
		evt: 	[(784@286) mouseDown red 2185386 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(500741120)
		submorphs: 	an Array(a StringMorph(64014336)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (712960) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(64014336)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(784@286) mouseDown red 2185386 nil]
		firstClickUp: 	[(784@286) mouseUp 2185449 nil]
		firstClickTime: 	2185386
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1929778


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(784@286) mouseUp 2185449 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(784@286) mouseUp 2185449 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(784@286) mouseDown red 2185386 nil]
		firstClickUp: 	[(784@286) mouseUp 2185449 nil]
		firstClickTime: 	2185386
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1929778


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(784@286) mouseUp 2185449 nil]
		evt: 	[(784@286) mouseUp 2185449 nil]
	Receiver's instance variables: 
		bounds: 	(784@286) corner: (800@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(784@286) corner: (800@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a SystemWindow(966737152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(784@286) mouseUp 2185449 nil]
		targetOffset: 	(75.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2185449 784 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(784@286) mouseUp 2185449 nil]
		evtBuf: 	#(1 2185449 784 286 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(784@286) corner: (800@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(784@286) corner: (800@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a SystemWindow(966737152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(784@286) mouseUp 2185449 nil]
		targetOffset: 	(75.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2185449 784 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(784@286) corner: (800@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(784@286) corner: (800@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a SystemWindow(966737152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(784@286) mouseUp 2185449 nil]
		targetOffset: 	(75.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2185449 784 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1929820
		lastStepMessage: 	nil
		lastCycleTime: 	1929841
		alarms: 	a Heap()
		lastAlarmTime: 	1929820
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:37:01.066448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(616832000)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(966737152)
		submorphs: 	an Array(a Morph(500741120) a Morph(469811456) a Morph(164677888) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (711810048) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(857@328) mouseDown red 2187399 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(857@328) mouseDown red 2187399 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(857@328) mouseDown red 2187399 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(857@328) mouseDown red 2187399 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(900736000)
	Arguments and temporary variables: 
		evt: 	[(857@328) mouseDown red 2187399 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(500741120)
		submorphs: 	an Array(a StringMorph(64014336)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (712960) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(64014336)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(857@328) mouseDown red 2187399 nil]
		firstClickUp: 	[(856@328) mouseUp 2187477 nil]
		firstClickTime: 	2187399
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1931817


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(856@328) mouseUp 2187477 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(856@328) mouseUp 2187477 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(857@328) mouseDown red 2187399 nil]
		firstClickUp: 	[(856@328) mouseUp 2187477 nil]
		firstClickTime: 	2187399
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1931817


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(856@328) mouseUp 2187477 nil]
		evt: 	[(856@328) mouseUp 2187477 nil]
	Receiver's instance variables: 
		bounds: 	(857@328) corner: (873@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(857@328) corner: (873@344)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(965862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(856@328) mouseUp 2187477 nil]
		targetOffset: 	(148.0@66.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2187477 856 328 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(856@328) mouseUp 2187477 nil]
		evtBuf: 	#(1 2187477 856 328 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(857@328) corner: (873@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(857@328) corner: (873@344)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(965862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(856@328) mouseUp 2187477 nil]
		targetOffset: 	(148.0@66.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2187477 856 328 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(857@328) corner: (873@344)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(857@328) corner: (873@344)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(965862400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(856@328) mouseUp 2187477 nil]
		targetOffset: 	(148.0@66.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2187477 856 328 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1931860
		lastStepMessage: 	nil
		lastCycleTime: 	1931881
		alarms: 	a Heap()
		lastAlarmTime: 	1931860
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:37:02.280448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(616832000)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(966737152)
		submorphs: 	an Array(a Morph(500741120) a Morph(469811456) a Morph(164677888) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (711810048) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(616832000)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(623@286) mouseDown red 2188600 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(623@286) mouseDown red 2188600 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(623@286) mouseDown red 2188600 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(623@286) mouseDown red 2188600 nil]
		sourceMorph: 	a SimpleButtonMorph(900736000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(900736000)
	Arguments and temporary variables: 
		evt: 	[(623@286) mouseDown red 2188600 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(500741120)
		submorphs: 	an Array(a StringMorph(64014336)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (712960) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(64014336)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@286) mouseDown red 2188600 nil]
		firstClickUp: 	[(623@286) mouseUp 2188678 nil]
		firstClickTime: 	2188600
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1933012


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(623@286) mouseUp 2188678 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(623@286) mouseUp 2188678 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(900736000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@286) mouseDown red 2188600 nil]
		firstClickUp: 	[(623@286) mouseUp 2188678 nil]
		firstClickTime: 	2188600
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1933012


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(623@286) mouseUp 2188678 nil]
		evt: 	[(623@286) mouseUp 2188678 nil]
	Receiver's instance variables: 
		bounds: 	(623@286) corner: (639@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@286) corner: (639@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(445286400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@286) mouseUp 2188678 nil]
		targetOffset: 	(-86.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2188678 623 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(623@286) mouseUp 2188678 nil]
		evtBuf: 	#(1 2188678 623 286 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(623@286) corner: (639@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@286) corner: (639@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(445286400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@286) mouseUp 2188678 nil]
		targetOffset: 	(-86.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2188678 623 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(623@286) corner: (639@302)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@286) corner: (639@302)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(900736000)
		keyboardFocus: 	a PluggableButtonMorph(445286400)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@286) mouseUp 2188678 nil]
		targetOffset: 	(-86.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2188678 623 286 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1933075
		lastStepMessage: 	nil
		lastCycleTime: 	1933096
		alarms: 	a Heap()
		lastAlarmTime: 	1933075
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:37:55.416448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(485492992)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(272.0@294.0) corner: (607.0@584.0)
		owner: 	a SystemWindow(807077888)
		submorphs: 	an Array(a Morph(892720384) a Morph(514115840) a Morph(347692032) a ...etc...
		fullBounds: 	(272.0@294.0) corner: (607.0@584.0)
		color: 	Color transparent
		extension: 	a MorphExtension (358051072)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(485492992)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(485492992)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(391@329) mouseDown red 2241734 nil]
		sourceMorph: 	a SimpleButtonMorph(422534400)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(391@329) mouseDown red 2241734 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(422534400)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(391@329) mouseDown red 2241734 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(422534400)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(391@329) mouseDown red 2241734 nil]
		sourceMorph: 	a SimpleButtonMorph(422534400)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(422534400)
	Arguments and temporary variables: 
		evt: 	[(391@329) mouseDown red 2241734 nil]
	Receiver's instance variables: 
		bounds: 	(367.0@294.0) corner: (487.0@344.0)
		owner: 	a Morph(892720384)
		submorphs: 	an Array(a StringMorph(425648384)'Exit')
		fullBounds: 	(367.0@294.0) corner: (487.0@344.0)
		color: 	Color gray
		extension: 	a MorphExtension (607585280) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(425648384)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(422534400)
		clickState: 	#firstClickUp
		firstClickDown: 	[(391@329) mouseDown red 2241734 nil]
		firstClickUp: 	[(391@329) mouseUp 2241827 nil]
		firstClickTime: 	2241734
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1986123


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(391@329) mouseUp 2241827 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(391@329) mouseUp 2241827 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(422534400)
		clickState: 	#firstClickUp
		firstClickDown: 	[(391@329) mouseDown red 2241734 nil]
		firstClickUp: 	[(391@329) mouseUp 2241827 nil]
		firstClickTime: 	2241734
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	1986123


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(391@329) mouseUp 2241827 nil]
		evt: 	[(391@329) mouseUp 2241827 nil]
	Receiver's instance variables: 
		bounds: 	(391@329) corner: (407@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@329) corner: (407@345)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(422534400)
		keyboardFocus: 	a SystemWindow(807077888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@329) mouseUp 2241827 nil]
		targetOffset: 	(24.0@35.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2241827 391 329 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(391@329) mouseUp 2241827 nil]
		evtBuf: 	#(1 2241827 391 329 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(391@329) corner: (407@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@329) corner: (407@345)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(422534400)
		keyboardFocus: 	a SystemWindow(807077888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@329) mouseUp 2241827 nil]
		targetOffset: 	(24.0@35.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2241827 391 329 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(391@329) corner: (407@345)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(391@329) corner: (407@345)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(422534400)
		keyboardFocus: 	a SystemWindow(807077888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@329) mouseUp 2241827 nil]
		targetOffset: 	(24.0@35.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2241827 391 329 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1986208
		lastStepMessage: 	nil
		lastCycleTime: 	1986229
		alarms: 	a Heap()
		lastAlarmTime: 	1986208
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:41:14.868448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(997268736)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(742405376)
		submorphs: 	an Array(a Morph(601731072) a Morph(938225920) a Morph(927587584) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (310208512)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(794@294) mouseDown red 2441212 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(794@294) mouseDown red 2441212 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(794@294) mouseDown red 2441212 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(794@294) mouseDown red 2441212 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1059083520)
	Arguments and temporary variables: 
		evt: 	[(794@294) mouseDown red 2441212 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(601731072)
		submorphs: 	an Array(a StringMorph(360342784)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (380510208) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(360342784)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(794@294) mouseDown red 2441212 nil]
		firstClickUp: 	[(794@294) mouseUp 2441290 nil]
		firstClickTime: 	2441212
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2185617


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(794@294) mouseUp 2441290 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(794@294) mouseUp 2441290 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(794@294) mouseDown red 2441212 nil]
		firstClickUp: 	[(794@294) mouseUp 2441290 nil]
		firstClickTime: 	2441212
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2185617


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(794@294) mouseUp 2441290 nil]
		evt: 	[(794@294) mouseUp 2441290 nil]
	Receiver's instance variables: 
		bounds: 	(794@294) corner: (810@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(794@294) corner: (810@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a SystemWindow(742405376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(794@294) mouseUp 2441290 nil]
		targetOffset: 	(85.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2441290 794 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(794@294) mouseUp 2441290 nil]
		evtBuf: 	#(1 2441290 794 294 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(794@294) corner: (810@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(794@294) corner: (810@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a SystemWindow(742405376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(794@294) mouseUp 2441290 nil]
		targetOffset: 	(85.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2441290 794 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(794@294) corner: (810@310)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(794@294) corner: (810@310)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a SystemWindow(742405376)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(794@294) mouseUp 2441290 nil]
		targetOffset: 	(85.0@32.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2441290 794 294 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2185661
		lastStepMessage: 	nil
		lastCycleTime: 	2185683
		alarms: 	a Heap()
		lastAlarmTime: 	2185661
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:41:20.833448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(997268736)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(742405376)
		submorphs: 	an Array(a Morph(601731072) a Morph(938225920) a Morph(927587584) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (310208512) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(618@270) mouseDown red 2447156 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(618@270) mouseDown red 2447156 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(618@270) mouseDown red 2447156 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(618@270) mouseDown red 2447156 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1059083520)
	Arguments and temporary variables: 
		evt: 	[(618@270) mouseDown red 2447156 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(601731072)
		submorphs: 	an Array(a StringMorph(360342784)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (380510208) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(360342784)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(618@270) mouseDown red 2447156 nil]
		firstClickUp: 	[(618@270) mouseUp 2447250 nil]
		firstClickTime: 	2447156
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2191564


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(618@270) mouseUp 2447250 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(618@270) mouseUp 2447250 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(618@270) mouseDown red 2447156 nil]
		firstClickUp: 	[(618@270) mouseUp 2447250 nil]
		firstClickTime: 	2447156
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2191564


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(618@270) mouseUp 2447250 nil]
		evt: 	[(618@270) mouseUp 2447250 nil]
	Receiver's instance variables: 
		bounds: 	(618@270) corner: (634@286)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@270) corner: (634@286)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(670132480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@270) mouseUp 2447250 nil]
		targetOffset: 	(-91.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447250 618 270 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(618@270) mouseUp 2447250 nil]
		evtBuf: 	#(1 2447250 618 270 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(618@270) corner: (634@286)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@270) corner: (634@286)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(670132480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@270) mouseUp 2447250 nil]
		targetOffset: 	(-91.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447250 618 270 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(618@270) corner: (634@286)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@270) corner: (634@286)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(670132480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@270) mouseUp 2447250 nil]
		targetOffset: 	(-91.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447250 618 270 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2191629
		lastStepMessage: 	nil
		lastCycleTime: 	2191649
		alarms: 	a Heap()
		lastAlarmTime: 	2191629
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:41:21.459448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(997268736)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(742405376)
		submorphs: 	an Array(a Morph(601731072) a Morph(938225920) a Morph(927587584) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (310208512) [locked] 


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(997268736)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(626@251) mouseDown red 2447749 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(626@251) mouseDown red 2447749 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(626@251) mouseDown red 2447749 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(626@251) mouseDown red 2447749 nil]
		sourceMorph: 	a SimpleButtonMorph(1059083520)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1059083520)
	Arguments and temporary variables: 
		evt: 	[(626@251) mouseDown red 2447749 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(601731072)
		submorphs: 	an Array(a StringMorph(360342784)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (380510208) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(360342784)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(626@251) mouseDown red 2447749 nil]
		firstClickUp: 	[(626@251) mouseUp 2447858 nil]
		firstClickTime: 	2447749
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2192167


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(626@251) mouseUp 2447858 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(626@251) mouseUp 2447858 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1059083520)
		clickState: 	#firstClickUp
		firstClickDown: 	[(626@251) mouseDown red 2447749 nil]
		firstClickUp: 	[(626@251) mouseUp 2447858 nil]
		firstClickTime: 	2447749
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2192167


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(626@251) mouseUp 2447858 nil]
		evt: 	[(626@251) mouseUp 2447858 nil]
	Receiver's instance variables: 
		bounds: 	(626@251) corner: (642@267)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@251) corner: (642@267)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(855811328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@251) mouseUp 2447858 nil]
		targetOffset: 	(-83.0@ -11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447858 626 251 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(626@251) mouseUp 2447858 nil]
		evtBuf: 	#(1 2447858 626 251 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(626@251) corner: (642@267)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@251) corner: (642@267)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(855811328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@251) mouseUp 2447858 nil]
		targetOffset: 	(-83.0@ -11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447858 626 251 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(626@251) corner: (642@267)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@251) corner: (642@267)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1059083520)
		keyboardFocus: 	a PluggableButtonMorph(855811328)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@251) mouseUp 2447858 nil]
		targetOffset: 	(-83.0@ -11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2447858 626 251 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2192253
		lastStepMessage: 	nil
		lastCycleTime: 	2192274
		alarms: 	a Heap()
		lastAlarmTime: 	2192253
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #close
21 June 2017 5:42:29.933448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #close
	Receiver: a Morph(792950016)
	Arguments and temporary variables: 
		aMessage: 	close
		exception: 	MessageNotUnderstood: Morph>>close
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@262.0) corner: (949.0@552.0)
		owner: 	a SystemWindow(1059732480)
		submorphs: 	an Array(a Morph(673122560) a Morph(959059968) a Morph(194301952) a ...etc...
		fullBounds: 	(614@262) corner: (949@552)
		color: 	Color transparent
		extension: 	a MorphExtension (385095936)


Snake>>close
	Receiver: a Snake
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(792950016)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


[ self close ] in Snake>>addControls
	Receiver: a Snake
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		exitBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(792950016)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(768@290) mouseDown red 2516264 nil]
		sourceMorph: 	a SimpleButtonMorph(230235136)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self close ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(768@290) mouseDown red 2516264 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(230235136)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(768@290) mouseDown red 2516264 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(230235136)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(768@290) mouseDown red 2516264 nil]
		sourceMorph: 	a SimpleButtonMorph(230235136)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(230235136)
	Arguments and temporary variables: 
		evt: 	[(768@290) mouseDown red 2516264 nil]
	Receiver's instance variables: 
		bounds: 	(709.0@262.0) corner: (829.0@312.0)
		owner: 	a Morph(673122560)
		submorphs: 	an Array(a StringMorph(868649984)'Exit')
		fullBounds: 	(709.0@262.0) corner: (829.0@312.0)
		color: 	Color gray
		extension: 	a MorphExtension (807517440) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(868649984)'Exit'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(230235136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(768@290) mouseDown red 2516264 nil]
		firstClickUp: 	[(768@290) mouseUp 2516342 nil]
		firstClickTime: 	2516264
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2260683


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(768@290) mouseUp 2516342 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(768@290) mouseUp 2516342 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(230235136)
		clickState: 	#firstClickUp
		firstClickDown: 	[(768@290) mouseDown red 2516264 nil]
		firstClickUp: 	[(768@290) mouseUp 2516342 nil]
		firstClickTime: 	2516264
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	2260683


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(768@290) mouseUp 2516342 nil]
		evt: 	[(768@290) mouseUp 2516342 nil]
	Receiver's instance variables: 
		bounds: 	(768@290) corner: (784@306)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(768@290) corner: (784@306)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(230235136)
		keyboardFocus: 	a SystemWindow(1059732480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(768@290) mouseUp 2516342 nil]
		targetOffset: 	(59.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2516342 768 290 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(768@290) mouseUp 2516342 nil]
		evtBuf: 	#(1 2516342 768 290 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(768@290) corner: (784@306)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(768@290) corner: (784@306)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(230235136)
		keyboardFocus: 	a SystemWindow(1059732480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(768@290) mouseUp 2516342 nil]
		targetOffset: 	(59.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2516342 768 290 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(768@290) corner: (784@306)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(768@290) corner: (784@306)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(230235136)
		keyboardFocus: 	a SystemWindow(1059732480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(768@290) mouseUp 2516342 nil]
		targetOffset: 	(59.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2516342 768 290 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2260725
		lastStepMessage: 	nil
		lastCycleTime: 	2260746
		alarms: 	a Heap()
		lastAlarmTime: 	2260725
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #close
Snake>>close
[ self close ] in Snake>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of FixedLayout did not understand #flushLayoutCache
21 June 2017 5:48:37.674448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

FixedLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: a FixedLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: FixedLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		host: 	nil
		compactClassIndex: 	0
		slotScope: 	nil


Morph>>layoutChanged
	Receiver: a Morph(934298880)
	Arguments and temporary variables: 
		layout: 	a FixedLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (792212480)


Morph>>layoutPolicy:
	Receiver: a Morph(934298880)
	Arguments and temporary variables: 
		aLayoutPolicy: 	a FixedLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (792212480)


SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(259841024)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(259841024)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1059787776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2628456
		lastStepMessage: 	nil
		lastCycleTime: 	2628477
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	2628456
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2628456
		lastStepMessage: 	nil
		lastCycleTime: 	2628477
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	2628456
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2628456
		lastStepMessage: 	nil
		lastCycleTime: 	2628477
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	2628456
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
FixedLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addControls
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #help:
21 June 2017 6:00:09.137448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #help:
	Receiver: a TextMorph(950118400)
	Arguments and temporary variables: 
		aMessage: 	help: 'Welcome to Snake'
		exception: 	MessageNotUnderstood: TextMorph>>help:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (1026359552) [other:  (kmDispatcher -> a KMDispatch...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	nil
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(0@0) corner: (0@0)
		defaultColor: 	nil


SnakeGame>>createTextArea:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		string: 	'Welcome to Snake'
		newTextArea: 	a TextMorph(950118400)
	Receiver's instance variables: 
		container: 	a Morph(973758464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	a Morph(810169600)
		startBtn: 	a SimpleButtonMorph(403623936)
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(973758464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(973758464)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(711624704))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3319919
		lastStepMessage: 	nil
		lastCycleTime: 	3319939
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3319919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3319919
		lastStepMessage: 	nil
		lastCycleTime: 	3319939
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3319919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3319919
		lastStepMessage: 	nil
		lastCycleTime: 	3319939
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3319919
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #help:
SnakeGame>>createTextArea:
SnakeGame>>addControls
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #addMorph:frame:
21 June 2017 6:09:00.138448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #addMorph:frame:
	Receiver: a Morph(485748992)
	Arguments and temporary variables: 
		aMessage: 	addMorph: a TextMorph(327447552) frame: (1@1)
		exception: 	MessageNotUnderstood: Morph>>addMorph:frame:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (485233920)


SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	a Morph(485748992)
		startBtn: 	a SimpleButtonMorph(1005315072)
		messageArea: 	a TextMorph(327447552)
	Receiver's instance variables: 
		container: 	a Morph(1003889920)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(1003889920)
		model: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...


SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(19271936))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3850917
		lastStepMessage: 	nil
		lastCycleTime: 	3850938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3850917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3850917
		lastStepMessage: 	nil
		lastCycleTime: 	3850938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3850917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	3850917
		lastStepMessage: 	nil
		lastCycleTime: 	3850938
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	3850917
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #addMorph:frame:
SnakeGame>>addControls
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 1st subscript out of range
21 June 2017 6:18:53.492448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>error:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'1st subscript out of range'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel(Matrix)>>indexForRow:andColumn:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		column: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel(Matrix)>>at:at:put:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		rowNumber: 	25
		columnNumber: 	12
		value: 	'X'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


SnakeModel>>updateAtRow:col:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		col: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'X'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(931@113) mouseDown red 4699795 nil]
		sourceMorph: 	a SnakeCell(419233792)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(931@113) mouseDown red 4699795 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(931@113) mouseDown red 4699795 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(931@113) mouseDown red 4699795 nil]
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SnakeCell(Morph)>>click:
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 
		evt: 	[(931@113) mouseDown red 4699795 nil]
	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color yellow
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(931@113) mouseDown red 4699795 nil]
		firstClickUp: 	[(931@113) mouseUp 4699888 nil]
		firstClickTime: 	4699795
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444194


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(931@113) mouseUp 4699888 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(931@113) mouseUp 4699888 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(931@113) mouseDown red 4699795 nil]
		firstClickUp: 	[(931@113) mouseUp 4699888 nil]
		firstClickTime: 	4699795
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444194


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(931@113) mouseUp 4699888 nil]
		evt: 	[(931@113) mouseUp 4699888 nil]
	Receiver's instance variables: 
		bounds: 	(931@113) corner: (947@129)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(931@113) corner: (947@129)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a SystemWindow(907987968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@113) mouseUp 4699888 nil]
		targetOffset: 	(17.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4699888 931 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(931@113) mouseUp 4699888 nil]
		evtBuf: 	#(1 4699888 931 113 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(931@113) corner: (947@129)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(931@113) corner: (947@129)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a SystemWindow(907987968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@113) mouseUp 4699888 nil]
		targetOffset: 	(17.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4699888 931 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(931@113) corner: (947@129)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(931@113) corner: (947@129)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a SystemWindow(907987968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(931@113) mouseUp 4699888 nil]
		targetOffset: 	(17.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4699888 931 113 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	4444278
		lastStepMessage: 	nil
		lastCycleTime: 	4444300
		alarms: 	a Heap()
		lastAlarmTime: 	4444278
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>error:
SnakeModel(Matrix)>>indexForRow:andColumn:
SnakeModel(Matrix)>>at:at:put:
SnakeModel>>updateAtRow:col:
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SnakeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: 1st subscript out of range
21 June 2017 6:18:53.895448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>error:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		aString: 	'1st subscript out of range'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


SnakeModel(Matrix)>>indexForRow:andColumn:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		column: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


SnakeModel(Matrix)>>at:at:put:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		rowNumber: 	25
		columnNumber: 	12
		value: 	'O'
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


SnakeModel>>updateAtRow:col:
	Receiver: (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil
nil nil n...etc...
	Arguments and temporary variables: 
		row: 	25
		col: 	12
	Receiver's instance variables: 
		contents: 	#(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil...etc...
		numberOfColumns: 	20
		numberOfRows: 	20
		filledCells: 	0
		current: 	'O'
		winner: 	nil


[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(926@116) mouseDown red 4700216 nil]
		sourceMorph: 	a SnakeCell(419233792)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row...etc...
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(926@116) mouseDown red 4700216 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(926@116) mouseDown red 4700216 nil]
		eventType: 	#click
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(926@116) mouseDown red 4700216 nil]
		sourceMorph: 	a SnakeCell(419233792)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SnakeCell(Morph)>>click:
	Receiver: a SnakeCell(419233792)
	Arguments and temporary variables: 
		evt: 	[(926@116) mouseDown red 4700216 nil]
	Receiver's instance variables: 
		bounds: 	(914.0@106.0) corner: (934.0@126.0)
		owner: 	a Morph(649414912)
		submorphs: 	an Array(a StringMorph(710692096)'')
		fullBounds: 	(914.0@106.0) corner: (934.0@126.0)
		color: 	(Color r: 1.0 g: 1.0 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (301234176) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 1.0 g: 1.0 b: 0.5 alpha: 1.0)
		label: 	a StringMorph(710692096)''
		parent: 	(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil ni...etc...
		row: 	25
		column: 	12


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(926@116) mouseDown red 4700216 nil]
		firstClickUp: 	[(926@116) mouseUp 4700310 nil]
		firstClickTime: 	4700216
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444626


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(926@116) mouseUp 4700310 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(926@116) mouseUp 4700310 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SnakeCell(419233792)
		clickState: 	#firstClickUp
		firstClickDown: 	[(926@116) mouseDown red 4700216 nil]
		firstClickUp: 	[(926@116) mouseUp 4700310 nil]
		firstClickTime: 	4700216
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	4444626


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(926@116) mouseUp 4700310 nil]
		evt: 	[(926@116) mouseUp 4700310 nil]
	Receiver's instance variables: 
		bounds: 	(926@116) corner: (942@132)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(926@116) corner: (942@132)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a PluggableButtonMorph(943533056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@116) mouseUp 4700310 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4700310 926 116 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(926@116) mouseUp 4700310 nil]
		evtBuf: 	#(1 4700310 926 116 0 0 2 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(926@116) corner: (942@132)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(926@116) corner: (942@132)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a PluggableButtonMorph(943533056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@116) mouseUp 4700310 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4700310 926 116 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(926@116) corner: (942@132)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(926@116) corner: (942@132)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SnakeCell(419233792)
		keyboardFocus: 	a PluggableButtonMorph(943533056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(926@116) mouseUp 4700310 nil]
		targetOffset: 	(12.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4700310 926 116 0 0 2 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	4444689
		lastStepMessage: 	nil
		lastCycleTime: 	4444711
		alarms: 	a Heap()
		lastAlarmTime: 	4444689
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>error:
SnakeModel(Matrix)>>indexForRow:andColumn:
SnakeModel(Matrix)>>at:at:put:
SnakeModel>>updateAtRow:col:
[ self label isEmpty
	ifTrue: [ self label: (parent updateAtRow: row col: column).
		parent checkWinCondition.
		self extent: 80 @ 80 ] ] in SnakeCell>>onClickExecution
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SnakeCell(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #margins:
21 June 2017 6:28:50.319448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #margins:
	Receiver: a Morph(919084032)
	Arguments and temporary variables: 
		aMessage: 	margins: (0@0)
		exception: 	MessageNotUnderstood: Morph>>margins:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (196521216)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(177178624)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(177178624)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(266796032))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5041104
		lastStepMessage: 	nil
		lastCycleTime: 	5041125
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5041104
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5041104
		lastStepMessage: 	nil
		lastCycleTime: 	5041125
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5041104
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5041104
		lastStepMessage: 	nil
		lastCycleTime: 	5041125
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5041104
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #margins:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeCell did not understand #margins:
21 June 2017 6:29:46.442448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>doesNotUnderstand: #margins:
	Receiver: a SnakeCell(670718976)
	Arguments and temporary variables: 
		aMessage: 	margins: (0@0)
		exception: 	MessageNotUnderstood: SnakeCell>>margins:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (20@20)
		owner: 	nil
		submorphs: 	an Array(a StringMorph(633236736)'')
		fullBounds: 	nil
		color: 	Color lightGray
		extension: 	a MorphExtension (957831168)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(633236736)''
		parent: 	nil
		row: 	nil
		column: 	nil


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	a Morph(546693376)
		cell: 	nil
		row: 	1
		col: 	1
	Receiver's instance variables: 
		container: 	a Morph(270009344)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(270009344)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(217660416))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	5097222
		lastStepMessage: 	nil
		lastCycleTime: 	5097243
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5097222
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	5097222
		lastStepMessage: 	nil
		lastCycleTime: 	5097243
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5097222
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	5097222
		lastStepMessage: 	nil
		lastCycleTime: 	5097243
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5097222
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>doesNotUnderstand: #margins:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of EmptyLayout did not understand #flushLayoutCache
21 June 2017 6:30:35.218448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

EmptyLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: an EmptyLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: EmptyLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		host: 	nil


Morph>>layoutChanged
	Receiver: a Morph(565049344)
	Arguments and temporary variables: 
		layout: 	an EmptyLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (612708608)


Morph>>layoutPolicy:
	Receiver: a Morph(565049344)
	Arguments and temporary variables: 
		aLayoutPolicy: 	an EmptyLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (612708608)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(574399488)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(574399488)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(619305984))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5146002
		lastStepMessage: 	nil
		lastCycleTime: 	5146024
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5146002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5146002
		lastStepMessage: 	nil
		lastCycleTime: 	5146024
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5146002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5146002
		lastStepMessage: 	nil
		lastCycleTime: 	5146024
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5146002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
EmptyLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpecRowLayout did not understand #flushLayoutCache
21 June 2017 6:31:17.524448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: a SpecRowLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: SpecRowLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		type: 	#ContainerModel
		commands: 	an OrderedCollection()
		selector: 	nil
		result: 	nil
		shouldCheckSplitters: 	nil
		currentOffset: 	nil
		currentProportional: 	nil
		numberOfProportionals: 	nil
		lastFractionIndex: 	nil
		autoFractionComputation: 	nil
		size: 	nil
		width: 	nil


Morph>>layoutChanged
	Receiver: a Morph(1000415232)
	Arguments and temporary variables: 
		layout: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (256657664)


Morph>>layoutPolicy:
	Receiver: a Morph(1000415232)
	Arguments and temporary variables: 
		aLayoutPolicy: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (256657664)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(735792128)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(735792128)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(734757888))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5188309
		lastStepMessage: 	nil
		lastCycleTime: 	5188330
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5188309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5188309
		lastStepMessage: 	nil
		lastCycleTime: 	5188330
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5188309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5188309
		lastStepMessage: 	nil
		lastCycleTime: 	5188330
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5188309
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SpecRowLayout did not understand #flushLayoutCache
21 June 2017 6:31:22.668448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
	Receiver: a SpecRowLayout
	Arguments and temporary variables: 
		aMessage: 	flushLayoutCache
		exception: 	MessageNotUnderstood: SpecRowLayout>>flushLayoutCache
		resumeValue: 	nil
	Receiver's instance variables: 
		type: 	#ContainerModel
		commands: 	an OrderedCollection()
		selector: 	nil
		result: 	nil
		shouldCheckSplitters: 	nil
		currentOffset: 	nil
		currentProportional: 	nil
		numberOfProportionals: 	nil
		lastFractionIndex: 	nil
		autoFractionComputation: 	nil
		size: 	nil
		width: 	nil


Morph>>layoutChanged
	Receiver: a Morph(903628800)
	Arguments and temporary variables: 
		layout: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (285958400)


Morph>>layoutPolicy:
	Receiver: a Morph(903628800)
	Arguments and temporary variables: 
		aLayoutPolicy: 	a SpecRowLayout
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (50@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (285958400)


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
		row: 	1
	Receiver's instance variables: 
		container: 	a Morph(37651456)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(37651456)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65538
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(802143232))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5193450
		lastStepMessage: 	nil
		lastCycleTime: 	5193471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5193450
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5193450
		lastStepMessage: 	nil
		lastCycleTime: 	5193471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5193450
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	5193450
		lastStepMessage: 	nil
		lastCycleTime: 	5193471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	5193450
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SpecRowLayout(Object)>>doesNotUnderstand: #flushLayoutCache
Morph>>layoutChanged
Morph>>layoutPolicy:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 6:55:34.922448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(706@232) mouseDown red 6901250 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(706@232) mouseDown red 6901250 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(706@232) mouseDown red 6901250 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(706@232) mouseDown red 6901250 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1022952704)
	Arguments and temporary variables: 
		evt: 	[(706@232) mouseDown red 6901250 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(15237120)
		submorphs: 	an Array(a StringMorph(699475200)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (757424128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(699475200)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(706@232) mouseDown red 6901250 nil]
		firstClickUp: 	[(706@232) mouseUp 6901312 nil]
		firstClickTime: 	6901250
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6645668


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(706@232) mouseUp 6901312 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(706@232) mouseUp 6901312 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(706@232) mouseDown red 6901250 nil]
		firstClickUp: 	[(706@232) mouseUp 6901312 nil]
		firstClickTime: 	6901250
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6645668


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(706@232) mouseUp 6901312 nil]
		evt: 	[(706@232) mouseUp 6901312 nil]
	Receiver's instance variables: 
		bounds: 	(706@232.0) corner: (722@248.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(706@232.0) corner: (722@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a SystemWindow(921191424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(706@232) mouseUp 6901312 nil]
		targetOffset: 	(92.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6901312 706 232 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(706@232) mouseUp 6901312 nil]
		evtBuf: 	#(1 6901312 706 232 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(706@232.0) corner: (722@248.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(706@232.0) corner: (722@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a SystemWindow(921191424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(706@232) mouseUp 6901312 nil]
		targetOffset: 	(92.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6901312 706 232 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(706@232.0) corner: (722@248.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(706@232.0) corner: (722@248.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a SystemWindow(921191424)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(706@232) mouseUp 6901312 nil]
		targetOffset: 	(92.0@36.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6901312 706 232 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	6645711
		lastStepMessage: 	nil
		lastCycleTime: 	6645732
		alarms: 	a Heap()
		lastAlarmTime: 	6645711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 6:55:39.532448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(a Morph(492278784) a Morph(549844224) a Morph(612962304) a Morph(579459328) a Mor...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(808445184)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(621@205) mouseDown red 6905867 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(621@205) mouseDown red 6905867 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(621@205) mouseDown red 6905867 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(621@205) mouseDown red 6905867 nil]
		sourceMorph: 	a SimpleButtonMorph(1022952704)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(1022952704)
	Arguments and temporary variables: 
		evt: 	[(621@205) mouseDown red 6905867 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(15237120)
		submorphs: 	an Array(a StringMorph(699475200)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (757424128) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(699475200)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(621@205) mouseDown red 6905867 nil]
		firstClickUp: 	[(621@205) mouseUp 6905945 nil]
		firstClickTime: 	6905867
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6650264


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(621@205) mouseUp 6905945 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(621@205) mouseUp 6905945 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(1022952704)
		clickState: 	#firstClickUp
		firstClickDown: 	[(621@205) mouseDown red 6905867 nil]
		firstClickUp: 	[(621@205) mouseUp 6905945 nil]
		firstClickTime: 	6905867
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	6650264


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(621@205) mouseUp 6905945 nil]
		evt: 	[(621@205) mouseUp 6905945 nil]
	Receiver's instance variables: 
		bounds: 	(621@205.0) corner: (637@221.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(621@205.0) corner: (637@221.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a PluggableButtonMorph(546043904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@205) mouseUp 6905945 nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6905945 621 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(621@205) mouseUp 6905945 nil]
		evtBuf: 	#(1 6905945 621 205 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(621@205.0) corner: (637@221.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(621@205.0) corner: (637@221.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a PluggableButtonMorph(546043904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@205) mouseUp 6905945 nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6905945 621 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(621@205.0) corner: (637@221.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(621@205.0) corner: (637@221.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(1022952704)
		keyboardFocus: 	a PluggableButtonMorph(546043904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@205) mouseUp 6905945 nil]
		targetOffset: 	(7.0@9.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6905945 621 205 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6650327
		lastStepMessage: 	nil
		lastCycleTime: 	6650348
		alarms: 	a Heap()
		lastAlarmTime: 	6650327
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #basicNew: in Array class failed
21 June 2017 6:57:02.400448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array class(Object)>>primitiveFailed:
	Receiver: Array
	Arguments and temporary variables: 
		selector: 	#basicNew:
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class(Object)>>primitiveFailed
	Receiver: Array
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class(Behavior)>>basicNew:
	Receiver: Array
	Arguments and temporary variables: 
		sizeRequested: 	(25@25)
		ec: 	#'bad argument'
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


Array class>>new:
	Receiver: Array
	Arguments and temporary variables: 
		sizeRequested: 	(25@25)
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. WeakActionSequence. Cubic. MetacelloMethodSectionPath}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


SnakeGame>>addRows
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		cell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(935332864)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(935332864)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addRows->...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(672055296))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6733185
		lastStepMessage: 	nil
		lastCycleTime: 	6733206
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	6733185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6733185
		lastStepMessage: 	nil
		lastCycleTime: 	6733206
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	6733185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6733185
		lastStepMessage: 	nil
		lastCycleTime: 	6733206
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	6733185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array class(Object)>>primitiveFailed:
Array class(Object)>>primitiveFailed
Array class(Behavior)>>basicNew:
Array class>>new:
SnakeGame>>addRows
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:30.298448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(634@145) mouseDown red 7376616 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(634@145) mouseDown red 7376616 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(634@145) mouseDown red 7376616 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(634@145) mouseDown red 7376616 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(634@145) mouseDown red 7376616 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	Color gray
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(634@145) mouseDown red 7376616 nil]
		firstClickUp: 	[(634@145) mouseUp 7376694 nil]
		firstClickTime: 	7376616
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7121027


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(634@145) mouseUp 7376694 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(634@145) mouseUp 7376694 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(634@145) mouseDown red 7376616 nil]
		firstClickUp: 	[(634@145) mouseUp 7376694 nil]
		firstClickTime: 	7376616
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7121027


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(634@145) mouseUp 7376694 nil]
		evt: 	[(634@145) mouseUp 7376694 nil]
	Receiver's instance variables: 
		bounds: 	(634@145.0) corner: (650@161.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(634@145.0) corner: (650@161.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a SystemWindow(598984704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(634@145) mouseUp 7376694 nil]
		targetOffset: 	(77.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7376694 634 145 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(634@145) mouseUp 7376694 nil]
		evtBuf: 	#(1 7376694 634 145 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(634@145.0) corner: (650@161.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(634@145.0) corner: (650@161.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a SystemWindow(598984704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(634@145) mouseUp 7376694 nil]
		targetOffset: 	(77.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7376694 634 145 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(634@145.0) corner: (650@161.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(634@145.0) corner: (650@161.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a SystemWindow(598984704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(634@145) mouseUp 7376694 nil]
		targetOffset: 	(77.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7376694 634 145 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7121090
		lastStepMessage: 	nil
		lastCycleTime: 	7121111
		alarms: 	a Heap()
		lastAlarmTime: 	7121090
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:32.275448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(774@182) mouseDown red 7378597 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(774@182) mouseDown red 7378597 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(774@182) mouseDown red 7378597 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(774@182) mouseDown red 7378597 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(774@182) mouseDown red 7378597 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	Color gray
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(774@182) mouseDown red 7378597 nil]
		firstClickUp: 	[(774@182) mouseUp 7378691 nil]
		firstClickTime: 	7378597
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7123007


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(774@182) mouseUp 7378691 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(774@182) mouseUp 7378691 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(774@182) mouseDown red 7378597 nil]
		firstClickUp: 	[(774@182) mouseUp 7378691 nil]
		firstClickTime: 	7378597
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7123007


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(774@182) mouseUp 7378691 nil]
		evt: 	[(774@182) mouseUp 7378691 nil]
	Receiver's instance variables: 
		bounds: 	(774@182.0) corner: (790@198.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(774@182.0) corner: (790@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(299064320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@182) mouseUp 7378691 nil]
		targetOffset: 	(217.0@63.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7378691 774 182 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(774@182) mouseUp 7378691 nil]
		evtBuf: 	#(1 7378691 774 182 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(774@182.0) corner: (790@198.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(774@182.0) corner: (790@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(299064320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@182) mouseUp 7378691 nil]
		targetOffset: 	(217.0@63.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7378691 774 182 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(774@182.0) corner: (790@198.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(774@182.0) corner: (790@198.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(299064320)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@182) mouseUp 7378691 nil]
		targetOffset: 	(217.0@63.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7378691 774 182 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7123070
		lastStepMessage: 	nil
		lastCycleTime: 	7123091
		alarms: 	a Heap()
		lastAlarmTime: 	7123070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:33.888448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(610@146) mouseDown red 7380188 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(610@146) mouseDown red 7380188 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(610@146) mouseDown red 7380188 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(610@146) mouseDown red 7380188 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(610@146) mouseDown red 7380188 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(610@146) mouseDown red 7380188 nil]
		firstClickUp: 	[(610@146) mouseUp 7380298 nil]
		firstClickTime: 	7380188
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7124598


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(610@146) mouseUp 7380298 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(610@146) mouseUp 7380298 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(610@146) mouseDown red 7380188 nil]
		firstClickUp: 	[(610@146) mouseUp 7380298 nil]
		firstClickTime: 	7380188
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7124598


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(610@146) mouseUp 7380298 nil]
		evt: 	[(610@146) mouseUp 7380298 nil]
	Receiver's instance variables: 
		bounds: 	(610@146.0) corner: (626@162.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(610@146.0) corner: (626@162.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(412581888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(610@146) mouseUp 7380298 nil]
		targetOffset: 	(53.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380298 610 146 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(610@146) mouseUp 7380298 nil]
		evtBuf: 	#(1 7380298 610 146 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(610@146.0) corner: (626@162.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(610@146.0) corner: (626@162.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(412581888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(610@146) mouseUp 7380298 nil]
		targetOffset: 	(53.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380298 610 146 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(610@146.0) corner: (626@162.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(610@146.0) corner: (626@162.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(412581888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(610@146) mouseUp 7380298 nil]
		targetOffset: 	(53.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380298 610 146 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	7124682
		lastStepMessage: 	nil
		lastCycleTime: 	7124703
		alarms: 	a Heap()
		lastAlarmTime: 	7124682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:34.511448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(583@129) mouseDown red 7380812 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(583@129) mouseDown red 7380812 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(583@129) mouseDown red 7380812 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(583@129) mouseDown red 7380812 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(583@129) mouseDown red 7380812 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(583@129) mouseDown red 7380812 nil]
		firstClickUp: 	[(583@129) mouseUp 7380922 nil]
		firstClickTime: 	7380812
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7125223


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(583@129) mouseUp 7380922 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(583@129) mouseUp 7380922 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(583@129) mouseDown red 7380812 nil]
		firstClickUp: 	[(583@129) mouseUp 7380922 nil]
		firstClickTime: 	7380812
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7125223


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(583@129) mouseUp 7380922 nil]
		evt: 	[(583@129) mouseUp 7380922 nil]
	Receiver's instance variables: 
		bounds: 	(583@129.0) corner: (599@145.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(583@129.0) corner: (599@145.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(1303552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(583@129) mouseUp 7380922 nil]
		targetOffset: 	(26.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380922 583 129 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(583@129) mouseUp 7380922 nil]
		evtBuf: 	#(1 7380922 583 129 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(583@129.0) corner: (599@145.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(583@129.0) corner: (599@145.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(1303552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(583@129) mouseUp 7380922 nil]
		targetOffset: 	(26.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380922 583 129 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(583@129.0) corner: (599@145.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(583@129.0) corner: (599@145.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(1303552)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(583@129) mouseUp 7380922 nil]
		targetOffset: 	(26.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7380922 583 129 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7125307
		lastStepMessage: 	nil
		lastCycleTime: 	7125328
		alarms: 	a Heap()
		lastAlarmTime: 	7125307
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
21 June 2017 7:03:35.830448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 5 at: 5
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(803682304) a SnakeCell(891154688) a SnakeCell(15365120) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(202301696)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(623@188) mouseDown red 7382123 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(623@188) mouseDown red 7382123 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(623@188) mouseDown red 7382123 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(623@188) mouseDown red 7382123 nil]
		sourceMorph: 	a SimpleButtonMorph(103103744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(103103744)
	Arguments and temporary variables: 
		evt: 	[(623@188) mouseDown red 7382123 nil]
	Receiver's instance variables: 
		bounds: 	(557.0@119.0) corner: (677.0@169.0)
		owner: 	a Morph(931406080)
		submorphs: 	an Array(a StringMorph(298796032)'Start')
		fullBounds: 	(557.0@119.0) corner: (677.0@169.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (1049216256) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(298796032)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@188) mouseDown red 7382123 nil]
		firstClickUp: 	[(623@188) mouseUp 7382232 nil]
		firstClickTime: 	7382123
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7126518


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(623@188) mouseUp 7382232 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(623@188) mouseUp 7382232 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(103103744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(623@188) mouseDown red 7382123 nil]
		firstClickUp: 	[(623@188) mouseUp 7382232 nil]
		firstClickTime: 	7382123
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	7126518


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(623@188) mouseUp 7382232 nil]
		evt: 	[(623@188) mouseUp 7382232 nil]
	Receiver's instance variables: 
		bounds: 	(623@188.0) corner: (639@204.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@188.0) corner: (639@204.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(741115904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@188) mouseUp 7382232 nil]
		targetOffset: 	(66.0@69.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7382232 623 188 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(623@188) mouseUp 7382232 nil]
		evtBuf: 	#(1 7382232 623 188 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(623@188.0) corner: (639@204.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@188.0) corner: (639@204.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(741115904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@188) mouseUp 7382232 nil]
		targetOffset: 	(66.0@69.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7382232 623 188 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(623@188.0) corner: (639@204.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(623@188.0) corner: (639@204.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(103103744)
		keyboardFocus: 	a PluggableButtonMorph(741115904)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@188) mouseUp 7382232 nil]
		targetOffset: 	(66.0@69.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7382232 623 188 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7126623
		lastStepMessage: 	nil
		lastCycleTime: 	7126644
		alarms: 	a Heap()
		lastAlarmTime: 	7126623
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:05:03.218448 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7213534
		lastStepMessage: 	nil
		lastCycleTime: 	7213555
		alarms: 	a Heap()
		lastAlarmTime: 	7213534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T17:04:49.411448+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:05:56.32128 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(728@374.0) corner: (744@390.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@374) mouseOver 7468641 nil]
		targetOffset: 	(331@125)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7468641 728 373 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	7213534
		lastStepMessage: 	nil
		lastCycleTime: 	7213555
		alarms: 	a Heap()
		lastAlarmTime: 	7213534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:06:49.38528 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@145)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(19177728) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1001@145)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(521@492.0) corner: (537@508.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(521@492) mouseOver 7574597 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7574597 521 492 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(521@492.0) corner: (537@508.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(521@492) mouseOver 7574597 nil]
		targetOffset: 	(31.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7574597 521 492 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	52665
		lastStepMessage: 	nil
		lastCycleTime: 	52686
		alarms: 	a Heap()
		lastAlarmTime: 	52665
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:05:56.15628+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:53.33228 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(649@215) mouseDown red 7579651 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(649@215) mouseDown red 7579651 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(649@215) mouseDown red 7579651 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(649@215) mouseDown red 7579651 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(649@215) mouseDown red 7579651 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(649@215) mouseDown red 7579651 nil]
		firstClickUp: 	[(649@215) mouseUp 7579729 nil]
		firstClickTime: 	7579651
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	57174


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(649@215) mouseUp 7579729 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(649@215) mouseUp 7579729 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(649@215) mouseDown red 7579651 nil]
		firstClickUp: 	[(649@215) mouseUp 7579729 nil]
		firstClickTime: 	7579651
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	57174


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(649@215) mouseUp 7579729 nil]
		evt: 	[(649@215) mouseUp 7579729 nil]
	Receiver's instance variables: 
		bounds: 	(649@215.0) corner: (665@231.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@215.0) corner: (665@231.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a SystemWindow(53765120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@215) mouseUp 7579729 nil]
		targetOffset: 	(35.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7579729 649 215 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(649@215) mouseUp 7579729 nil]
		evtBuf: 	#(1 7579729 649 215 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(649@215.0) corner: (665@231.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@215.0) corner: (665@231.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a SystemWindow(53765120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@215) mouseUp 7579729 nil]
		targetOffset: 	(35.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7579729 649 215 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(649@215.0) corner: (665@231.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@215.0) corner: (665@231.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a SystemWindow(53765120)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@215) mouseUp 7579729 nil]
		targetOffset: 	(35.0@19.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7579729 649 215 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	57218
		lastStepMessage: 	nil
		lastCycleTime: 	57238
		alarms: 	a Heap()
		lastAlarmTime: 	57218
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:55.03128 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(615@206) mouseDown red 7581336 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(615@206) mouseDown red 7581336 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(615@206) mouseDown red 7581336 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(615@206) mouseDown red 7581336 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(615@206) mouseDown red 7581336 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(615@206) mouseDown red 7581336 nil]
		firstClickUp: 	[(615@206) mouseUp 7581430 nil]
		firstClickTime: 	7581336
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	58847


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(615@206) mouseUp 7581430 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(615@206) mouseUp 7581430 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(615@206) mouseDown red 7581336 nil]
		firstClickUp: 	[(615@206) mouseUp 7581430 nil]
		firstClickTime: 	7581336
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	58847


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(615@206) mouseUp 7581430 nil]
		evt: 	[(615@206) mouseUp 7581430 nil]
	Receiver's instance variables: 
		bounds: 	(615@206.0) corner: (631@222.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(615@206.0) corner: (631@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(696936704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(615@206) mouseUp 7581430 nil]
		targetOffset: 	(1.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7581430 615 206 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(615@206) mouseUp 7581430 nil]
		evtBuf: 	#(1 7581430 615 206 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(615@206.0) corner: (631@222.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(615@206.0) corner: (631@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(696936704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(615@206) mouseUp 7581430 nil]
		targetOffset: 	(1.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7581430 615 206 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(615@206.0) corner: (631@222.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(615@206.0) corner: (631@222.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(696936704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(615@206) mouseUp 7581430 nil]
		targetOffset: 	(1.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7581430 615 206 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	58931
		lastStepMessage: 	nil
		lastCycleTime: 	58953
		alarms: 	a Heap()
		lastAlarmTime: 	58931
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:55.95828 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(619@224) mouseDown red 7582272 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(619@224) mouseDown red 7582272 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(619@224) mouseDown red 7582272 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(619@224) mouseDown red 7582272 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(619@224) mouseDown red 7582272 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(619@224) mouseDown red 7582272 nil]
		firstClickUp: 	[(619@224) mouseUp 7582366 nil]
		firstClickTime: 	7582272
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	59774


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(619@224) mouseUp 7582366 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(619@224) mouseUp 7582366 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(619@224) mouseDown red 7582272 nil]
		firstClickUp: 	[(619@224) mouseUp 7582366 nil]
		firstClickTime: 	7582272
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	59774


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(619@224) mouseUp 7582366 nil]
		evt: 	[(619@224) mouseUp 7582366 nil]
	Receiver's instance variables: 
		bounds: 	(619@224.0) corner: (635@240.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(619@224.0) corner: (635@240.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(334417152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(619@224) mouseUp 7582366 nil]
		targetOffset: 	(5.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7582366 619 224 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(619@224) mouseUp 7582366 nil]
		evtBuf: 	#(1 7582366 619 224 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(619@224.0) corner: (635@240.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(619@224.0) corner: (635@240.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(334417152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(619@224) mouseUp 7582366 nil]
		targetOffset: 	(5.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7582366 619 224 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(619@224.0) corner: (635@240.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(619@224.0) corner: (635@240.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(334417152)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(619@224) mouseUp 7582366 nil]
		targetOffset: 	(5.0@28.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7582366 619 224 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	59858
		lastStepMessage: 	nil
		lastCycleTime: 	59879
		alarms: 	a Heap()
		lastAlarmTime: 	59858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:56.83428 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(622@246) mouseDown red 7583130 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(622@246) mouseDown red 7583130 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(622@246) mouseDown red 7583130 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(622@246) mouseDown red 7583130 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(622@246) mouseDown red 7583130 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@246) mouseDown red 7583130 nil]
		firstClickUp: 	[(622@246) mouseUp 7583239 nil]
		firstClickTime: 	7583130
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	60651


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(622@246) mouseUp 7583239 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(622@246) mouseUp 7583239 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@246) mouseDown red 7583130 nil]
		firstClickUp: 	[(622@246) mouseUp 7583239 nil]
		firstClickTime: 	7583130
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	60651


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(622@246) mouseUp 7583239 nil]
		evt: 	[(622@246) mouseUp 7583239 nil]
	Receiver's instance variables: 
		bounds: 	(622@246.0) corner: (638@262.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@246.0) corner: (638@262.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(593293568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@246) mouseUp 7583239 nil]
		targetOffset: 	(8.0@50.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7583239 622 246 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(622@246) mouseUp 7583239 nil]
		evtBuf: 	#(1 7583239 622 246 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(622@246.0) corner: (638@262.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@246.0) corner: (638@262.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(593293568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@246) mouseUp 7583239 nil]
		targetOffset: 	(8.0@50.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7583239 622 246 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@246.0) corner: (638@262.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@246.0) corner: (638@262.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(593293568)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@246) mouseUp 7583239 nil]
		targetOffset: 	(8.0@50.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7583239 622 246 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	60735
		lastStepMessage: 	nil
		lastCycleTime: 	60757
		alarms: 	a Heap()
		lastAlarmTime: 	60735
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
21 June 2017 7:06:58.63028 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(294014976) a SnakeCell(150903040) a SnakeCell(52431872) a Sn...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
		messageArea: 	nil
	Receiver's instance variables: 
		container: 	a Morph(399083776)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(622@203) mouseDown red 7584940 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(622@203) mouseDown red 7584940 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	3
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil a MorphEventSubscription nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(622@203) mouseDown red 7584940 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(622@203) mouseDown red 7584940 nil]
		sourceMorph: 	a SimpleButtonMorph(318624000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(318624000)
	Arguments and temporary variables: 
		evt: 	[(622@203) mouseDown red 7584940 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(366318592)
		submorphs: 	an Array(a StringMorph(886009856)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.9380000000000001 g: 0.9380000000000001 b: 0.9380000000000001...etc...
		extension: 	a MorphExtension (517110016) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(886009856)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@203) mouseDown red 7584940 nil]
		firstClickUp: 	[(622@203) mouseUp 7585033 nil]
		firstClickTime: 	7584940
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	62445


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(622@203) mouseUp 7585033 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(622@203) mouseUp 7585033 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(318624000)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@203) mouseDown red 7584940 nil]
		firstClickUp: 	[(622@203) mouseUp 7585033 nil]
		firstClickTime: 	7584940
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	62445


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(622@203) mouseUp 7585033 nil]
		evt: 	[(622@203) mouseUp 7585033 nil]
	Receiver's instance variables: 
		bounds: 	(622@203.0) corner: (638@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@203.0) corner: (638@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(305714432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@203) mouseUp 7585033 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7585033 622 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(622@203) mouseUp 7585033 nil]
		evtBuf: 	#(1 7585033 622 203 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(622@203.0) corner: (638@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@203.0) corner: (638@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(305714432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@203) mouseUp 7585033 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7585033 622 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@203.0) corner: (638@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@203.0) corner: (638@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(318624000)
		keyboardFocus: 	a PluggableButtonMorph(305714432)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@203) mouseUp 7585033 nil]
		targetOffset: 	(8.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7585033 622 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	62529
		lastStepMessage: 	nil
		lastCycleTime: 	62551
		alarms: 	a Heap()
		lastAlarmTime: 	62529
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:15:18.077111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@50)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(628601600) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@50)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(799@446.0) corner: (815@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(791@437) mouseOver 8077482 nil]
		targetOffset: 	(126@97)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8077482 788 436 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(799@446.0) corner: (815@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(791@437) mouseOver 8077482 nil]
		targetOffset: 	(126@97)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8077482 788 436 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	284747
		lastStepMessage: 	nil
		lastCycleTime: 	284769
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	284747
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SimpleHierarchicalListMorph did not understand #fillRectangle:fillStyle:borderStyle:
21 June 2017 7:36:15.811111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
	Receiver: a SimpleHierarchicalListMorph(724824064)
	Arguments and temporary variables: 
		aMessage: 	fillRectangle: (0@0) corner: (150@120) fillStyle: Color transparent b...etc...
		exception: 	MessageNotUnderstood: SimpleHierarchicalListMorph>>fillRectangle:fil...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(315674624))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (187204352) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(282150912)
		scroller: 	a TransformMorph(315674624)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(468634368)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


BorderedMorph(Morph)>>drawOn:
	Receiver: a BorderedMorph(443695104)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(724824064)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (996006656)
		borderWidth: 	1
		borderColor: 	(Color r: 0.38 g: 0.638 b: 0.882 alpha: 1.0)


SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
	Receiver: a SimpleHierarchicalListMorph(724824064)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(724824064)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(315674624))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (187204352) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(282150912)
		scroller: 	a TransformMorph(315674624)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(468634368)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(572203008)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(572203008)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(68139776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1542846
		lastStepMessage: 	nil
		lastCycleTime: 	1542866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1542846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1542846
		lastStepMessage: 	nil
		lastCycleTime: 	1542866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1542846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1542846
		lastStepMessage: 	nil
		lastCycleTime: 	1542866
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1542846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
BorderedMorph(Morph)>>drawOn:
SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #drawKeyboardFocusOn:
21 June 2017 7:36:32.841111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #drawKeyboardFocusOn:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	drawKeyboardFocusOn: a SimpleHierarchicalListMorph(416977664)
		exception: 	MessageNotUnderstood: SnakeGame>>drawKeyboardFocusOn:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(906606592)
		model: 	<<error during printing>>

SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(906606592)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(906606592)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(324608000))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1559736
		lastStepMessage: 	nil
		lastCycleTime: 	1559757
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1559736
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1559736
		lastStepMessage: 	nil
		lastCycleTime: 	1559757
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1559736
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1559736
		lastStepMessage: 	nil
		lastCycleTime: 	1559757
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1559736
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #drawKeyboardFocusOn:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #content:
21 June 2017 7:38:00.416111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #content:
	Receiver: a TextMorph(743057408)
	Arguments and temporary variables: 
		aMessage: 	content: 'no'
		exception: 	MessageNotUnderstood: TextMorph>>content:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (120@21)
		owner: 	a Morph(950594304)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (436019200) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'Welcome to Snake'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(994641920)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(994641920)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(283867136))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1647459
		lastStepMessage: 	nil
		lastCycleTime: 	1647481
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1647459
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1647459
		lastStepMessage: 	nil
		lastCycleTime: 	1647481
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1647459
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	1647459
		lastStepMessage: 	nil
		lastCycleTime: 	1647481
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1647459
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #content:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #textArea
21 June 2017 7:38:36.447111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #textArea
	Receiver: a TextMorph(1018303232)
	Arguments and temporary variables: 
		aMessage: 	textArea
		exception: 	MessageNotUnderstood: TextMorph>>textArea
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (120@21)
		owner: 	a Morph(253638656)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (152001280) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'Welcome to Snake'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(626799360)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(626799360)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(460735232))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1683490
		lastStepMessage: 	nil
		lastCycleTime: 	1683511
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1683490
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1683490
		lastStepMessage: 	nil
		lastCycleTime: 	1683511
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1683490
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1683490
		lastStepMessage: 	nil
		lastCycleTime: 	1683511
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1683490
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #textArea
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SimpleHierarchicalListMorph did not understand #fillRectangle:fillStyle:borderStyle:
21 June 2017 7:41:58.463111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
	Receiver: a SimpleHierarchicalListMorph(278416128)
	Arguments and temporary variables: 
		aMessage: 	fillRectangle: (0@0) corner: (150@120) fillStyle: Color transparent b...etc...
		exception: 	MessageNotUnderstood: SimpleHierarchicalListMorph>>fillRectangle:fil...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(1048887296))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (1031410432) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(429275136)
		scroller: 	a TransformMorph(1048887296)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(358046464)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


BorderedMorph(Morph)>>drawOn:
	Receiver: a BorderedMorph(439889920)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(278416128)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (519578368)
		borderWidth: 	1
		borderColor: 	(Color r: 0.38 g: 0.638 b: 0.882 alpha: 1.0)


SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
	Receiver: a SimpleHierarchicalListMorph(278416128)
	Arguments and temporary variables: 
		aCanvas: 	a SimpleHierarchicalListMorph(278416128)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (150@120)
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(1048887296))
		fullBounds: 	nil
		color: 	(Color r: 0.13 g: 0.13 b: 0.13 alpha: 1.0)
		extension: 	a MorphExtension (1031410432) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		scrollBar: 	a ScrollBar(429275136)
		scroller: 	a TransformMorph(1048887296)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(358046464)
		selectedMorph: 	nil
		getListSelector: 	nil
		keystrokeActionSelector: 	nil
		autoDeselect: 	nil
		columns: 	nil
		sortingSelector: 	nil
		getSelectionSelector: 	nil
		setSelectionSelector: 	nil
		potentialDropMorph: 	nil
		lineColor: 	nil
		lastSelection: 	0
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		searchedElement: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(113346560)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(113346560)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(13891584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1885500
		lastStepMessage: 	nil
		lastCycleTime: 	1885521
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1885500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1885500
		lastStepMessage: 	nil
		lastCycleTime: 	1885521
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1885500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	1885500
		lastStepMessage: 	nil
		lastCycleTime: 	1885521
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	1885500
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SimpleHierarchicalListMorph(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
BorderedMorph(Morph)>>drawOn:
SimpleHierarchicalListMorph(Morph)>>drawKeyboardFocusOn:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.164111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(856@260.0) (891@443) mouseEnter 10490412 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(856@260.0) (891@443) mouseEnter 10490412 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490412
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(891@443)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(856@260.0)
		trail: 	{(856@264). (857@274). (861@294). (865@326). (874@370). (881@410). (886@...etc...


MouseMoveEvent>>sentTo:
	Receiver: [(856@260.0) (891@443) mouseEnter 10490412 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490412
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(891@443)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(856@260.0)
		trail: 	{(856@264). (857@274). (861@294). (865@326). (874@370). (881@410). (886@...etc...


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		originalEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		asMouseEnterEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		asMouseEnterEvent: 	[(856@260.0) (891@443) mouseEnter 10490412 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(564955904) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		evt: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
	Receiver's instance variables: 
		bounds: 	(891@443.0) corner: (907@459.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(891@443.0) corner: (907@459.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(891@443) mouseOver 10490412 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490412 856 264 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(856@260.0) (891@443) mouseMove 10490412 nil]
		evtBuf: 	#(1 10490412 856 264 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(891@443.0) corner: (907@459.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(891@443.0) corner: (907@459.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(891@443) mouseOver 10490412 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490412 856 264 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(891@443.0) corner: (907@459.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(891@443.0) corner: (907@459.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(891@443) mouseOver 10490412 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490412 856 264 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691258
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.230111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(891@443.0) (892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(891@443.0) (892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(891@443.0)
		trail: 	{(891@444). (892@446)}


MouseMoveEvent>>sentTo:
	Receiver: [(891@443.0) (892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(891@443.0)
		trail: 	{(891@444). (892@446)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		asMouseEnterEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		asMouseEnterEvent: 	[(891@443.0) (892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		evt: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(891@443.0) (892@446) mouseMove 10490568 nil]
		evtBuf: 	#(1 10490568 891 444 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691343
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.266111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.297111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691414
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.328111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691445
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.359111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691475
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.390111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446) mouseEnter 10490568 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(892@446) mouseEnter 10490568 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490568
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(892@446)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseEnter 10490568 nil]
		originalEvent: 	[(892@446) mouseOver 10490568 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446) mouseEnter 10490568 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
		asMouseEnterEvent: 	[(892@446) mouseEnter 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446) mouseOver 10490568 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(168056832) a Morph(592329472) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(892@446.0) corner: (908@462.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(892@446.0) corner: (908@462.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(892@446) mouseOver 10490568 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490568 891 444 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691507
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.424111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(892@446.0) (894@445) mouseEnter 10490833 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(892@446.0) (894@445) mouseEnter 10490833 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490833
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(894@445)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(892@446.0)
		trail: 	{(894@445)}


MouseMoveEvent>>sentTo:
	Receiver: [(892@446.0) (894@445) mouseEnter 10490833 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490833
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(894@445)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(892@446.0)
		trail: 	{(894@445)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		originalEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		asMouseEnterEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		asMouseEnterEvent: 	[(892@446.0) (894@445) mouseEnter 10490833 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		evt: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
	Receiver's instance variables: 
		bounds: 	(894@445.0) corner: (910@461.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(894@445.0) corner: (910@461.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(894@445) mouseOver 10490833 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490833 894 445 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(892@446.0) (894@445) mouseMove 10490833 nil]
		evtBuf: 	#(1 10490833 894 445 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(894@445.0) corner: (910@461.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(894@445.0) corner: (910@461.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(894@445) mouseOver 10490833 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490833 894 445 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(894@445.0) corner: (910@461.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(894@445.0) corner: (910@461.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(894@445) mouseOver 10490833 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490833 894 445 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691540
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.462111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(894@445.0) (898@433) mouseEnter 10490848 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(894@445.0) (898@433) mouseEnter 10490848 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490848
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(898@433)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(894@445.0)
		trail: 	{(896@440). (898@433)}


MouseMoveEvent>>sentTo:
	Receiver: [(894@445.0) (898@433) mouseEnter 10490848 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490848
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(898@433)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(894@445.0)
		trail: 	{(896@440). (898@433)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		originalEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		asMouseEnterEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		asMouseEnterEvent: 	[(894@445.0) (898@433) mouseEnter 10490848 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(547266560) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		evt: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
	Receiver's instance variables: 
		bounds: 	(898@433.0) corner: (914@449.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(898@433.0) corner: (914@449.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(898@433) mouseOver 10490848 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490848 896 440 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(894@445.0) (898@433) mouseMove 10490848 nil]
		evtBuf: 	#(1 10490848 896 440 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(898@433.0) corner: (914@449.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(898@433.0) corner: (914@449.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(898@433) mouseOver 10490848 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490848 896 440 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(898@433.0) corner: (914@449.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(898@433.0) corner: (914@449.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(898@433) mouseOver 10490848 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490848 896 440 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691578
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.502111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(898@433.0) (903@418) mouseEnter 10490880 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(898@433.0) (903@418) mouseEnter 10490880 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490880
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(903@418)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(898@433.0)
		trail: 	{(901@426). (903@418)}


MouseMoveEvent>>sentTo:
	Receiver: [(898@433.0) (903@418) mouseEnter 10490880 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490880
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(903@418)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(898@433.0)
		trail: 	{(901@426). (903@418)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		originalEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		asMouseEnterEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		asMouseEnterEvent: 	[(898@433.0) (903@418) mouseEnter 10490880 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(829768448) a Morph(161646592) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		evt: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
	Receiver's instance variables: 
		bounds: 	(903@418.0) corner: (919@434.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(903@418.0) corner: (919@434.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(903@418) mouseOver 10490880 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490880 901 426 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(898@433.0) (903@418) mouseMove 10490880 nil]
		evtBuf: 	#(1 10490880 901 426 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(903@418.0) corner: (919@434.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(903@418.0) corner: (919@434.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(903@418) mouseOver 10490880 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490880 901 426 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(903@418.0) corner: (919@434.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(903@418.0) corner: (919@434.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(903@418) mouseOver 10490880 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490880 901 426 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691619
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.540111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(903@418.0) (908@403) mouseEnter 10490926 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(903@418.0) (908@403) mouseEnter 10490926 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490926
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(908@403)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(903@418.0)
		trail: 	{(906@410). (908@403)}


MouseMoveEvent>>sentTo:
	Receiver: [(903@418.0) (908@403) mouseEnter 10490926 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490926
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(908@403)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(903@418.0)
		trail: 	{(906@410). (908@403)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		originalEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		asMouseEnterEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		asMouseEnterEvent: 	[(903@418.0) (908@403) mouseEnter 10490926 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		evt: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
	Receiver's instance variables: 
		bounds: 	(908@403.0) corner: (924@419.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(908@403.0) corner: (924@419.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(908@403) mouseOver 10490926 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490926 906 410 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(903@418.0) (908@403) mouseMove 10490926 nil]
		evtBuf: 	#(1 10490926 906 410 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(908@403.0) corner: (924@419.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(908@403.0) corner: (924@419.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(908@403) mouseOver 10490926 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490926 906 410 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(908@403.0) corner: (924@419.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(908@403.0) corner: (924@419.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(908@403) mouseOver 10490926 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490926 906 410 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691657
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.577111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(908@403.0) (909@392) mouseEnter 10490973 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(908@403.0) (909@392) mouseEnter 10490973 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490973
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(909@392)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(908@403.0)
		trail: 	{(908@397). (909@392)}


MouseMoveEvent>>sentTo:
	Receiver: [(908@403.0) (909@392) mouseEnter 10490973 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10490973
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(909@392)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(908@403.0)
		trail: 	{(908@397). (909@392)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		originalEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		asMouseEnterEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		asMouseEnterEvent: 	[(908@403.0) (909@392) mouseEnter 10490973 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(81613568) a Morph(513079296) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		evt: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
	Receiver's instance variables: 
		bounds: 	(909@392.0) corner: (925@408.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(909@392.0) corner: (925@408.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(909@392) mouseOver 10490973 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490973 908 397 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(908@403.0) (909@392) mouseMove 10490973 nil]
		evtBuf: 	#(1 10490973 908 397 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(909@392.0) corner: (925@408.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(909@392.0) corner: (925@408.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(909@392) mouseOver 10490973 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490973 908 397 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(909@392.0) corner: (925@408.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(909@392.0) corner: (925@408.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(909@392) mouseOver 10490973 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10490973 908 397 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691694
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.614111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(909@392.0) (912@385) mouseEnter 10491004 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(909@392.0) (912@385) mouseEnter 10491004 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491004
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@385)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(909@392.0)
		trail: 	{(911@387). (912@385)}


MouseMoveEvent>>sentTo:
	Receiver: [(909@392.0) (912@385) mouseEnter 10491004 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491004
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@385)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(909@392.0)
		trail: 	{(911@387). (912@385)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		originalEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		asMouseEnterEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		asMouseEnterEvent: 	[(909@392.0) (912@385) mouseEnter 10491004 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		evt: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
	Receiver's instance variables: 
		bounds: 	(912@385.0) corner: (928@401.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@385.0) corner: (928@401.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@385) mouseOver 10491004 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491004 911 387 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(909@392.0) (912@385) mouseMove 10491004 nil]
		evtBuf: 	#(1 10491004 911 387 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@385.0) corner: (928@401.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@385.0) corner: (928@401.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@385) mouseOver 10491004 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491004 911 387 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@385.0) corner: (928@401.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@385.0) corner: (928@401.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@385) mouseOver 10491004 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491004 911 387 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691731
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.650111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@385.0) (912@382) mouseEnter 10491036 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(912@385.0) (912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@385.0)
		trail: 	{(912@383). (912@382)}


MouseMoveEvent>>sentTo:
	Receiver: [(912@385.0) (912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@385.0)
		trail: 	{(912@383). (912@382)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		originalEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		asMouseEnterEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		asMouseEnterEvent: 	[(912@385.0) (912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		evt: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(912@385.0) (912@382) mouseMove 10491036 nil]
		evtBuf: 	#(1 10491036 912 383 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691767
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.685111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@382) mouseEnter 10491036 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
		originalEvent: 	[(912@382) mouseOver 10491036 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'W']
		evt: 	[keyDown 'W']
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'W']
		evtBuf: 	#(2 10491098 87 1 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691803
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.722111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@382) mouseEnter 10491036 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(912@382) mouseEnter 10491036 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491036
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(912@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseEnter 10491036 nil]
		originalEvent: 	[(912@382) mouseOver 10491036 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382) mouseEnter 10491036 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
		asMouseEnterEvent: 	[(912@382) mouseEnter 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382) mouseOver 10491036 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		evt: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'w']
		evtBuf: 	#(2 10491114 119 0 0 119 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(912@382.0) corner: (928@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(912@382.0) corner: (928@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(912@382) mouseOver 10491036 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491036 912 383 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691838
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.756111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(912@382.0) (913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(912@382.0) (913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@382.0)
		trail: 	{(913@382)}


MouseMoveEvent>>sentTo:
	Receiver: [(912@382.0) (913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(912@382.0)
		trail: 	{(913@382)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		asMouseEnterEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		asMouseEnterEvent: 	[(912@382.0) (913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		evt: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(912@382.0) (913@382) mouseMove 10491098 nil]
		evtBuf: 	#(1 10491098 913 382 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691873
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.791111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10491145 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691908
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.826111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10491145 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691943
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.861111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'D']
		evt: 	[keyDown 'D']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'D']
		evtBuf: 	#(2 10491192 68 1 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2691978
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.894111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 10491207 100 0 0 100 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692011
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.929111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'W']
		evt: 	[keyUp 'W']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'W']
		evtBuf: 	#(2 10491238 87 2 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692046
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.964111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10491285 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692081
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:24.997111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'D']
		evt: 	[keyUp 'D']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'D']
		evtBuf: 	#(2 10491363 68 2 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692114
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.031111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10491379 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692149
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.066111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10491394 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692182
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.100111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'S']
		evt: 	[keyDown 'S']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'S']
		evtBuf: 	#(2 10491488 83 1 0 83 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.137111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382) mouseEnter 10491098 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(913@382) mouseEnter 10491098 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491098
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(913@382)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseEnter 10491098 nil]
		originalEvent: 	[(913@382) mouseOver 10491098 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382) mouseEnter 10491098 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
		asMouseEnterEvent: 	[(913@382) mouseEnter 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382) mouseOver 10491098 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(510372608) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 's']
		evt: 	[keystroke 's']
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 's']
		evtBuf: 	#(2 10491488 115 0 0 115 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(913@382.0) corner: (929@398.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(913@382.0) corner: (929@398.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(913@382) mouseOver 10491098 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491098 913 382 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692254
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.174111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(913@382.0) (890@375) mouseEnter 10491550 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(913@382.0) (890@375) mouseEnter 10491550 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491550
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(890@375)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(913@382.0)
		trail: 	{(906@380). (890@375)}


MouseMoveEvent>>sentTo:
	Receiver: [(913@382.0) (890@375) mouseEnter 10491550 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491550
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(890@375)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(913@382.0)
		trail: 	{(906@380). (890@375)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		originalEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		asMouseEnterEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		asMouseEnterEvent: 	[(913@382.0) (890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		evt: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(913@382.0) (890@375) mouseMove 10491550 nil]
		evtBuf: 	#(1 10491550 906 380 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692290
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.212111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(890@375) mouseEnter 10491550 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(890@375) mouseEnter 10491550 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491550
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(890@375)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseEnter 10491550 nil]
		originalEvent: 	[(890@375) mouseOver 10491550 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375) mouseEnter 10491550 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		asMouseEnterEvent: 	[(890@375) mouseEnter 10491550 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseOver 10491550 nil]
		asMouseEnterEvent: 	[(890@375) mouseEnter 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375) mouseOver 10491550 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(753875712) a Morph(784883712) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10491566 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(890@375.0) corner: (906@391.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(890@375.0) corner: (906@391.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(890@375) mouseOver 10491550 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491550 906 380 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692329
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.250111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(890@375.0) (800@344) mouseEnter 10491566 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(890@375.0) (800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(890@375.0)
		trail: 	{(887@374). (856@364). (818@351). (800@344)}


MouseMoveEvent>>sentTo:
	Receiver: [(890@375.0) (800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(890@375.0)
		trail: 	{(887@374). (856@364). (818@351). (800@344)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		originalEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		asMouseEnterEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		asMouseEnterEvent: 	[(890@375.0) (800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		evt: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(890@375.0) (800@344) mouseMove 10491566 nil]
		evtBuf: 	#(1 10491566 887 374 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692367
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.289111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(800@344) mouseEnter 10491566 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
		originalEvent: 	[(800@344) mouseOver 10491566 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'D']
		evt: 	[keyDown 'D']
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'D']
		evtBuf: 	#(2 10491613 68 1 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692405
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.324111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(800@344) mouseEnter 10491566 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(800@344) mouseEnter 10491566 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491566
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(800@344)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseEnter 10491566 nil]
		originalEvent: 	[(800@344) mouseOver 10491566 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344) mouseEnter 10491566 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(874255104) a SystemWindow(5701...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
		asMouseEnterEvent: 	[(800@344) mouseEnter 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344) mouseOver 10491566 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(201113600) a Morph(1052906240) a Morph(8742...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 10491628 100 0 0 100 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(800@344.0) corner: (816@360.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(800@344.0) corner: (816@360.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(800@344) mouseOver 10491566 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491566 887 374 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692441
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.362111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(800@344.0) (730@306) mouseEnter 10491628 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(800@344.0) (730@306) mouseEnter 10491628 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491628
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(730@306)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(800@344.0)
		trail: 	{(777@335). (746@318). (730@306)}


MouseMoveEvent>>sentTo:
	Receiver: [(800@344.0) (730@306) mouseEnter 10491628 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491628
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(730@306)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(800@344.0)
		trail: 	{(777@335). (746@318). (730@306)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		originalEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		asMouseEnterEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		asMouseEnterEvent: 	[(800@344.0) (730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		evt: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(800@344.0) (730@306) mouseMove 10491628 nil]
		evtBuf: 	#(1 10491628 777 335 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692478
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.397111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(730@306) mouseEnter 10491628 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(730@306) mouseEnter 10491628 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491628
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(730@306)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseEnter 10491628 nil]
		originalEvent: 	[(730@306) mouseOver 10491628 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306) mouseEnter 10491628 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		asMouseEnterEvent: 	[(730@306) mouseEnter 10491628 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseOver 10491628 nil]
		asMouseEnterEvent: 	[(730@306) mouseEnter 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306) mouseOver 10491628 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(503685120) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'S']
		evt: 	[keyUp 'S']
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'S']
		evtBuf: 	#(2 10491660 83 2 0 83 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(730@306.0) corner: (746@322.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(730@306.0) corner: (746@322.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@306) mouseOver 10491628 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491628 777 335 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692515
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.435111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(730@306.0) (704@265) mouseEnter 10491660 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(730@306.0) (704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(730@306.0)
		trail: 	{(725@301). (712@285). (707@276). (706@271). (706@268). (705@266). (704@...etc...


MouseMoveEvent>>sentTo:
	Receiver: [(730@306.0) (704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(730@306.0)
		trail: 	{(725@301). (712@285). (707@276). (706@271). (706@268). (705@266). (704@...etc...


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		originalEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		asMouseEnterEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		asMouseEnterEvent: 	[(730@306.0) (704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		evt: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(730@306.0) (704@265) mouseMove 10491660 nil]
		evtBuf: 	#(1 10491660 725 301 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692552
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.473111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(704@265) mouseEnter 10491660 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
		originalEvent: 	[(704@265) mouseOver 10491660 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10491784 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692590
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.507111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(704@265) mouseEnter 10491660 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(704@265) mouseEnter 10491660 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491660
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(704@265)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseEnter 10491660 nil]
		originalEvent: 	[(704@265) mouseOver 10491660 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265) mouseEnter 10491660 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
		asMouseEnterEvent: 	[(704@265) mouseEnter 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265) mouseOver 10491660 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10491784 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(704@265.0) corner: (720@281.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@265.0) corner: (720@281.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@265) mouseOver 10491660 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491660 725 301 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692625
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.543111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(704@265.0) (703@262) mouseEnter 10491784 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(704@265.0) (703@262) mouseEnter 10491784 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491784
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(703@262)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(704@265.0)
		trail: 	{(704@264). (703@262)}


MouseMoveEvent>>sentTo:
	Receiver: [(704@265.0) (703@262) mouseEnter 10491784 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491784
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(703@262)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(704@265.0)
		trail: 	{(704@264). (703@262)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		originalEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		asMouseEnterEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		asMouseEnterEvent: 	[(704@265.0) (703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		evt: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(704@265.0) (703@262) mouseMove 10491784 nil]
		evtBuf: 	#(1 10491784 704 264 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692660
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.599111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(703@262) mouseEnter 10491784 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(703@262) mouseEnter 10491784 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491784
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(703@262)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseEnter 10491784 nil]
		originalEvent: 	[(703@262) mouseOver 10491784 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262) mouseEnter 10491784 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		asMouseEnterEvent: 	[(703@262) mouseEnter 10491784 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseOver 10491784 nil]
		asMouseEnterEvent: 	[(703@262) mouseEnter 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262) mouseOver 10491784 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'D']
		evt: 	[keyUp 'D']
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'D']
		evtBuf: 	#(2 10491816 68 2 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(703@262.0) corner: (719@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(703@262.0) corner: (719@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(703@262) mouseOver 10491784 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491784 704 264 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692715
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.633111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(703@262.0) (694@253) mouseEnter 10491831 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(703@262.0) (694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(703@262.0)
		trail: 	{(701@260). (699@257). (696@255). (694@253)}


MouseMoveEvent>>sentTo:
	Receiver: [(703@262.0) (694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(703@262.0)
		trail: 	{(701@260). (699@257). (696@255). (694@253)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		originalEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		asMouseEnterEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		asMouseEnterEvent: 	[(703@262.0) (694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		evt: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(703@262.0) (694@253) mouseMove 10491831 nil]
		evtBuf: 	#(1 10491831 701 260 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692750
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.668111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(694@253) mouseEnter 10491831 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
		originalEvent: 	[(694@253) mouseOver 10491831 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'W']
		evt: 	[keyDown 'W']
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'W']
		evtBuf: 	#(2 10491894 87 1 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692785
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.703111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(694@253) mouseEnter 10491831 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(694@253) mouseEnter 10491831 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491831
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(694@253)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseEnter 10491831 nil]
		originalEvent: 	[(694@253) mouseOver 10491831 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253) mouseEnter 10491831 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
		asMouseEnterEvent: 	[(694@253) mouseEnter 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253) mouseOver 10491831 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(532252672) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		evt: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'w']
		evtBuf: 	#(2 10491909 119 0 0 119 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(694@253.0) corner: (710@269.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@253.0) corner: (710@269.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@253) mouseOver 10491831 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491831 701 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692820
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.737111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(694@253.0) (691@250) mouseEnter 10491909 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(694@253.0) (691@250) mouseEnter 10491909 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491909
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(691@250)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(694@253.0)
		trail: 	{(692@251). (691@250)}


MouseMoveEvent>>sentTo:
	Receiver: [(694@253.0) (691@250) mouseEnter 10491909 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491909
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(691@250)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(694@253.0)
		trail: 	{(692@251). (691@250)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		originalEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		asMouseEnterEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		asMouseEnterEvent: 	[(694@253.0) (691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		evt: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(694@253.0) (691@250) mouseMove 10491909 nil]
		evtBuf: 	#(1 10491909 692 251 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692854
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.773111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(691@250) mouseEnter 10491909 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(691@250) mouseEnter 10491909 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491909
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(691@250)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseEnter 10491909 nil]
		originalEvent: 	[(691@250) mouseOver 10491909 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250) mouseEnter 10491909 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		asMouseEnterEvent: 	[(691@250) mouseEnter 10491909 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseOver 10491909 nil]
		asMouseEnterEvent: 	[(691@250) mouseEnter 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250) mouseOver 10491909 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SnakeCell(434162432) a Morph(957763584) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10491909 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(691@250.0) corner: (707@266.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(691@250.0) corner: (707@266.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(691@250) mouseOver 10491909 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491909 692 251 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692890
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.809111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(691@250.0) (685@243) mouseEnter 10491925 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(691@250.0) (685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(691@250.0)
		trail: 	{(690@248). (688@245). (685@243)}


MouseMoveEvent>>sentTo:
	Receiver: [(691@250.0) (685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(691@250.0)
		trail: 	{(690@248). (688@245). (685@243)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		originalEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		asMouseEnterEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		asMouseEnterEvent: 	[(691@250.0) (685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		evt: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(691@250.0) (685@243) mouseMove 10491925 nil]
		evtBuf: 	#(1 10491925 690 248 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692926
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.843111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(685@243) mouseEnter 10491925 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
		originalEvent: 	[(685@243) mouseOver 10491925 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'D']
		evt: 	[keyDown 'D']
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'D']
		evtBuf: 	#(2 10491972 68 1 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692961
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.879111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(685@243) mouseEnter 10491925 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(685@243) mouseEnter 10491925 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491925
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(685@243)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseEnter 10491925 nil]
		originalEvent: 	[(685@243) mouseOver 10491925 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243) mouseEnter 10491925 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
		asMouseEnterEvent: 	[(685@243) mouseEnter 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243) mouseOver 10491925 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 10491987 100 0 0 100 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(685@243.0) corner: (701@259.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(685@243.0) corner: (701@259.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(685@243) mouseOver 10491925 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491925 690 248 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2692996
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.916111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(685@243.0) (684@240) mouseEnter 10491987 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(685@243.0) (684@240) mouseEnter 10491987 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491987
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(684@240)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(685@243.0)
		trail: 	{(684@241). (684@240)}


MouseMoveEvent>>sentTo:
	Receiver: [(685@243.0) (684@240) mouseEnter 10491987 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491987
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(684@240)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(685@243.0)
		trail: 	{(684@241). (684@240)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		originalEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		asMouseEnterEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		asMouseEnterEvent: 	[(685@243.0) (684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		evt: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(685@243.0) (684@240) mouseMove 10491987 nil]
		evtBuf: 	#(1 10491987 684 241 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693031
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.954111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(684@240) mouseEnter 10491987 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(684@240) mouseEnter 10491987 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10491987
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(684@240)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseEnter 10491987 nil]
		originalEvent: 	[(684@240) mouseOver 10491987 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240) mouseEnter 10491987 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		asMouseEnterEvent: 	[(684@240) mouseEnter 10491987 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseOver 10491987 nil]
		asMouseEnterEvent: 	[(684@240) mouseEnter 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240) mouseOver 10491987 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'W']
		evt: 	[keyUp 'W']
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'W']
		evtBuf: 	#(2 10492003 87 2 0 87 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(684@240.0) corner: (700@256.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(684@240.0) corner: (700@256.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(684@240) mouseOver 10491987 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10491987 684 241 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693070
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:25.992111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(684@240.0) (682@230) mouseEnter 10492018 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(684@240.0) (682@230) mouseEnter 10492018 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492018
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@230)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(684@240.0)
		trail: 	{(683@238). (682@236). (682@234). (682@232). (682@230)}


MouseMoveEvent>>sentTo:
	Receiver: [(684@240.0) (682@230) mouseEnter 10492018 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492018
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@230)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(684@240.0)
		trail: 	{(683@238). (682@236). (682@234). (682@232). (682@230)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		originalEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		asMouseEnterEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		asMouseEnterEvent: 	[(684@240.0) (682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		evt: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(684@240.0) (682@230) mouseMove 10492018 nil]
		evtBuf: 	#(1 10492018 683 238 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693109
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.029111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@230) mouseEnter 10492018 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@230) mouseEnter 10492018 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492018
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@230)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseEnter 10492018 nil]
		originalEvent: 	[(682@230) mouseOver 10492018 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230) mouseEnter 10492018 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		asMouseEnterEvent: 	[(682@230) mouseEnter 10492018 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseOver 10492018 nil]
		asMouseEnterEvent: 	[(682@230) mouseEnter 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230) mouseOver 10492018 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'D']
		evt: 	[keyUp 'D']
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'D']
		evtBuf: 	#(2 10492096 68 2 0 68 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@230.0) corner: (698@246.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@230.0) corner: (698@246.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@230) mouseOver 10492018 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492018 683 238 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693146
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.064111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@230.0) (682@229) mouseEnter 10492096 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(682@230.0) (682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@230.0)
		trail: 	{(682@229)}


MouseMoveEvent>>sentTo:
	Receiver: [(682@230.0) (682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@230.0)
		trail: 	{(682@229)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		originalEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		asMouseEnterEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		asMouseEnterEvent: 	[(682@230.0) (682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		evt: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@230.0) (682@229) mouseMove 10492096 nil]
		evtBuf: 	#(1 10492096 682 229 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693181
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.100111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@229) mouseEnter 10492096 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
		originalEvent: 	[(682@229) mouseOver 10492096 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyDown 'A']
		evt: 	[keyDown 'A']
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyDown 'A']
		evtBuf: 	#(2 10492096 65 1 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693217
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.134111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@229) mouseEnter 10492096 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@229) mouseEnter 10492096 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492096
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@229)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseEnter 10492096 nil]
		originalEvent: 	[(682@229) mouseOver 10492096 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229) mouseEnter 10492096 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
		asMouseEnterEvent: 	[(682@229) mouseEnter 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229) mouseOver 10492096 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 10492128 97 0 0 97 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@229.0) corner: (698@245.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@229.0) corner: (698@245.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@229) mouseOver 10492096 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492096 682 229 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693251
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.168111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@229.0) (682@228) mouseEnter 10492112 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(682@229.0) (682@228) mouseEnter 10492112 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492112
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@228)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@229.0)
		trail: 	{(682@228)}


MouseMoveEvent>>sentTo:
	Receiver: [(682@229.0) (682@228) mouseEnter 10492112 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492112
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@228)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@229.0)
		trail: 	{(682@228)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		originalEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		asMouseEnterEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		asMouseEnterEvent: 	[(682@229.0) (682@228) mouseEnter 10492112 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		evt: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver 10492112 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492112 682 228 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@229.0) (682@228) mouseMove 10492112 nil]
		evtBuf: 	#(1 10492112 682 228 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver 10492112 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492112 682 228 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver 10492112 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492112 682 228 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693285
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseDown:
21 June 2017 7:55:26.205111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseDown:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseDown: [(682@228) mouseDown red 10492143 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseDown:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseDown:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handlerForMouseDown:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
		globalPt: 	(682@228)
		localEvt: 	nil
		index: 	nil
		child: 	nil
		morphs: 	nil
		handler: 	nil
		inside: 	nil
		lastHandler: 	a SystemWindow(570172160)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseDown red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(682@228)
		handler: 	a SystemWindow(570172160)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


Morph>>processEvent:using:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a SystemWindow(570172160)
		globalPt: 	(682@228)
		localEvt: 	[(682@228) mouseDown red 10492143 nil]
		index: 	10
		child: 	a Morph(874255104)
		morphs: 	an Array(a WindowEdgeGripMorph(300386304) a WindowEdgeGripMorph(9344478...etc...
		handler: 	a SystemWindow(570172160)
		inside: 	nil
		lastHandler: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseDown red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(682@228)
		handler: 	a SystemWindow(570172160)
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a SystemWindow(570172160)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a SystemWindow(570172160)
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


SystemWindow(Morph)>>processEvent:using:
	Receiver: a SystemWindow(570172160)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(609.0@168.0) corner: (1119.0@751.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(300386304) a WindowEdgeGripMorph(9344...etc...
		fullBounds: 	(609@168) corner: (1119@751)
		color: 	Color veryDarkGray
		extension: 	a MorphExtension (719618048) [other:  (paneColor -> Color veryDarkGr...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.135 g: 0.135 b: 0.135 alpha: 1.0)
		model: 	nil
		labelString: 	'Snake'
		stripes: 	an Array(a Morph(1068520192) a Morph(289011712))
		label: 	a LabelMorph(887724800)'Snake'
		closeBox: 	a MultistateButtonMorph(350220288)
		collapseBox: 	a MultistateButtonMorph(975594240)
		paneMorphs: 	an Array(a Morph(874255104))
		collapsedFrame: 	nil
		fullFrame: 	(609.0@168.0) corner: (1119.0@751.0)
		isCollapsed: 	false
		menuBox: 	a MultistateButtonMorph(776890368)
		mustNotClose: 	false
		labelWidgetAllowance: 	133
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(497986304)
		expandBox: 	a MultistateButtonMorph(914186240)
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	true


MorphicEventDispatcher>>dispatchMouseDown:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a WorldMorph(562956288) [world]
		globalPt: 	(682@228)
		localEvt: 	[(682@228) mouseDown red 10492143 nil]
		index: 	3
		child: 	a SystemWindow(570172160)
		morphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWindo...etc...
		handler: 	a WorldMorph(562956288) [world]
		inside: 	nil
		lastHandler: 	nil
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MorphicEventDispatcher>>handleMouseDown:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseDown red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseDown
		buttons: 	4
		position: 	(682@228)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	28
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		morph: 	a Morph(874255104)


WorldMorph(Morph)>>processEvent:using:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(Morph)>>processEvent:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		focusHolder: 	nil
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		evt: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@228) mouseDown red 10492143 nil]
		evtBuf: 	#(1 10492143 682 228 4 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseDown red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693319
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseDown:
Morph>>handlesMouseDown:
Morph>>handlerForMouseDown:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
Morph>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
SystemWindow(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchMouseDown:with:
MorphicEventDispatcher>>handleMouseDown:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
WorldMorph(Morph)>>processEvent:using:
WorldMorph(Morph)>>processEvent:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOverDragging:
21 June 2017 7:55:26.266111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOverDragging: [(682@228) mouseEnter red 10492143 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOverDragging:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOverDragging:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseButtonEvent(MouseEvent)>>sentTo:
	Receiver: [(682@228) mouseEnter red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@228)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	4


MouseButtonEvent>>sentTo:
	Receiver: [(682@228) mouseEnter red 10492143 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492143
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@228)
		handler: 	a WorldMorph(562956288) [world]
		wasHandled: 	false
		whichButton: 	4


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseEnter red 10492143 nil]
		originalEvent: 	[(682@228) mouseDown red 10492143 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseEnter red 10492143 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228) mouseEnter red 10492143 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		asMouseEnterEvent: 	[(682@228) mouseEnter red 10492143 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
		asMouseEnterEvent: 	[(682@228) mouseEnter red 10492143 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228) mouseDown red 10492143 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	nil
		evtBuf: 	nil
		type: 	nil
		hadAny: 	nil
	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@228.0) corner: (698@244.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@228.0) corner: (698@244.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@228) mouseOver red 10492143 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492143 682 228 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693383
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
Morph>>handlesMouseOverDragging:
Morph>>handleMouseEnter:
MouseButtonEvent(MouseEvent)>>sentTo:
MouseButtonEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOverDragging:
21 June 2017 7:55:26.300111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOverDragging: [(682@228.0) (682@227) mouseEnter red 10492...etc...
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOverDragging:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOverDragging:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492159
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@228.0)
		trail: 	{(682@227)}


MouseMoveEvent>>sentTo:
	Receiver: [(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492159
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(682@228.0)
		trail: 	{(682@227)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		originalEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		asMouseEnterEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		asMouseEnterEvent: 	[(682@228.0) (682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		evt: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@228.0) (682@227) mouseMove red 10492159 nil]
		evtBuf: 	#(1 10492159 682 227 4 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693417
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
Morph>>handlesMouseOverDragging:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOverDragging:
21 June 2017 7:55:26.335111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOverDragging: [(682@227) mouseEnter red 10492159 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOverDragging:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOverDragging:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseEvent>>sentTo:
	Receiver: [(682@227) mouseEnter red 10492159 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492159
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	4
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter red 10492159 nil]
		originalEvent: 	[(682@227) mouseOver red 10492159 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter red 10492159 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter red 10492159 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseOver red 10492159 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keyUp 'A']
		evt: 	[keyUp 'A']
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keyUp 'A']
		evtBuf: 	#(2 10492174 65 2 0 65 0 1)
		type: 	2
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver red 10492159 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492159 682 227 4 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693453
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOverDragging:
Morph>>handlesMouseOverDragging:
Morph>>handleMouseEnter:
MouseEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:26.369111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(682@227) mouseEnter 10492221 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseButtonEvent(MouseEvent)>>sentTo:
	Receiver: [(682@227) mouseEnter 10492221 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492221
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


MouseButtonEvent>>sentTo:
	Receiver: [(682@227) mouseEnter 10492221 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10492221
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(682@227)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseEnter 10492221 nil]
		originalEvent: 	[(682@227) mouseUp 10492221 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter 10492221 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(682@227) mouseEnter 10492221 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter 10492221 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph(874255104) a SystemWindow...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		asMouseEnterEvent: 	[(682@227) mouseEnter 10492221 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(an AlphaImageMorph(806573568) an AlignmentMorph(69353...etc...
		enteredMorphs: 	an Array(a SimpleButtonMorph(1290240) a Morph(973880064) a Morph...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an Array(an AlphaImageMorph(806573568) a GLMPanelMorph(70432256) a ...etc...


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@227) mouseUp 10492221 nil]
		evt: 	[(682@227) mouseUp 10492221 nil]
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver 10492221 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492221 682 227 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@227) mouseUp 10492221 nil]
		evtBuf: 	#(1 10492221 682 227 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver 10492221 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492221 682 227 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@227.0) corner: (698@243.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@227.0) corner: (698@243.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@227) mouseOver 10492221 nil]
		targetOffset: 	(14.0@14.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10492221 682 227 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2691237
		lastStepMessage: 	nil
		lastCycleTime: 	2693486
		alarms: 	a Heap()
		lastAlarmTime: 	2691237
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseButtonEvent(MouseEvent)>>sentTo:
MouseButtonEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:38.581111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(608@558.0) (627@514) mouseEnter 10504982 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(608@558.0) (627@514) mouseEnter 10504982 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10504982
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(627@514)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(608@558.0)
		trail: 	{(610@554). (612@549). (614@545). (616@541). (618@536). (620@531). (621@...etc...


MouseMoveEvent>>sentTo:
	Receiver: [(608@558.0) (627@514) mouseEnter 10504982 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10504982
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(627@514)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(608@558.0)
		trail: 	{(610@554). (612@549). (614@545). (616@541). (618@536). (620@531). (621@...etc...


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		originalEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		asMouseEnterEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		asMouseEnterEvent: 	[(608@558.0) (627@514) mouseEnter 10504982 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(82087936) a Morph(969589504) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		evt: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
	Receiver's instance variables: 
		bounds: 	(627@514.0) corner: (643@530.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@514.0) corner: (643@530.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@514) mouseOver 10504982 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10504982 610 554 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(608@558.0) (627@514) mouseMove 10504982 nil]
		evtBuf: 	#(1 10504982 610 554 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(627@514.0) corner: (643@530.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@514.0) corner: (643@530.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@514) mouseOver 10504982 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10504982 610 554 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(627@514.0) corner: (643@530.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@514.0) corner: (643@530.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@514) mouseOver 10504982 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10504982 610 554 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705691
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:38.622111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(627@514.0) (641@429) mouseEnter 10505013 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(627@514.0) (641@429) mouseEnter 10505013 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505013
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(641@429)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(627@514.0)
		trail: 	{(636@478). (641@429)}


MouseMoveEvent>>sentTo:
	Receiver: [(627@514.0) (641@429) mouseEnter 10505013 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505013
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(641@429)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(627@514.0)
		trail: 	{(636@478). (641@429)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		originalEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		asMouseEnterEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(874255104) a SystemWindow(57017...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		asMouseEnterEvent: 	[(627@514.0) (641@429) mouseEnter 10505013 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(273547264) a Morph(117080064) a Morph(87425...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		evt: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
	Receiver's instance variables: 
		bounds: 	(641@429.0) corner: (657@445.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(641@429.0) corner: (657@445.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(641@429) mouseOver 10505013 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505013 636 478 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(627@514.0) (641@429) mouseMove 10505013 nil]
		evtBuf: 	#(1 10505013 636 478 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(641@429.0) corner: (657@445.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(641@429.0) corner: (657@445.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(641@429) mouseOver 10505013 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505013 636 478 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(641@429.0) corner: (657@445.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(641@429.0) corner: (657@445.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(641@429) mouseOver 10505013 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505013 636 478 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705738
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame did not understand #handlesMouseOver:
21 June 2017 7:55:38.660111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aMessage: 	handlesMouseOver: [(641@429.0) (626@315) mouseEnter 10505044 nil]
		exception: 	MessageNotUnderstood: SnakeGame>>handlesMouseOver:
		resumeValue: 	nil
	Receiver's instance variables: 
		container: 	a Morph(874255104)
		model: 	<<error during printing>>

Morph>>handlesMouseOver:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		evt: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


Morph>>handleMouseEnter:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseMoveEvent(MouseEvent)>>sentTo:
	Receiver: [(641@429.0) (626@315) mouseEnter 10505044 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505044
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(626@315)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(641@429.0)
		trail: 	{(637@368). (626@315)}


MouseMoveEvent>>sentTo:
	Receiver: [(641@429.0) (626@315) mouseEnter 10505044 nil]
	Arguments and temporary variables: 
		anObject: 	a Morph(874255104)
	Receiver's instance variables: 
		timeStamp: 	10505044
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#mouseEnter
		buttons: 	0
		position: 	(626@315)
		handler: 	nil
		wasHandled: 	false
		startPoint: 	(641@429.0)
		trail: 	{(637@368). (626@315)}


Morph>>handleEvent:
	Receiver: a Morph(874255104)
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(570172160)
		submorphs: 	an Array(a Morph(973880064) a Morph(957763584) a Morph(671023872) a ...etc...
		fullBounds: 	(614.0@196.0) corner: (1114.0@746.0)
		color: 	Color transparent
		extension: 	a MorphExtension (389990400) [eventHandler = a SnakeGame] 


MouseOverHandler>>transform:from:andSendTo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		originalEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		aMorph: 	a Morph(874255104)
		transformedEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


True>>ifTrue:ifFalse:
	Receiver: true
	Arguments and temporary variables: 
		trueAlternativeBlock: 	[ self transform: evt from: anEvent andSendTo: aLeftMorph...etc...
		falseAlternativeBlock: 	[  ]
	Receiver's instance variables: 
true

MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		evt: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		aLeftMorph: 	a Morph(874255104)
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		aBlock: 	[  ]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		asMouseEnterEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
		anEnteredMorph: 	a Morph(874255104)
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


Array(SequenceableCollection)>>reverseDo:
	Receiver: an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorp...etc...
		index: 	3
	Receiver's instance variables: 
an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255104) a SystemWindow(570172...etc...

MouseOverHandler>>handleAsMouseEnter:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		asMouseEnterEvent: 	[(641@429.0) (626@315) mouseEnter 10505044 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


MouseOverHandler>>processMouseOver:
	Receiver: a MouseOverHandler
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
	Receiver's instance variables: 
		mouseOverMorphs: 	an Array(a GLMSystemWindow(425409536) a WorldMorph(562956288) ...etc...
		enteredMorphs: 	an Array(a SnakeCell(345250560) a Morph(57422592) a Morph(874255...etc...
		overMorphs: 	a WriteStream
		leftMorphs: 	an IdentitySet(a GLMSystemWindow(425409536))


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		evt: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
	Receiver's instance variables: 
		bounds: 	(626@315.0) corner: (642@331.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@315.0) corner: (642@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@315) mouseOver 10505044 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505044 637 368 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(641@429.0) (626@315) mouseMove 10505044 nil]
		evtBuf: 	#(1 10505044 637 368 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(626@315.0) corner: (642@331.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@315.0) corner: (642@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@315) mouseOver 10505044 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505044 637 368 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(626@315.0) corner: (642@331.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(626@315.0) corner: (642@331.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a SystemWindow(570172160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(626@315) mouseOver 10505044 nil]
		targetOffset: 	(21.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10505044 637 368 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2705670
		lastStepMessage: 	nil
		lastCycleTime: 	2705777
		alarms: 	a Heap()
		lastAlarmTime: 	2705670
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SnakeGame(Object)>>doesNotUnderstand: #handlesMouseOver:
Morph>>handlesMouseOver:
Morph>>handleMouseEnter:
MouseMoveEvent(MouseEvent)>>sentTo:
MouseMoveEvent>>sentTo:
Morph>>handleEvent:
MouseOverHandler>>transform:from:andSendTo:
[ self transform: evt from: anEvent andSendTo: aLeftMorph ] in MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
True>>ifTrue:ifFalse:
MouseOverHandler>>inform:to:originatedFrom:ifNotFocusedDo:
[ :anEnteredMorph | 
self
	inform: asMouseEnterEvent
	to: anEnteredMorph
	originatedFrom: anEvent
	ifNotFocusedDo: [  ] ] in MouseOverHandler>>handleAsMouseEnter:
Array(SequenceableCollection)>>reverseDo:
MouseOverHandler>>handleAsMouseEnter:
MouseOverHandler>>processMouseOver:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 June 2017 7:59:26.998111 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(950246144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2933516
		lastStepMessage: 	nil
		lastCycleTime: 	2933537
		alarms: 	a Heap()
		lastAlarmTime: 	2933516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-21T19:10:32.944111+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:26:00.903789 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2933516
		lastStepMessage: 	nil
		lastCycleTime: 	2933537
		alarms: 	a Heap()
		lastAlarmTime: 	2933516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:26:00.779789+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:26:00.779789+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:26:00.779789+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:26:00.779789+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:26:00.779789+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:26:00.779789+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #parent:
22 June 2017 1:32:50.313789 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #parent:
	Receiver: a KeyListener(100748800)
	Arguments and temporary variables: 
		aMessage: 	parent: a SnakeGame
		exception: 	MessageNotUnderstood: KeyListener>>parent:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@16)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	nil
		lastMouseEvent: 	[(0@0) mouseMove nil nil]
		targetOffset: 	nil
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	nil
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		lastKeyScanCode: 	nil
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0
		parent: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(228074752)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(228074752)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (334@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(139779072))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	409680
		lastStepMessage: 	nil
		lastCycleTime: 	409702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	409680
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	409680
		lastStepMessage: 	nil
		lastCycleTime: 	409702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	409680
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	409680
		lastStepMessage: 	nil
		lastCycleTime: 	409702
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	409680
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #parent:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:37:32.337336 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@202)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(852592640) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@202)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(747@482.0) corner: (763@498.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(747@482) mouseOver CTRL 10732026 nil]
		targetOffset: 	(522@115)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 10732026 747 482 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	2933516
		lastStepMessage: 	nil
		lastCycleTime: 	2933537
		alarms: 	a Heap()
		lastAlarmTime: 	2933516
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:39:39.901336 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@259)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(741192192) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@259)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@259)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(741192192) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@259)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@259)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(741192192) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@259)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@259)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(741192192) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@259)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(99@290.0) corner: (115@306.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@290) mouseOver 2741857 nil]
		targetOffset: 	(537@62)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2741857 99 290 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(99@290.0) corner: (115@306.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(99@290) mouseOver 2741857 nil]
		targetOffset: 	(537@62)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2741857 99 290 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	127523
		lastStepMessage: 	nil
		lastCycleTime: 	127545
		alarms: 	a Heap()
		lastAlarmTime: 	127523
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #owner
22 June 2017 1:39:45.330336 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #owner
	Receiver: a KeyListener
	Arguments and temporary variables: 
		aMessage: 	owner
		exception: 	MessageNotUnderstood: KeyListener>>owner
		resumeValue: 	nil
	Receiver's instance variables: 
		parent: 	nil


Morph>>privateAddMorph:atIndex:
	Receiver: a Morph(184606976)
	Arguments and temporary variables: 
		aMorph: 	a KeyListener
		index: 	1
		oldIndex: 	nil
		myWorld: 	nil
		itsWorld: 	nil
		oldOwner: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (500@550)
		owner: 	nil
		submorphs: 	an Array(a Morph(72298752) a Morph(723928576) a Morph(500313600) a M...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (299258112)


Morph>>addMorphFront:
	Receiver: a Morph(184606976)
	Arguments and temporary variables: 
		aMorph: 	a KeyListener
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (500@550)
		owner: 	nil
		submorphs: 	an Array(a Morph(72298752) a Morph(723928576) a Morph(500313600) a M...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (299258112)


Morph>>addMorph:
	Receiver: a Morph(184606976)
	Arguments and temporary variables: 
		aMorph: 	a KeyListener
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (500@550)
		owner: 	nil
		submorphs: 	an Array(a Morph(72298752) a Morph(723928576) a Morph(500313600) a M...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (299258112)


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(184606976)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(184606976)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(94635776))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	133317
		lastStepMessage: 	nil
		lastCycleTime: 	133337
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	133317
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	133317
		lastStepMessage: 	nil
		lastCycleTime: 	133337
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	133317
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	133317
		lastStepMessage: 	nil
		lastCycleTime: 	133337
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	133317
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #owner
Morph>>privateAddMorph:atIndex:
Morph>>addMorphFront:
Morph>>addMorph:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:40:05.237336 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(305965312) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(305965312) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(305965312) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(305965312) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(493@474.0) corner: (509@490.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(493@474) mouseOver 2767067 nil]
		targetOffset: 	(357.0@38.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2767067 493 474 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(493@474.0) corner: (509@490.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(493@474) mouseOver 2767067 nil]
		targetOffset: 	(357.0@38.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2767067 493 474 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	152828
		lastStepMessage: 	nil
		lastCycleTime: 	152849
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	152828
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #parent:
22 June 2017 1:40:07.960336 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #parent:
	Receiver: a KeyListener(167896320)
	Arguments and temporary variables: 
		aMessage: 	parent: a SnakeGame
		exception: 	MessageNotUnderstood: KeyListener>>parent:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (16@16)
		owner: 	a Morph(233306368)
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	nil
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	nil
		lastMouseEvent: 	[(0@0) mouseMove nil nil]
		targetOffset: 	nil
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	nil
		savedPatch: 	nil
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		lastKeyScanCode: 	nil
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0
		parent: 	nil


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(233306368)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(233306368)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1003801600))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GrowlMorph(794676992))(a GrowlMorph(...etc...
		lastStepTime: 	155945
		lastStepMessage: 	nil
		lastCycleTime: 	155966
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	155945
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GrowlMorph(794676992))(a GrowlMorph(...etc...
		lastStepTime: 	155945
		lastStepMessage: 	nil
		lastCycleTime: 	155966
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	155945
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GrowlMorph(794676992))(a GrowlMorph(...etc...
		lastStepTime: 	155945
		lastStepMessage: 	nil
		lastCycleTime: 	155966
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	155945
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #parent:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:40:43.531336 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(304974592) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(304974592) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(304974592) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(304974592) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(213@669.0) corner: (229@685.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(213@669) mouseOver CTRL 2805740 nil]
		targetOffset: 	(33.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2805740 210 671 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(213@669.0) corner: (229@685.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(213@669) mouseOver CTRL 2805740 nil]
		targetOffset: 	(33.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2805740 210 671 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	191129
		lastStepMessage: 	nil
		lastCycleTime: 	191150
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	191129
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:37:32.203336+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:41:20.016359 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(460724992) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(460724992) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(460724992) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@88)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(460724992) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@88)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(357@38)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(213@669.0) corner: (229@685.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(213@669) mouseOver CTRL 2805740 nil]
		targetOffset: 	(33.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2805740 210 671 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(213@669.0) corner: (229@685.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(213@669) mouseOver CTRL 2805740 nil]
		targetOffset: 	(33.0@15.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2805740 210 671 0 2 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	191129
		lastStepMessage: 	nil
		lastCycleTime: 	191150
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(646287872)))
		lastAlarmTime: 	191129
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:42:56.313359 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(264571392) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(264571392) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(264571392) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(264571392) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(840@400.0) corner: (856@416.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(840@400) mouseOver 2934160 nil]
		targetOffset: 	(30@74)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2934160 837 407 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(840@400.0) corner: (856@416.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(840@400) mouseOver 2934160 nil]
		targetOffset: 	(30@74)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2934160 837 407 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	96003
		lastStepMessage: 	nil
		lastCycleTime: 	96025
		alarms: 	a Heap()
		lastAlarmTime: 	96003
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:41:19.901359+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Morph did not understand #newKeyboardFocus:
22 June 2017 1:42:59.285359 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Morph(Object)>>doesNotUnderstand: #newKeyboardFocus:
	Receiver: a Morph(53500672)
	Arguments and temporary variables: 
		aMessage: 	newKeyboardFocus: a KeyListener(573893376)
		exception: 	MessageNotUnderstood: Morph>>newKeyboardFocus:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (500@550)
		owner: 	nil
		submorphs: 	an Array(a KeyListener(573893376) a Morph(6392320) a Morph(62615296)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (111519232)


SnakeGame>>addKeyListener
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(53500672)
		model: 	<<error during printing>>

SnakeGame>>initialize
	Receiver: a SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		container: 	a Morph(53500672)
		model: 	<<error during printing>>

SnakeGame class(Behavior)>>new
	Receiver: SnakeGame
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
		selectedSource: 	'SnakeGame new open.'
		itsSelection: 	a Text for 'SnakeGame new open.'
		itsSelectionString: 	'SnakeGame new open.'
	Receiver's instance variables: 
		ast: 	DoIt
	^ SnakeGame new open
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | text selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(11671040)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(11671040)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (678@31)
		owner: 	a TransformWithLayoutMorph(735770624)
		submorphs: 	an Array(a RubPrimarySelectionMorph(282322432) a RubCursor(24012288)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1009795328) [other:  (announcer -> an Announcer) (...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(932424192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(24012288)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(697916160))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(1067904512)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GrowlMorph(144879104))(a GrowlMorph(...etc...
		lastStepTime: 	99369
		lastStepMessage: 	nil
		lastCycleTime: 	99390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	99369
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GrowlMorph(144879104))(a GrowlMorph(...etc...
		lastStepTime: 	99369
		lastStepMessage: 	nil
		lastCycleTime: 	99390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	99369
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GrowlMorph(144879104))(a GrowlMorph(...etc...
		lastStepTime: 	99369
		lastStepMessage: 	nil
		lastCycleTime: 	99390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(24012288)))
		lastAlarmTime: 	99369
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Morph(Object)>>doesNotUnderstand: #newKeyboardFocus:
SnakeGame>>addKeyListener
SnakeGame>>initialize
SnakeGame class(Behavior)>>new
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:43:37.945248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(100262144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(100262144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(100262144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1001@107)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(100262144) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1001@107)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(840@400.0) corner: (856@416.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(840@400) mouseOver 2934160 nil]
		targetOffset: 	(30@74)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2934160 837 407 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(840@400.0) corner: (856@416.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(840@400) mouseOver 2934160 nil]
		targetOffset: 	(30@74)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2934160 837 407 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1288@730)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	96003
		lastStepMessage: 	nil
		lastCycleTime: 	96025
		alarms: 	a Heap()
		lastAlarmTime: 	96003
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1288@730)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1288@730)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #newKeyboardFocus:
22 June 2017 1:46:26.645248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
	Receiver: a KeyListener(413742848)
	Arguments and temporary variables: 
		aMessage: 	newKeyboardFocus: a KeyListener(413742848)
		exception: 	MessageNotUnderstood: KeyListener>>newKeyboardFocus:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(698.0@87.0) corner: (748.0@127.0)
		owner: 	a Morph(708238592)
		submorphs: 	#()
		fullBounds: 	(698.0@87.0) corner: (748.0@127.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(487000320)
		blueCell: 	a SnakeCell(955809024)
	Receiver's instance variables: 
		container: 	a Morph(708238592)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(708238592)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(531@154) mouseDown red 3149550 nil]
		sourceMorph: 	a SimpleButtonMorph(133908224)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(531@154) mouseDown red 3149550 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(133908224)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(531@154) mouseDown red 3149550 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(133908224)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(531@154) mouseDown red 3149550 nil]
		sourceMorph: 	a SimpleButtonMorph(133908224)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(133908224)
	Arguments and temporary variables: 
		evt: 	[(531@154) mouseDown red 3149550 nil]
	Receiver's instance variables: 
		bounds: 	(473.0@127.0) corner: (593.0@177.0)
		owner: 	a Morph(35346688)
		submorphs: 	an Array(a StringMorph(232879872)'Start')
		fullBounds: 	(473.0@127.0) corner: (593.0@177.0)
		color: 	Color gray
		extension: 	a MorphExtension (225749248) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(232879872)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(133908224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(531@154) mouseDown red 3149550 nil]
		firstClickUp: 	[(530@153) mouseUp 3149660 nil]
		firstClickTime: 	3149550
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	168784


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(530@153) mouseUp 3149660 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(530@153) mouseUp 3149660 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(133908224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(531@154) mouseDown red 3149550 nil]
		firstClickUp: 	[(530@153) mouseUp 3149660 nil]
		firstClickTime: 	3149550
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	168784


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(530@153) mouseUp 3149660 nil]
		evt: 	[(530@153) mouseUp 3149660 nil]
	Receiver's instance variables: 
		bounds: 	(531@154.0) corner: (547@170.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(531@154.0) corner: (547@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a SystemWindow(889281280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(530@153) mouseUp 3149660 nil]
		targetOffset: 	(58.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3149660 530 153 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(530@153) mouseUp 3149660 nil]
		evtBuf: 	#(1 3149660 530 153 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(531@154.0) corner: (547@170.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(531@154.0) corner: (547@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a SystemWindow(889281280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(530@153) mouseUp 3149660 nil]
		targetOffset: 	(58.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3149660 530 153 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(531@154.0) corner: (547@170.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(531@154.0) corner: (547@170.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a SystemWindow(889281280)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(530@153) mouseUp 3149660 nil]
		targetOffset: 	(58.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3149660 530 153 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	168847
		lastStepMessage: 	nil
		lastCycleTime: 	168867
		alarms: 	a Heap()
		lastAlarmTime: 	168847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	168847
		lastStepMessage: 	nil
		lastCycleTime: 	168867
		alarms: 	a Heap()
		lastAlarmTime: 	168847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	168847
		lastStepMessage: 	nil
		lastCycleTime: 	168867
		alarms: 	a Heap()
		lastAlarmTime: 	168847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	168847
		lastStepMessage: 	nil
		lastCycleTime: 	168867
		alarms: 	a Heap()
		lastAlarmTime: 	168847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #newKeyboardFocus:
22 June 2017 1:46:29.600248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
	Receiver: a KeyListener(413742848)
	Arguments and temporary variables: 
		aMessage: 	newKeyboardFocus: a KeyListener(413742848)
		exception: 	MessageNotUnderstood: KeyListener>>newKeyboardFocus:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(698.0@87.0) corner: (748.0@127.0)
		owner: 	a Morph(708238592)
		submorphs: 	#()
		fullBounds: 	(698.0@87.0) corner: (748.0@127.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(487000320)
		blueCell: 	a SnakeCell(955809024)
	Receiver's instance variables: 
		container: 	a Morph(708238592)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(708238592)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(501@96) mouseDown red 3152530 nil]
		sourceMorph: 	a SimpleButtonMorph(133908224)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(501@96) mouseDown red 3152530 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(133908224)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(501@96) mouseDown red 3152530 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(133908224)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(501@96) mouseDown red 3152530 nil]
		sourceMorph: 	a SimpleButtonMorph(133908224)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(133908224)
	Arguments and temporary variables: 
		evt: 	[(501@96) mouseDown red 3152530 nil]
	Receiver's instance variables: 
		bounds: 	(473.0@127.0) corner: (593.0@177.0)
		owner: 	a Morph(35346688)
		submorphs: 	an Array(a StringMorph(232879872)'Start')
		fullBounds: 	(473.0@127.0) corner: (593.0@177.0)
		color: 	Color gray
		extension: 	a MorphExtension (225749248) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(232879872)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(133908224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(501@96) mouseDown red 3152530 nil]
		firstClickUp: 	[(501@96) mouseUp 3152639 nil]
		firstClickTime: 	3152530
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	171729


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(501@96) mouseUp 3152639 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(501@96) mouseUp 3152639 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(133908224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(501@96) mouseDown red 3152530 nil]
		firstClickUp: 	[(501@96) mouseUp 3152639 nil]
		firstClickTime: 	3152530
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	171729


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(501@96) mouseUp 3152639 nil]
		evt: 	[(501@96) mouseUp 3152639 nil]
	Receiver's instance variables: 
		bounds: 	(501@96.0) corner: (517@112.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(501@96.0) corner: (517@112.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a PluggableButtonMorph(593659648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(501@96) mouseUp 3152639 nil]
		targetOffset: 	(28.0@ -31.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3152639 501 96 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(501@96) mouseUp 3152639 nil]
		evtBuf: 	#(1 3152639 501 96 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(501@96.0) corner: (517@112.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(501@96.0) corner: (517@112.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a PluggableButtonMorph(593659648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(501@96) mouseUp 3152639 nil]
		targetOffset: 	(28.0@ -31.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3152639 501 96 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(501@96.0) corner: (517@112.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(501@96.0) corner: (517@112.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a PluggableButtonMorph(593659648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(501@96) mouseUp 3152639 nil]
		targetOffset: 	(28.0@ -31.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3152639 501 96 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	171813
		lastStepMessage: 	nil
		lastCycleTime: 	171835
		alarms: 	a Heap()
		lastAlarmTime: 	171813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	171813
		lastStepMessage: 	nil
		lastCycleTime: 	171835
		alarms: 	a Heap()
		lastAlarmTime: 	171813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	171813
		lastStepMessage: 	nil
		lastCycleTime: 	171835
		alarms: 	a Heap()
		lastAlarmTime: 	171813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	171813
		lastStepMessage: 	nil
		lastCycleTime: 	171835
		alarms: 	a Heap()
		lastAlarmTime: 	171813
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #newKeyboardFocus:
22 June 2017 1:46:30.419248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
	Receiver: a KeyListener(413742848)
	Arguments and temporary variables: 
		aMessage: 	newKeyboardFocus: a KeyListener(413742848)
		exception: 	MessageNotUnderstood: KeyListener>>newKeyboardFocus:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(698.0@87.0) corner: (748.0@127.0)
		owner: 	a Morph(708238592)
		submorphs: 	#()
		fullBounds: 	(698.0@87.0) corner: (748.0@127.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(487000320)
		blueCell: 	a SnakeCell(955809024)
	Receiver's instance variables: 
		container: 	a Morph(708238592)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(708238592)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(505@96) mouseDown red 3153341 nil]
		sourceMorph: 	a SimpleButtonMorph(133908224)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(505@96) mouseDown red 3153341 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(133908224)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(505@96) mouseDown red 3153341 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(133908224)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(505@96) mouseDown red 3153341 nil]
		sourceMorph: 	a SimpleButtonMorph(133908224)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(133908224)
	Arguments and temporary variables: 
		evt: 	[(505@96) mouseDown red 3153341 nil]
	Receiver's instance variables: 
		bounds: 	(473.0@127.0) corner: (593.0@177.0)
		owner: 	a Morph(35346688)
		submorphs: 	an Array(a StringMorph(232879872)'Start')
		fullBounds: 	(473.0@127.0) corner: (593.0@177.0)
		color: 	Color gray
		extension: 	a MorphExtension (225749248) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(232879872)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(133908224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(505@96) mouseDown red 3153341 nil]
		firstClickUp: 	[(505@96) mouseUp 3153466 nil]
		firstClickTime: 	3153341
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	172549


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(505@96) mouseUp 3153466 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(505@96) mouseUp 3153466 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(133908224)
		clickState: 	#firstClickUp
		firstClickDown: 	[(505@96) mouseDown red 3153341 nil]
		firstClickUp: 	[(505@96) mouseUp 3153466 nil]
		firstClickTime: 	3153341
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	172549


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(505@96) mouseUp 3153466 nil]
		evt: 	[(505@96) mouseUp 3153466 nil]
	Receiver's instance variables: 
		bounds: 	(505@96.0) corner: (521@112.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(505@96.0) corner: (521@112.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a PluggableButtonMorph(653004032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(505@96) mouseUp 3153466 nil]
		targetOffset: 	(32.0@ -31.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3153466 505 96 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(505@96) mouseUp 3153466 nil]
		evtBuf: 	#(1 3153466 505 96 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(505@96.0) corner: (521@112.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(505@96.0) corner: (521@112.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a PluggableButtonMorph(653004032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(505@96) mouseUp 3153466 nil]
		targetOffset: 	(32.0@ -31.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3153466 505 96 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(505@96.0) corner: (521@112.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(505@96.0) corner: (521@112.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(133908224)
		keyboardFocus: 	a PluggableButtonMorph(653004032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(505@96) mouseUp 3153466 nil]
		targetOffset: 	(32.0@ -31.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3153466 505 96 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	172635
		lastStepMessage: 	nil
		lastCycleTime: 	172655
		alarms: 	a Heap()
		lastAlarmTime: 	172635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	172635
		lastStepMessage: 	nil
		lastCycleTime: 	172655
		alarms: 	a Heap()
		lastAlarmTime: 	172635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	172635
		lastStepMessage: 	nil
		lastCycleTime: 	172655
		alarms: 	a Heap()
		lastAlarmTime: 	172635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	172635
		lastStepMessage: 	nil
		lastCycleTime: 	172655
		alarms: 	a Heap()
		lastAlarmTime: 	172635
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #newKeyboardFocus:
22 June 2017 1:47:41.017248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
	Receiver: a KeyListener(25236736)
	Arguments and temporary variables: 
		aMessage: 	newKeyboardFocus: a KeyListener(25236736)
		exception: 	MessageNotUnderstood: KeyListener>>newKeyboardFocus:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(833.0@117.0) corner: (833.0@117.0)
		owner: 	a Morph(857734400)
		submorphs: 	#()
		fullBounds: 	(833.0@117.0) corner: (833.0@117.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(291788032)
		blueCell: 	a SnakeCell(304156928)
	Receiver's instance variables: 
		container: 	a Morph(857734400)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(857734400)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(639@139) mouseDown red 3223963 nil]
		sourceMorph: 	a SimpleButtonMorph(701261056)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(639@139) mouseDown red 3223963 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(701261056)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(639@139) mouseDown red 3223963 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(701261056)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(639@139) mouseDown red 3223963 nil]
		sourceMorph: 	a SimpleButtonMorph(701261056)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(701261056)
	Arguments and temporary variables: 
		evt: 	[(639@139) mouseDown red 3223963 nil]
	Receiver's instance variables: 
		bounds: 	(583.0@118.0) corner: (703.0@168.0)
		owner: 	a Morph(415952128)
		submorphs: 	an Array(a StringMorph(957095680)'Start')
		fullBounds: 	(583.0@118.0) corner: (703.0@168.0)
		color: 	Color gray
		extension: 	a MorphExtension (182441728) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(957095680)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(701261056)
		clickState: 	#firstClickUp
		firstClickDown: 	[(639@139) mouseDown red 3223963 nil]
		firstClickUp: 	[(639@139) mouseUp 3224057 nil]
		firstClickTime: 	3223963
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	243167


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(639@139) mouseUp 3224057 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(639@139) mouseUp 3224057 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(701261056)
		clickState: 	#firstClickUp
		firstClickDown: 	[(639@139) mouseDown red 3223963 nil]
		firstClickUp: 	[(639@139) mouseUp 3224057 nil]
		firstClickTime: 	3223963
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	243167


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(639@139) mouseUp 3224057 nil]
		evt: 	[(639@139) mouseUp 3224057 nil]
	Receiver's instance variables: 
		bounds: 	(639@139.0) corner: (655@155.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(639@139.0) corner: (655@155.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(701261056)
		keyboardFocus: 	a SystemWindow(636386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(639@139) mouseUp 3224057 nil]
		targetOffset: 	(56.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3224057 639 139 0 0 1 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(639@139) mouseUp 3224057 nil]
		evtBuf: 	#(1 3224057 639 139 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(639@139.0) corner: (655@155.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(639@139.0) corner: (655@155.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(701261056)
		keyboardFocus: 	a SystemWindow(636386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(639@139) mouseUp 3224057 nil]
		targetOffset: 	(56.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3224057 639 139 0 0 1 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(639@139.0) corner: (655@155.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(639@139.0) corner: (655@155.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(701261056)
		keyboardFocus: 	a SystemWindow(636386048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(639@139) mouseUp 3224057 nil]
		targetOffset: 	(56.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3224057 639 139 0 0 1 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	243231
		lastStepMessage: 	nil
		lastCycleTime: 	243252
		alarms: 	a Heap()
		lastAlarmTime: 	243231
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	243231
		lastStepMessage: 	nil
		lastCycleTime: 	243252
		alarms: 	a Heap()
		lastAlarmTime: 	243231
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	243231
		lastStepMessage: 	nil
		lastCycleTime: 	243252
		alarms: 	a Heap()
		lastAlarmTime: 	243231
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	243231
		lastStepMessage: 	nil
		lastCycleTime: 	243252
		alarms: 	a Heap()
		lastAlarmTime: 	243231
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #newKeyboardFocus:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #ifTrue:ifFalse:
22 June 2017 1:48:51.681248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: a KeyListener(170852096)
	Arguments and temporary variables: 
		aMessage: 	ifTrue: MorphGotFocus morph: self ifFalse: ^ (arg1 namedTempAt: 1)
	i...etc...
		exception: 	MessageNotUnderstood: KeyListener>>ifTrue:ifFalse:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(520807168)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


Morph>>ExecuteUnOptimizedIn:
	Receiver: a Morph(520807168)
	Arguments and temporary variables: 
		arg1: 	Morph>>announceKeyboardFocusChange:
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(958708480)
		submorphs: 	an Array(a KeyListener(170852096) a Morph(796599040) a Morph(4273676...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (1026640640)


KeyListener(Object)>>mustBeBooleanInMagic:
	Receiver: a KeyListener(170852096)
	Arguments and temporary variables: 
		context: 	Morph>>announceKeyboardFocusChange:
		sendNode: 	RBMessageNode(gotFocus
	ifTrue: [ MorphGotFocus morph: self ]
	ifFals...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ (ThisContext namedTempAt: 1)
	...etc...
		method: 	Morph>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(520807168)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Object)>>mustBeBoolean
	Receiver: a KeyListener(170852096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(520807168)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


Morph>>announceKeyboardFocusChange:
	Receiver: a Morph(520807168)
	Arguments and temporary variables: 
		gotFocus: 	a KeyListener(170852096)
		announcement: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(958708480)
		submorphs: 	an Array(a KeyListener(170852096) a Morph(796599040) a Morph(4273676...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (1026640640)


Morph>>keyboardFocusChange:
	Receiver: a Morph(520807168)
	Arguments and temporary variables: 
		gotFocus: 	a KeyListener(170852096)
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(958708480)
		submorphs: 	an Array(a KeyListener(170852096) a Morph(796599040) a Morph(4273676...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (1026640640)


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(143659264)
		blueCell: 	a SnakeCell(712318720)
	Receiver's instance variables: 
		container: 	a Morph(520807168)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(520807168)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(699@221) mouseDown red 3294616 nil]
		sourceMorph: 	a SimpleButtonMorph(512226048)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(699@221) mouseDown red 3294616 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(512226048)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(699@221) mouseDown red 3294616 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(512226048)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(699@221) mouseDown red 3294616 nil]
		sourceMorph: 	a SimpleButtonMorph(512226048)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(512226048)
	Arguments and temporary variables: 
		evt: 	[(699@221) mouseDown red 3294616 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(796599040)
		submorphs: 	an Array(a StringMorph(794744576)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (1000229120) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(794744576)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(512226048)
		clickState: 	#firstClickUp
		firstClickDown: 	[(699@221) mouseDown red 3294616 nil]
		firstClickUp: 	[(699@221) mouseUp 3294709 nil]
		firstClickTime: 	3294616
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	313817


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(699@221) mouseUp 3294709 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(699@221) mouseUp 3294709 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(512226048)
		clickState: 	#firstClickUp
		firstClickDown: 	[(699@221) mouseDown red 3294616 nil]
		firstClickUp: 	[(699@221) mouseUp 3294709 nil]
		firstClickTime: 	3294616
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	313817


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(699@221) mouseUp 3294709 nil]
		evt: 	[(699@221) mouseUp 3294709 nil]
	Receiver's instance variables: 
		bounds: 	(699@221.0) corner: (715@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(699@221.0) corner: (715@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(512226048)
		keyboardFocus: 	a SystemWindow(958708480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(699@221) mouseUp 3294709 nil]
		targetOffset: 	(85.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3294709 699 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(699@221) mouseUp 3294709 nil]
		evtBuf: 	#(1 3294709 699 221 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(699@221.0) corner: (715@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(699@221.0) corner: (715@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(512226048)
		keyboardFocus: 	a SystemWindow(958708480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(699@221) mouseUp 3294709 nil]
		targetOffset: 	(85.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3294709 699 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(699@221.0) corner: (715@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(699@221.0) corner: (715@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(512226048)
		keyboardFocus: 	a SystemWindow(958708480)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(699@221) mouseUp 3294709 nil]
		targetOffset: 	(85.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3294709 699 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	313883
		lastStepMessage: 	nil
		lastCycleTime: 	313905
		alarms: 	a Heap()
		lastAlarmTime: 	313883
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	313883
		lastStepMessage: 	nil
		lastCycleTime: 	313905
		alarms: 	a Heap()
		lastAlarmTime: 	313883
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	313883
		lastStepMessage: 	nil
		lastCycleTime: 	313905
		alarms: 	a Heap()
		lastAlarmTime: 	313883
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	313883
		lastStepMessage: 	nil
		lastCycleTime: 	313905
		alarms: 	a Heap()
		lastAlarmTime: 	313883
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
Morph>>ExecuteUnOptimizedIn:
KeyListener(Object)>>mustBeBooleanInMagic:
KeyListener(Object)>>mustBeBoolean
Morph>>announceKeyboardFocusChange:
Morph>>keyboardFocusChange:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #ifTrue:ifFalse:
22 June 2017 1:48:53.527248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
	Receiver: a KeyListener(170852096)
	Arguments and temporary variables: 
		aMessage: 	ifTrue: MorphGotFocus morph: self ifFalse: ^ (arg1 namedTempAt: 1)
	i...etc...
		exception: 	MessageNotUnderstood: KeyListener>>ifTrue:ifFalse:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(520807168)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


Morph>>ExecuteUnOptimizedIn:
	Receiver: a Morph(520807168)
	Arguments and temporary variables: 
		arg1: 	Morph>>announceKeyboardFocusChange:
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(958708480)
		submorphs: 	an Array(a KeyListener(170852096) a Morph(796599040) a Morph(4273676...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (1026640640) [locked] 


KeyListener(Object)>>mustBeBooleanInMagic:
	Receiver: a KeyListener(170852096)
	Arguments and temporary variables: 
		context: 	Morph>>announceKeyboardFocusChange:
		sendNode: 	RBMessageNode(gotFocus
	ifTrue: [ MorphGotFocus morph: self ]
	ifFals...etc...
		methodNode: 	ExecuteUnOptimizedIn: ThisContext
	^ (ThisContext namedTempAt: 1)
	...etc...
		method: 	Morph>>#ExecuteUnOptimizedIn:
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(520807168)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Object)>>mustBeBoolean
	Receiver: a KeyListener(170852096)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(520807168)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


Morph>>announceKeyboardFocusChange:
	Receiver: a Morph(520807168)
	Arguments and temporary variables: 
		gotFocus: 	a KeyListener(170852096)
		announcement: 	nil
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(958708480)
		submorphs: 	an Array(a KeyListener(170852096) a Morph(796599040) a Morph(4273676...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (1026640640) [locked] 


Morph>>keyboardFocusChange:
	Receiver: a Morph(520807168)
	Arguments and temporary variables: 
		gotFocus: 	a KeyListener(170852096)
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(958708480)
		submorphs: 	an Array(a KeyListener(170852096) a Morph(796599040) a Morph(4273676...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (1026640640) [locked] 


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(143659264)
		blueCell: 	a SnakeCell(712318720)
	Receiver's instance variables: 
		container: 	a Morph(520807168)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(520807168)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(987@261) mouseDown red 3296441 nil]
		sourceMorph: 	a SimpleButtonMorph(512226048)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(987@261) mouseDown red 3296441 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(512226048)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(987@261) mouseDown red 3296441 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(512226048)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(987@261) mouseDown red 3296441 nil]
		sourceMorph: 	a SimpleButtonMorph(512226048)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(512226048)
	Arguments and temporary variables: 
		evt: 	[(987@261) mouseDown red 3296441 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(796599040)
		submorphs: 	an Array(a StringMorph(794744576)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (1000229120) [eventHandler = a MorphicEventHandler]...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(794744576)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(512226048)
		clickState: 	#firstClickUp
		firstClickDown: 	[(987@261) mouseDown red 3296441 nil]
		firstClickUp: 	[(987@261) mouseUp 3296566 nil]
		firstClickTime: 	3296441
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	315650


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(987@261) mouseUp 3296566 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(987@261) mouseUp 3296566 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(512226048)
		clickState: 	#firstClickUp
		firstClickDown: 	[(987@261) mouseDown red 3296441 nil]
		firstClickUp: 	[(987@261) mouseUp 3296566 nil]
		firstClickTime: 	3296441
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	315650


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(987@261) mouseUp 3296566 nil]
		evt: 	[(987@261) mouseUp 3296566 nil]
	Receiver's instance variables: 
		bounds: 	(987@261.0) corner: (1003@277.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(987@261.0) corner: (1003@277.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(512226048)
		keyboardFocus: 	a PluggableButtonMorph(2299648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(987@261) mouseUp 3296566 nil]
		targetOffset: 	(373.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3296566 987 261 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(987@261) mouseUp 3296566 nil]
		evtBuf: 	#(1 3296566 987 261 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(987@261.0) corner: (1003@277.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(987@261.0) corner: (1003@277.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(512226048)
		keyboardFocus: 	a PluggableButtonMorph(2299648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(987@261) mouseUp 3296566 nil]
		targetOffset: 	(373.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3296566 987 261 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(987@261.0) corner: (1003@277.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(987@261.0) corner: (1003@277.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(512226048)
		keyboardFocus: 	a PluggableButtonMorph(2299648)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(987@261) mouseUp 3296566 nil]
		targetOffset: 	(373.0@65.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3296566 987 261 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	315733
		lastStepMessage: 	nil
		lastCycleTime: 	315753
		alarms: 	a Heap()
		lastAlarmTime: 	315733
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	315733
		lastStepMessage: 	nil
		lastCycleTime: 	315753
		alarms: 	a Heap()
		lastAlarmTime: 	315733
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	315733
		lastStepMessage: 	nil
		lastCycleTime: 	315753
		alarms: 	a Heap()
		lastAlarmTime: 	315733
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	315733
		lastStepMessage: 	nil
		lastCycleTime: 	315753
		alarms: 	a Heap()
		lastAlarmTime: 	315733
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #ifTrue:ifFalse:
Morph>>ExecuteUnOptimizedIn:
KeyListener(Object)>>mustBeBooleanInMagic:
KeyListener(Object)>>mustBeBoolean
Morph>>announceKeyboardFocusChange:
Morph>>keyboardFocusChange:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #fillRectangle:fillStyle:borderStyle:
22 June 2017 1:49:38.816248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
	Receiver: a KeyListener(381757696)
	Arguments and temporary variables: 
		aMessage: 	fillRectangle: (614.0@194.0) corner: (1114.0@746.0) fillStyle: Color ...etc...
		exception: 	MessageNotUnderstood: KeyListener>>fillRectangle:fillStyle:borderSty...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(467008256)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


BorderedMorph(Morph)>>drawOn:
	Receiver: a BorderedMorph(730227968)
	Arguments and temporary variables: 
		aCanvas: 	a KeyListener(381757696)
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (408573184)
		borderWidth: 	1
		borderColor: 	(Color r: 0.38 g: 0.638 b: 0.882 alpha: 1.0)


Morph>>drawKeyboardFocusOn:
	Receiver: a Morph(467008256)
	Arguments and temporary variables: 
		aCanvas: 	a KeyListener(381757696)
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(917922560)
		submorphs: 	an Array(a KeyListener(381757696) a Morph(36124416) a Morph(87369804...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (565827328)


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(812634880)
		blueCell: 	a SnakeCell(1033782016)
	Receiver's instance variables: 
		container: 	a Morph(467008256)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(467008256)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(679@218) mouseDown red 3341744 nil]
		sourceMorph: 	a SimpleButtonMorph(497039616)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(679@218) mouseDown red 3341744 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(497039616)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(679@218) mouseDown red 3341744 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(497039616)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(679@218) mouseDown red 3341744 nil]
		sourceMorph: 	a SimpleButtonMorph(497039616)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(497039616)
	Arguments and temporary variables: 
		evt: 	[(679@218) mouseDown red 3341744 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(36124416)
		submorphs: 	an Array(a StringMorph(560577792)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (621799680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(560577792)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(497039616)
		clickState: 	#firstClickUp
		firstClickDown: 	[(679@218) mouseDown red 3341744 nil]
		firstClickUp: 	[(679@218) mouseUp 3341837 nil]
		firstClickTime: 	3341744
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	360942


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(679@218) mouseUp 3341837 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(679@218) mouseUp 3341837 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(497039616)
		clickState: 	#firstClickUp
		firstClickDown: 	[(679@218) mouseDown red 3341744 nil]
		firstClickUp: 	[(679@218) mouseUp 3341837 nil]
		firstClickTime: 	3341744
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	360942


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(679@218) mouseUp 3341837 nil]
		evt: 	[(679@218) mouseUp 3341837 nil]
	Receiver's instance variables: 
		bounds: 	(679@218.0) corner: (695@234.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(679@218.0) corner: (695@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(497039616)
		keyboardFocus: 	a SystemWindow(917922560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@218) mouseUp 3341837 nil]
		targetOffset: 	(65.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3341837 679 218 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(679@218) mouseUp 3341837 nil]
		evtBuf: 	#(1 3341837 679 218 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(679@218.0) corner: (695@234.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(679@218.0) corner: (695@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(497039616)
		keyboardFocus: 	a SystemWindow(917922560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@218) mouseUp 3341837 nil]
		targetOffset: 	(65.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3341837 679 218 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(679@218.0) corner: (695@234.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(679@218.0) corner: (695@234.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(497039616)
		keyboardFocus: 	a SystemWindow(917922560)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@218) mouseUp 3341837 nil]
		targetOffset: 	(65.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3341837 679 218 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	361027
		lastStepMessage: 	nil
		lastCycleTime: 	361048
		alarms: 	a Heap()
		lastAlarmTime: 	361027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	361027
		lastStepMessage: 	nil
		lastCycleTime: 	361048
		alarms: 	a Heap()
		lastAlarmTime: 	361027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	361027
		lastStepMessage: 	nil
		lastCycleTime: 	361048
		alarms: 	a Heap()
		lastAlarmTime: 	361027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	361027
		lastStepMessage: 	nil
		lastCycleTime: 	361048
		alarms: 	a Heap()
		lastAlarmTime: 	361027
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
BorderedMorph(Morph)>>drawOn:
Morph>>drawKeyboardFocusOn:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of KeyListener did not understand #fillRectangle:fillStyle:borderStyle:
22 June 2017 1:49:41.461248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

KeyListener(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
	Receiver: a KeyListener(381757696)
	Arguments and temporary variables: 
		aMessage: 	fillRectangle: (614.0@194.0) corner: (1114.0@746.0) fillStyle: Color ...etc...
		exception: 	MessageNotUnderstood: KeyListener>>fillRectangle:fillStyle:borderSty...etc...
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(467008256)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


BorderedMorph(Morph)>>drawOn:
	Receiver: a BorderedMorph(780618496)
	Arguments and temporary variables: 
		aCanvas: 	a KeyListener(381757696)
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (880145664)
		borderWidth: 	1
		borderColor: 	(Color r: 0.38 g: 0.638 b: 0.882 alpha: 1.0)


Morph>>drawKeyboardFocusOn:
	Receiver: a Morph(467008256)
	Arguments and temporary variables: 
		aCanvas: 	a KeyListener(381757696)
	Receiver's instance variables: 
		bounds: 	(614.0@194.0) corner: (1114.0@746.0)
		owner: 	a SystemWindow(917922560)
		submorphs: 	an Array(a KeyListener(381757696) a Morph(36124416) a Morph(87369804...etc...
		fullBounds: 	(614@194) corner: (1114@746)
		color: 	Color transparent
		extension: 	a MorphExtension (565827328) [locked] 


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(812634880)
		blueCell: 	a SnakeCell(1033782016)
	Receiver's instance variables: 
		container: 	a Morph(467008256)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(467008256)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(812@291) mouseDown red 3344396 nil]
		sourceMorph: 	a SimpleButtonMorph(497039616)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(812@291) mouseDown red 3344396 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(497039616)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(812@291) mouseDown red 3344396 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(497039616)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(812@291) mouseDown red 3344396 nil]
		sourceMorph: 	a SimpleButtonMorph(497039616)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(497039616)
	Arguments and temporary variables: 
		evt: 	[(812@291) mouseDown red 3344396 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(36124416)
		submorphs: 	an Array(a StringMorph(560577792)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (621799680) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(560577792)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(497039616)
		clickState: 	#firstClickUp
		firstClickDown: 	[(812@291) mouseDown red 3344396 nil]
		firstClickUp: 	[(812@291) mouseUp 3344505 nil]
		firstClickTime: 	3344396
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	363588


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(812@291) mouseUp 3344505 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(812@291) mouseUp 3344505 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(497039616)
		clickState: 	#firstClickUp
		firstClickDown: 	[(812@291) mouseDown red 3344396 nil]
		firstClickUp: 	[(812@291) mouseUp 3344505 nil]
		firstClickTime: 	3344396
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	363588


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(812@291) mouseUp 3344505 nil]
		evt: 	[(812@291) mouseUp 3344505 nil]
	Receiver's instance variables: 
		bounds: 	(812@291.0) corner: (828@307.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(812@291.0) corner: (828@307.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(497039616)
		keyboardFocus: 	a PluggableButtonMorph(742420736)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(812@291) mouseUp 3344505 nil]
		targetOffset: 	(198.0@95.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3344505 812 291 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(812@291) mouseUp 3344505 nil]
		evtBuf: 	#(1 3344505 812 291 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(812@291.0) corner: (828@307.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(812@291.0) corner: (828@307.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(497039616)
		keyboardFocus: 	a PluggableButtonMorph(742420736)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(812@291) mouseUp 3344505 nil]
		targetOffset: 	(198.0@95.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3344505 812 291 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(812@291.0) corner: (828@307.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(812@291.0) corner: (828@307.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(497039616)
		keyboardFocus: 	a PluggableButtonMorph(742420736)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(812@291) mouseUp 3344505 nil]
		targetOffset: 	(198.0@95.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3344505 812 291 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	363673
		lastStepMessage: 	nil
		lastCycleTime: 	363695
		alarms: 	a Heap()
		lastAlarmTime: 	363673
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	363673
		lastStepMessage: 	nil
		lastCycleTime: 	363695
		alarms: 	a Heap()
		lastAlarmTime: 	363673
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	363673
		lastStepMessage: 	nil
		lastCycleTime: 	363695
		alarms: 	a Heap()
		lastAlarmTime: 	363673
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	363673
		lastStepMessage: 	nil
		lastCycleTime: 	363695
		alarms: 	a Heap()
		lastAlarmTime: 	363673
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
KeyListener(Object)>>doesNotUnderstand: #fillRectangle:fillStyle:borderStyle:
BorderedMorph(Morph)>>drawOn:
Morph>>drawKeyboardFocusOn:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of True did not understand #<
22 June 2017 1:53:26.030248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

True(Object)>>doesNotUnderstand: #<
	Receiver: true
	Arguments and temporary variables: 
		aMessage: 	< 28
		exception: 	MessageNotUnderstood: True>><
		resumeValue: 	nil
	Receiver's instance variables: 
true

KeyListener>>handleKeystroke:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		event: 	[keystroke 'd']
		key: 	100
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'd']
	Arguments and temporary variables: 
		anObject: 	a KeyListener(663166720)
	Receiver's instance variables: 
		timeStamp: 	3569053
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1048@456.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	100
		charCode: 	100
		scanCode: 	68


KeyListener(Morph)>>handleEvent:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Morph)>>handleFocusEvent:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'd']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 3569053 100 0 0 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	a CombinedChar
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588263
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588263
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588263
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588263
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
True(Object)>>doesNotUnderstand: #<
KeyListener>>handleKeystroke:
KeyboardEvent>>sentTo:
KeyListener(Morph)>>handleEvent:
KeyListener(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of True did not understand #<
22 June 2017 1:53:26.096248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

True(Object)>>doesNotUnderstand: #<
	Receiver: true
	Arguments and temporary variables: 
		aMessage: 	< 28
		exception: 	MessageNotUnderstood: True>><
		resumeValue: 	nil
	Receiver's instance variables: 
true

KeyListener>>handleKeystroke:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		event: 	[keystroke 'w']
		key: 	119
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'w']
	Arguments and temporary variables: 
		anObject: 	a KeyListener(663166720)
	Receiver's instance variables: 
		timeStamp: 	3569068
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1048@456.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	119
		charCode: 	119
		scanCode: 	87


KeyListener(Morph)>>handleEvent:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Morph)>>handleFocusEvent:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		evt: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'w']
		evtBuf: 	#(2 3569068 119 0 0 119 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588334
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588334
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588334
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588334
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
True(Object)>>doesNotUnderstand: #<
KeyListener>>handleKeystroke:
KeyboardEvent>>sentTo:
KeyListener(Morph)>>handleEvent:
KeyListener(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of True did not understand #<
22 June 2017 1:53:26.138248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

True(Object)>>doesNotUnderstand: #<
	Receiver: true
	Arguments and temporary variables: 
		aMessage: 	< 28
		exception: 	MessageNotUnderstood: True>><
		resumeValue: 	nil
	Receiver's instance variables: 
true

KeyListener>>handleKeystroke:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		event: 	[keystroke 'a']
		key: 	97
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'a']
	Arguments and temporary variables: 
		anObject: 	a KeyListener(663166720)
	Receiver's instance variables: 
		timeStamp: 	3569178
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1048@456.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	97
		charCode: 	97
		scanCode: 	65


KeyListener(Morph)>>handleEvent:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Morph)>>handleFocusEvent:
	Receiver: a KeyListener(663166720)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(870200576)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'a']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		focusHolder: 	a KeyListener(663166720)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'a']
		evtBuf: 	#(2 3569178 97 0 0 97 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1048@456.0) corner: (1064@472.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1048@456.0) corner: (1064@472.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(663166720)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1048@456) mouseOver 3569006 nil]
		targetOffset: 	(73.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3569006 1045 454 0 0 1 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588377
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588377
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588377
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	588242
		lastStepMessage: 	nil
		lastCycleTime: 	588377
		alarms: 	a Heap()
		lastAlarmTime: 	588242
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
True(Object)>>doesNotUnderstand: #<
KeyListener>>handleKeystroke:
KeyboardEvent>>sentTo:
KeyListener(Morph)>>handleEvent:
KeyListener(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
22 June 2017 1:55:39.047248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 119
	Arguments and temporary variables: 
		aMessage: 	, 'high'
		exception: 	MessageNotUnderstood: SmallInteger>>,
		resumeValue: 	nil
	Receiver's instance variables: 
119

KeyListener>>handleKeystroke:
	Receiver: a KeyListener(582250240)
	Arguments and temporary variables: 
		event: 	[keystroke 'w']
		key: 	119
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(156785408)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'w']
	Arguments and temporary variables: 
		anObject: 	a KeyListener(582250240)
	Receiver's instance variables: 
		timeStamp: 	3702075
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1123@508.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	119
		charCode: 	119
		scanCode: 	87


KeyListener(Morph)>>handleEvent:
	Receiver: a KeyListener(582250240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(156785408)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Morph)>>handleFocusEvent:
	Receiver: a KeyListener(582250240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(156785408)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(582250240)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(582250240)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(582250240)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		evt: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'w']
		evtBuf: 	#(2 3702075 119 0 0 119 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721278
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721278
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721278
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721278
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
KeyListener>>handleKeystroke:
KeyboardEvent>>sentTo:
KeyListener(Morph)>>handleEvent:
KeyListener(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #,
22 June 2017 1:55:39.098248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SmallInteger(Object)>>doesNotUnderstand: #,
	Receiver: 100
	Arguments and temporary variables: 
		aMessage: 	, 'high'
		exception: 	MessageNotUnderstood: SmallInteger>>,
		resumeValue: 	nil
	Receiver's instance variables: 
100

KeyListener>>handleKeystroke:
	Receiver: a KeyListener(582250240)
	Arguments and temporary variables: 
		event: 	[keystroke 'd']
		key: 	100
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(156785408)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'd']
	Arguments and temporary variables: 
		anObject: 	a KeyListener(582250240)
	Receiver's instance variables: 
		timeStamp: 	3702106
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1123@508.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	100
		charCode: 	100
		scanCode: 	68


KeyListener(Morph)>>handleEvent:
	Receiver: a KeyListener(582250240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(156785408)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Morph)>>handleFocusEvent:
	Receiver: a KeyListener(582250240)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(156785408)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a KeyListener(582250240)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'd']
		focusHolder: 	a KeyListener(582250240)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		focusHolder: 	a KeyListener(582250240)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'd']
		evt: 	[keystroke 'd']
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'd']
		evtBuf: 	#(2 3702106 100 0 0 100 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1115@500.0) corner: (1131@516.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(582250240)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1115@500) mouseOver 3702044 nil]
		targetOffset: 	(57.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	Form(16x16x8)
		temporaryCursorOffset: 	(-8@ -8)
		hardwareCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r...etc...
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3702044 1113 500 0 0 1 1)
		lastKeyScanCode: 	68
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721336
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721336
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721336
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	721256
		lastStepMessage: 	nil
		lastCycleTime: 	721336
		alarms: 	a Heap()
		lastAlarmTime: 	721256
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #,
KeyListener>>handleKeystroke:
KeyboardEvent>>sentTo:
KeyListener(Morph)>>handleEvent:
KeyListener(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #asText
22 June 2017 1:56:28.959248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SmallInteger(Object)>>doesNotUnderstand: #asText
	Receiver: 119
	Arguments and temporary variables: 
		aMessage: 	asText
		exception: 	MessageNotUnderstood: SmallInteger>>asText
		resumeValue: 	nil
	Receiver's instance variables: 
119

TextMorph>>newContents:
	Receiver: a TextMorph(225276672)
	Arguments and temporary variables: 
		stringOrText: 	119
		newText: 	nil
		embeddedMorphs: 	nil
	Receiver's instance variables: 
		bounds: 	(734.0@211.0) corner: (854.0@232.0)
		owner: 	a Morph(730624768)
		submorphs: 	#()
		fullBounds: 	(734.0@211.0) corner: (854.0@232.0)
		color: 	Color white
		extension: 	a MorphExtension (478784256) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'Welcome to Snake'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


TextMorph>>contentsAsIs:
	Receiver: a TextMorph(225276672)
	Arguments and temporary variables: 
		stringOrText: 	119
	Receiver's instance variables: 
		bounds: 	(734.0@211.0) corner: (854.0@232.0)
		owner: 	a Morph(730624768)
		submorphs: 	#()
		fullBounds: 	(734.0@211.0) corner: (854.0@232.0)
		color: 	Color white
		extension: 	a MorphExtension (478784256) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'Welcome to Snake'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


TextMorph>>contents:
	Receiver: a TextMorph(225276672)
	Arguments and temporary variables: 
		stringOrText: 	119
	Receiver's instance variables: 
		bounds: 	(734.0@211.0) corner: (854.0@232.0)
		owner: 	a Morph(730624768)
		submorphs: 	#()
		fullBounds: 	(734.0@211.0) corner: (854.0@232.0)
		color: 	Color white
		extension: 	a MorphExtension (478784256) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for 'Welcome to Snake'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


KeyListener>>handleKeystroke:
	Receiver: a KeyListener(483441408)
	Arguments and temporary variables: 
		event: 	[keystroke 'w']
		key: 	119
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(107947776)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'w']
	Arguments and temporary variables: 
		anObject: 	a KeyListener(483441408)
	Receiver's instance variables: 
		timeStamp: 	3751964
		source: 	a HandMorph(58125568)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(1139@260.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	119
		charCode: 	119
		scanCode: 	87


KeyListener(Morph)>>handleEvent:
	Receiver: a KeyListener(483441408)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(107947776)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


KeyListener(Morph)>>handleFocusEvent:
	Receiver: a KeyListener(483441408)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(864.0@195.0) corner: (864.0@195.0)
		owner: 	a Morph(107947776)
		submorphs: 	#()
		fullBounds: 	(864.0@195.0) corner: (864.0@195.0)
		color: 	Color blue
		extension: 	nil
		parent: 	a SnakeGame


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(483441408)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1139@260.0) corner: (1155@276.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1139@260.0) corner: (1155@276.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(483441408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1139@260) mouseOver 3751964 nil]
		targetOffset: 	(73.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3751964 1139 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	67
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(562956288) [world]
		priorHand: 	a HandMorph(58125568)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(483441408)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		bounds: 	(1139@260.0) corner: (1155@276.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1139@260.0) corner: (1155@276.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(483441408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1139@260) mouseOver 3751964 nil]
		targetOffset: 	(73.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3751964 1139 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		focusHolder: 	a KeyListener(483441408)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(1139@260.0) corner: (1155@276.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1139@260.0) corner: (1155@276.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(483441408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1139@260) mouseOver 3751964 nil]
		targetOffset: 	(73.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3751964 1139 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(1139@260.0) corner: (1155@276.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1139@260.0) corner: (1155@276.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(483441408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1139@260) mouseOver 3751964 nil]
		targetOffset: 	(73.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3751964 1139 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'w']
		evt: 	[keystroke 'w']
	Receiver's instance variables: 
		bounds: 	(1139@260.0) corner: (1155@276.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1139@260.0) corner: (1155@276.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(483441408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1139@260) mouseOver 3751964 nil]
		targetOffset: 	(73.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3751964 1139 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[keystroke 'w']
		evtBuf: 	#(2 3751964 119 0 0 119 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	(1139@260.0) corner: (1155@276.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1139@260.0) corner: (1155@276.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(483441408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1139@260) mouseOver 3751964 nil]
		targetOffset: 	(73.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3751964 1139 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1139@260.0) corner: (1155@276.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1139@260.0) corner: (1155@276.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	a KeyListener(483441408)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1139@260) mouseOver 3751964 nil]
		targetOffset: 	(73.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3751964 1139 260 0 0 0 1)
		lastKeyScanCode: 	87
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	771170
		lastStepMessage: 	nil
		lastCycleTime: 	771191
		alarms: 	a Heap()
		lastAlarmTime: 	771170
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	771170
		lastStepMessage: 	nil
		lastCycleTime: 	771191
		alarms: 	a Heap()
		lastAlarmTime: 	771170
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	771170
		lastStepMessage: 	nil
		lastCycleTime: 	771191
		alarms: 	a Heap()
		lastAlarmTime: 	771170
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	771170
		lastStepMessage: 	nil
		lastCycleTime: 	771191
		alarms: 	a Heap()
		lastAlarmTime: 	771170
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #asText
TextMorph>>newContents:
TextMorph>>contentsAsIs:
TextMorph>>contents:
KeyListener>>handleKeystroke:
KeyboardEvent>>sentTo:
KeyListener(Morph)>>handleEvent:
KeyListener(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 1:59:57.887248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(986722560) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (988@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(986722560) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (988@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(986722560) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (988@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(986722560) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (988@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(347@744.0) corner: (363@760.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(347@744) mouseOver SHIFT CTRL 3960147 nil]
		targetOffset: 	(74@303)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3960147 347 744 0 3 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(347@744.0) corner: (363@760.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(347@744) mouseOver SHIFT CTRL 3960147 nil]
		targetOffset: 	(74@303)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3960147 347 744 0 3 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	979663
		lastStepMessage: 	nil
		lastCycleTime: 	979683
		alarms: 	a Heap()
		lastAlarmTime: 	979663
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of True did not understand #whileTrue:
22 June 2017 5:57:27.338248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

True(Object)>>doesNotUnderstand: #whileTrue:
	Receiver: true
	Arguments and temporary variables: 
		aMessage: 	whileTrue: [ Delay forMilliseconds: 120.
model executeStep.
winner :=...etc...
		exception: 	MessageNotUnderstood: True>>whileTrue:
		resumeValue: 	nil
	Receiver's instance variables: 
true

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		winner: 	nil
		redCell: 	a SnakeCell(898465024)
		blueCell: 	a SnakeCell(473076480)
	Receiver's instance variables: 
		container: 	a Morph(367077120)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(367077120)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(682@208) mouseDown red 18210277 nil]
		sourceMorph: 	a SimpleButtonMorph(402544896)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@208) mouseDown red 18210277 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(402544896)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(682@208) mouseDown red 18210277 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(402544896)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(682@208) mouseDown red 18210277 nil]
		sourceMorph: 	a SimpleButtonMorph(402544896)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(402544896)
	Arguments and temporary variables: 
		evt: 	[(682@208) mouseDown red 18210277 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(1000189184)
		submorphs: 	an Array(a StringMorph(245773056)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (24568576) [eventHandler = a MorphicEventHandler] 
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(245773056)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(402544896)
		clickState: 	#firstClickUp
		firstClickDown: 	[(682@208) mouseDown red 18210277 nil]
		firstClickUp: 	[(682@208) mouseUp 18210355 nil]
		firstClickTime: 	18210277
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15229491


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(682@208) mouseUp 18210355 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(682@208) mouseUp 18210355 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(402544896)
		clickState: 	#firstClickUp
		firstClickDown: 	[(682@208) mouseDown red 18210277 nil]
		firstClickUp: 	[(682@208) mouseUp 18210355 nil]
		firstClickTime: 	18210277
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15229491


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(682@208) mouseUp 18210355 nil]
		evt: 	[(682@208) mouseUp 18210355 nil]
	Receiver's instance variables: 
		bounds: 	(682@208.0) corner: (698@224.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@208.0) corner: (698@224.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(402544896)
		keyboardFocus: 	a KeyListener(188521728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@208) mouseUp 18210355 nil]
		targetOffset: 	(68.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18210355 682 208 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(682@208) mouseUp 18210355 nil]
		evtBuf: 	#(1 18210355 682 208 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@208.0) corner: (698@224.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@208.0) corner: (698@224.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(402544896)
		keyboardFocus: 	a KeyListener(188521728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@208) mouseUp 18210355 nil]
		targetOffset: 	(68.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18210355 682 208 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@208.0) corner: (698@224.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@208.0) corner: (698@224.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(402544896)
		keyboardFocus: 	a KeyListener(188521728)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(682@208) mouseUp 18210355 nil]
		targetOffset: 	(68.0@12.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18210355 682 208 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15229534
		lastStepMessage: 	nil
		lastCycleTime: 	15229554
		alarms: 	a Heap()
		lastAlarmTime: 	15229534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15229534
		lastStepMessage: 	nil
		lastCycleTime: 	15229554
		alarms: 	a Heap()
		lastAlarmTime: 	15229534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15229534
		lastStepMessage: 	nil
		lastCycleTime: 	15229554
		alarms: 	a Heap()
		lastAlarmTime: 	15229534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15229534
		lastStepMessage: 	nil
		lastCycleTime: 	15229554
		alarms: 	a Heap()
		lastAlarmTime: 	15229534
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
True(Object)>>doesNotUnderstand: #whileTrue:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
22 June 2017 5:58:43.323248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(572455680) a SnakeCell(538559744) a SnakeCell(1005396224) a ...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 19 at: 20
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(572455680) a SnakeCell(538559744) a SnakeCell(1005396224) a ...etc...

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(101309184))
		firstCell: 	a SnakeCell(101309184)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(101309184))
		redCells: 	an OrderedCollection(a SnakeCell(825353472))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(101309184))
		redCells: 	an OrderedCollection(a SnakeCell(825353472))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(825353472)
		blueCell: 	a SnakeCell(101309184)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(536632576)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(536632576)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(700@226) mouseDown red 18286281 nil]
		sourceMorph: 	a SimpleButtonMorph(93229824)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(700@226) mouseDown red 18286281 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(93229824)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	4
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a MorphEventSubscription nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(700@226) mouseDown red 18286281 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(93229824)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(700@226) mouseDown red 18286281 nil]
		sourceMorph: 	a SimpleButtonMorph(93229824)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(93229824)
	Arguments and temporary variables: 
		evt: 	[(700@226) mouseDown red 18286281 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(325944064)
		submorphs: 	an Array(a StringMorph(222213376)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (267759872) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(222213376)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(93229824)
		clickState: 	#firstClickUp
		firstClickDown: 	[(700@226) mouseDown red 18286281 nil]
		firstClickUp: 	[(700@226) mouseUp 18286359 nil]
		firstClickTime: 	18286281
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15305492


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(700@226) mouseUp 18286359 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(700@226) mouseUp 18286359 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(93229824)
		clickState: 	#firstClickUp
		firstClickDown: 	[(700@226) mouseDown red 18286281 nil]
		firstClickUp: 	[(700@226) mouseUp 18286359 nil]
		firstClickTime: 	18286281
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15305492


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(700@226) mouseUp 18286359 nil]
		evt: 	[(700@226) mouseUp 18286359 nil]
	Receiver's instance variables: 
		bounds: 	(700@226.0) corner: (716@242.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(700@226.0) corner: (716@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(700@226) mouseUp 18286359 nil]
		targetOffset: 	(86.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18286359 700 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(700@226) mouseUp 18286359 nil]
		evtBuf: 	#(1 18286359 700 226 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(700@226.0) corner: (716@242.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(700@226.0) corner: (716@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(700@226) mouseUp 18286359 nil]
		targetOffset: 	(86.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18286359 700 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(700@226.0) corner: (716@242.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(700@226.0) corner: (716@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(700@226) mouseUp 18286359 nil]
		targetOffset: 	(86.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18286359 700 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15305535
		lastStepMessage: 	nil
		lastCycleTime: 	15305555
		alarms: 	a Heap()
		lastAlarmTime: 	15305535
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15305535
		lastStepMessage: 	nil
		lastCycleTime: 	15305555
		alarms: 	a Heap()
		lastAlarmTime: 	15305535
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15305535
		lastStepMessage: 	nil
		lastCycleTime: 	15305555
		alarms: 	a Heap()
		lastAlarmTime: 	15305535
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15305535
		lastStepMessage: 	nil
		lastCycleTime: 	15305555
		alarms: 	a Heap()
		lastAlarmTime: 	15305535
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
22 June 2017 5:58:47.328248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(572455680) a SnakeCell(538559744) a SnakeCell(1005396224) a ...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 19 at: 20
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(572455680) a SnakeCell(538559744) a SnakeCell(1005396224) a ...etc...

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(101309184) a SnakeCell(101309184))
		firstCell: 	a SnakeCell(101309184)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(101309184) a SnakeCell(101309184))
		redCells: 	an OrderedCollection(a SnakeCell(825353472) a SnakeCell(825353472))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(101309184) a SnakeCell(101309184))
		redCells: 	an OrderedCollection(a SnakeCell(825353472) a SnakeCell(825353472))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(825353472)
		blueCell: 	a SnakeCell(101309184)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(536632576)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(536632576)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(816@278) mouseDown red 18290274 nil]
		sourceMorph: 	a SimpleButtonMorph(93229824)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(816@278) mouseDown red 18290274 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(93229824)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	4
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a MorphEventSubscription nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(816@278) mouseDown red 18290274 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(93229824)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(816@278) mouseDown red 18290274 nil]
		sourceMorph: 	a SimpleButtonMorph(93229824)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(93229824)
	Arguments and temporary variables: 
		evt: 	[(816@278) mouseDown red 18290274 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(325944064)
		submorphs: 	an Array(a StringMorph(222213376)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (267759872) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(222213376)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(93229824)
		clickState: 	#firstClickUp
		firstClickDown: 	[(816@278) mouseDown red 18290274 nil]
		firstClickUp: 	[(816@278) mouseUp 18290368 nil]
		firstClickTime: 	18290274
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15309477


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(816@278) mouseUp 18290368 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(816@278) mouseUp 18290368 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(93229824)
		clickState: 	#firstClickUp
		firstClickDown: 	[(816@278) mouseDown red 18290274 nil]
		firstClickUp: 	[(816@278) mouseUp 18290368 nil]
		firstClickTime: 	18290274
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15309477


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(816@278) mouseUp 18290368 nil]
		evt: 	[(816@278) mouseUp 18290368 nil]
	Receiver's instance variables: 
		bounds: 	(816@278.0) corner: (832@294.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(816@278.0) corner: (832@294.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(816@278) mouseUp 18290368 nil]
		targetOffset: 	(202.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18290368 816 278 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(816@278) mouseUp 18290368 nil]
		evtBuf: 	#(1 18290368 816 278 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(816@278.0) corner: (832@294.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(816@278.0) corner: (832@294.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(816@278) mouseUp 18290368 nil]
		targetOffset: 	(202.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18290368 816 278 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(816@278.0) corner: (832@294.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(816@278.0) corner: (832@294.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(816@278) mouseUp 18290368 nil]
		targetOffset: 	(202.0@82.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18290368 816 278 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15309541
		lastStepMessage: 	nil
		lastCycleTime: 	15309561
		alarms: 	a Heap()
		lastAlarmTime: 	15309541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15309541
		lastStepMessage: 	nil
		lastCycleTime: 	15309561
		alarms: 	a Heap()
		lastAlarmTime: 	15309541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15309541
		lastStepMessage: 	nil
		lastCycleTime: 	15309561
		alarms: 	a Heap()
		lastAlarmTime: 	15309541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15309541
		lastStepMessage: 	nil
		lastCycleTime: 	15309561
		alarms: 	a Heap()
		lastAlarmTime: 	15309541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
22 June 2017 5:58:49.855248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(572455680) a SnakeCell(538559744) a SnakeCell(1005396224) a ...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 19 at: 20
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(572455680) a SnakeCell(538559744) a SnakeCell(1005396224) a ...etc...

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(101309184) a SnakeCell(101309184) a S...etc...
		firstCell: 	a SnakeCell(101309184)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(101309184) a SnakeCell(101309184) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(825353472) a SnakeCell(825353472) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(101309184) a SnakeCell(101309184) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(825353472) a SnakeCell(825353472) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(825353472)
		blueCell: 	a SnakeCell(101309184)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(536632576)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(536632576)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(620@221) mouseDown red 18292770 nil]
		sourceMorph: 	a SimpleButtonMorph(93229824)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(620@221) mouseDown red 18292770 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(93229824)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	4
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a MorphEventSubscription nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(620@221) mouseDown red 18292770 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(93229824)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(620@221) mouseDown red 18292770 nil]
		sourceMorph: 	a SimpleButtonMorph(93229824)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(93229824)
	Arguments and temporary variables: 
		evt: 	[(620@221) mouseDown red 18292770 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(325944064)
		submorphs: 	an Array(a StringMorph(222213376)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (267759872) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(222213376)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(93229824)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@221) mouseDown red 18292770 nil]
		firstClickUp: 	[(620@221) mouseUp 18292880 nil]
		firstClickTime: 	18292770
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15311986


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(620@221) mouseUp 18292880 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(620@221) mouseUp 18292880 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(93229824)
		clickState: 	#firstClickUp
		firstClickDown: 	[(620@221) mouseDown red 18292770 nil]
		firstClickUp: 	[(620@221) mouseUp 18292880 nil]
		firstClickTime: 	18292770
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15311986


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(620@221) mouseUp 18292880 nil]
		evt: 	[(620@221) mouseUp 18292880 nil]
	Receiver's instance variables: 
		bounds: 	(620@221.0) corner: (636@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@221.0) corner: (636@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@221) mouseUp 18292880 nil]
		targetOffset: 	(6.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18292880 620 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(620@221) mouseUp 18292880 nil]
		evtBuf: 	#(1 18292880 620 221 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(620@221.0) corner: (636@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@221.0) corner: (636@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@221) mouseUp 18292880 nil]
		targetOffset: 	(6.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18292880 620 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@221.0) corner: (636@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(620@221.0) corner: (636@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(93229824)
		keyboardFocus: 	a KeyListener(280475392)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@221) mouseUp 18292880 nil]
		targetOffset: 	(6.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18292880 620 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15312070
		lastStepMessage: 	nil
		lastCycleTime: 	15312091
		alarms: 	a Heap()
		lastAlarmTime: 	15312070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15312070
		lastStepMessage: 	nil
		lastCycleTime: 	15312091
		alarms: 	a Heap()
		lastAlarmTime: 	15312070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15312070
		lastStepMessage: 	nil
		lastCycleTime: 	15312091
		alarms: 	a Heap()
		lastAlarmTime: 	15312070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15312070
		lastStepMessage: 	nil
		lastCycleTime: 	15312091
		alarms: 	a Heap()
		lastAlarmTime: 	15312070
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
22 June 2017 6:01:39.602248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(842623744) a SnakeCell(397961984) a SnakeCell(211932416) a S...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 19 at: 20
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(842623744) a SnakeCell(397961984) a SnakeCell(211932416) a S...etc...

SnakeGame>>rows:at:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aRow: 	19
		aColumn: 	20
	Receiver's instance variables: 
		container: 	a Morph(1033900800)
		model: 	<<error during printing>>

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(405644032))
		firstCell: 	a SnakeCell(405644032)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(405644032))
		redCells: 	an OrderedCollection(a SnakeCell(475094272))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(405644032))
		redCells: 	an OrderedCollection(a SnakeCell(475094272))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(475094272)
		blueCell: 	a SnakeCell(405644032)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(1033900800)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(1033900800)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(659@221) mouseDown red 18462562 nil]
		sourceMorph: 	a SimpleButtonMorph(509247744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(659@221) mouseDown red 18462562 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(509247744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	4
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a MorphEventSubscription nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(659@221) mouseDown red 18462562 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(509247744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(659@221) mouseDown red 18462562 nil]
		sourceMorph: 	a SimpleButtonMorph(509247744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(509247744)
	Arguments and temporary variables: 
		evt: 	[(659@221) mouseDown red 18462562 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(132367616)
		submorphs: 	an Array(a StringMorph(566839552)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (637576960) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(566839552)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(509247744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(659@221) mouseDown red 18462562 nil]
		firstClickUp: 	[(659@221) mouseUp 18462640 nil]
		firstClickTime: 	18462562
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15481771


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(659@221) mouseUp 18462640 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(659@221) mouseUp 18462640 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(509247744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(659@221) mouseDown red 18462562 nil]
		firstClickUp: 	[(659@221) mouseUp 18462640 nil]
		firstClickTime: 	18462562
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15481771


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(659@221) mouseUp 18462640 nil]
		evt: 	[(659@221) mouseUp 18462640 nil]
	Receiver's instance variables: 
		bounds: 	(659@221.0) corner: (675@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(659@221.0) corner: (675@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(509247744)
		keyboardFocus: 	a KeyListener(929769216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(659@221) mouseUp 18462640 nil]
		targetOffset: 	(45.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18462640 659 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(659@221) mouseUp 18462640 nil]
		evtBuf: 	#(1 18462640 659 221 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(659@221.0) corner: (675@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(659@221.0) corner: (675@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(509247744)
		keyboardFocus: 	a KeyListener(929769216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(659@221) mouseUp 18462640 nil]
		targetOffset: 	(45.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18462640 659 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(659@221.0) corner: (675@237.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(659@221.0) corner: (675@237.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(509247744)
		keyboardFocus: 	a KeyListener(929769216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(659@221) mouseUp 18462640 nil]
		targetOffset: 	(45.0@25.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18462640 659 221 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15481812
		lastStepMessage: 	nil
		lastCycleTime: 	15481834
		alarms: 	a Heap()
		lastAlarmTime: 	15481812
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15481812
		lastStepMessage: 	nil
		lastCycleTime: 	15481834
		alarms: 	a Heap()
		lastAlarmTime: 	15481812
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15481812
		lastStepMessage: 	nil
		lastCycleTime: 	15481834
		alarms: 	a Heap()
		lastAlarmTime: 	15481812
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15481812
		lastStepMessage: 	nil
		lastCycleTime: 	15481834
		alarms: 	a Heap()
		lastAlarmTime: 	15481812
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>rows:at:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
22 June 2017 6:01:42.795248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(842623744) a SnakeCell(397961984) a SnakeCell(211932416) a S...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 19 at: 20
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(842623744) a SnakeCell(397961984) a SnakeCell(211932416) a S...etc...

SnakeGame>>rows:at:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aRow: 	19
		aColumn: 	20
	Receiver's instance variables: 
		container: 	a Morph(1033900800)
		model: 	<<error during printing>>

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(405644032) a SnakeCell(405644032))
		firstCell: 	a SnakeCell(405644032)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(405644032) a SnakeCell(405644032))
		redCells: 	an OrderedCollection(a SnakeCell(475094272) a SnakeCell(475094272))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(405644032) a SnakeCell(405644032))
		redCells: 	an OrderedCollection(a SnakeCell(475094272) a SnakeCell(475094272))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(475094272)
		blueCell: 	a SnakeCell(405644032)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(1033900800)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(1033900800)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(728@277) mouseDown red 18465760 nil]
		sourceMorph: 	a SimpleButtonMorph(509247744)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(728@277) mouseDown red 18465760 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(509247744)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	4
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil a MorphEventSubscription nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(728@277) mouseDown red 18465760 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(509247744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(728@277) mouseDown red 18465760 nil]
		sourceMorph: 	a SimpleButtonMorph(509247744)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(509247744)
	Arguments and temporary variables: 
		evt: 	[(728@277) mouseDown red 18465760 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(132367616)
		submorphs: 	an Array(a StringMorph(566839552)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (637576960) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(566839552)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(509247744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(728@277) mouseDown red 18465760 nil]
		firstClickUp: 	[(728@277) mouseUp 18465822 nil]
		firstClickTime: 	18465760
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15484946


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(728@277) mouseUp 18465822 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(728@277) mouseUp 18465822 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(509247744)
		clickState: 	#firstClickUp
		firstClickDown: 	[(728@277) mouseDown red 18465760 nil]
		firstClickUp: 	[(728@277) mouseUp 18465822 nil]
		firstClickTime: 	18465760
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15484946


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(728@277) mouseUp 18465822 nil]
		evt: 	[(728@277) mouseUp 18465822 nil]
	Receiver's instance variables: 
		bounds: 	(728@277.0) corner: (744@293.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(728@277.0) corner: (744@293.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(509247744)
		keyboardFocus: 	a KeyListener(929769216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@277) mouseUp 18465822 nil]
		targetOffset: 	(114.0@81.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18465822 728 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(728@277) mouseUp 18465822 nil]
		evtBuf: 	#(1 18465822 728 277 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(728@277.0) corner: (744@293.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(728@277.0) corner: (744@293.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(509247744)
		keyboardFocus: 	a KeyListener(929769216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@277) mouseUp 18465822 nil]
		targetOffset: 	(114.0@81.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18465822 728 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(728@277.0) corner: (744@293.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(728@277.0) corner: (744@293.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(509247744)
		keyboardFocus: 	a KeyListener(929769216)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(728@277) mouseUp 18465822 nil]
		targetOffset: 	(114.0@81.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18465822 728 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15485009
		lastStepMessage: 	nil
		lastCycleTime: 	15485030
		alarms: 	a Heap()
		lastAlarmTime: 	15485009
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15485009
		lastStepMessage: 	nil
		lastCycleTime: 	15485030
		alarms: 	a Heap()
		lastAlarmTime: 	15485009
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15485009
		lastStepMessage: 	nil
		lastCycleTime: 	15485030
		alarms: 	a Heap()
		lastAlarmTime: 	15485009
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15485009
		lastStepMessage: 	nil
		lastCycleTime: 	15485030
		alarms: 	a Heap()
		lastAlarmTime: 	15485009
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>rows:at:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:02:59.317248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(1022878464))
		firstCell: 	a SnakeCell(1022878464)
		newCell: 	nil
		lastCell: 	a SnakeCell(1022878464)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1022878464))
		redCells: 	an OrderedCollection(a SnakeCell(582213888))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1022878464))
		redCells: 	an OrderedCollection(a SnakeCell(582213888))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(582213888)
		blueCell: 	a SnakeCell(262262528)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(869291264)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(869291264)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(679@213) mouseDown red 18542247 nil]
		sourceMorph: 	a SimpleButtonMorph(323564800)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(679@213) mouseDown red 18542247 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(323564800)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(679@213) mouseDown red 18542247 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(323564800)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(679@213) mouseDown red 18542247 nil]
		sourceMorph: 	a SimpleButtonMorph(323564800)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(323564800)
	Arguments and temporary variables: 
		evt: 	[(679@213) mouseDown red 18542247 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(727685888)
		submorphs: 	an Array(a StringMorph(137733888)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (982513920) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(137733888)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(323564800)
		clickState: 	#firstClickUp
		firstClickDown: 	[(679@213) mouseDown red 18542247 nil]
		firstClickUp: 	[(679@213) mouseUp 18542341 nil]
		firstClickTime: 	18542247
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15561464


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(679@213) mouseUp 18542341 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(679@213) mouseUp 18542341 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(323564800)
		clickState: 	#firstClickUp
		firstClickDown: 	[(679@213) mouseDown red 18542247 nil]
		firstClickUp: 	[(679@213) mouseUp 18542341 nil]
		firstClickTime: 	18542247
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15561464


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(679@213) mouseUp 18542341 nil]
		evt: 	[(679@213) mouseUp 18542341 nil]
	Receiver's instance variables: 
		bounds: 	(679@213.0) corner: (695@229.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(679@213.0) corner: (695@229.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(323564800)
		keyboardFocus: 	a KeyListener(151911680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@213) mouseUp 18542341 nil]
		targetOffset: 	(65.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18542341 679 213 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(679@213) mouseUp 18542341 nil]
		evtBuf: 	#(1 18542341 679 213 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(679@213.0) corner: (695@229.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(679@213.0) corner: (695@229.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(323564800)
		keyboardFocus: 	a KeyListener(151911680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@213) mouseUp 18542341 nil]
		targetOffset: 	(65.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18542341 679 213 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(679@213.0) corner: (695@229.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(679@213.0) corner: (695@229.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(323564800)
		keyboardFocus: 	a KeyListener(151911680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(679@213) mouseUp 18542341 nil]
		targetOffset: 	(65.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18542341 679 213 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15561527
		lastStepMessage: 	nil
		lastCycleTime: 	15561548
		alarms: 	a Heap()
		lastAlarmTime: 	15561527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15561527
		lastStepMessage: 	nil
		lastCycleTime: 	15561548
		alarms: 	a Heap()
		lastAlarmTime: 	15561527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15561527
		lastStepMessage: 	nil
		lastCycleTime: 	15561548
		alarms: 	a Heap()
		lastAlarmTime: 	15561527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15561527
		lastStepMessage: 	nil
		lastCycleTime: 	15561548
		alarms: 	a Heap()
		lastAlarmTime: 	15561527
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:03:07.543248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(1022878464) a SnakeCell(171654400))
		firstCell: 	a SnakeCell(1022878464)
		newCell: 	nil
		lastCell: 	a SnakeCell(171654400)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1022878464) a SnakeCell(171654400))...etc...
		redCells: 	an OrderedCollection(a SnakeCell(582213888) a SnakeCell(582213888))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1022878464) a SnakeCell(171654400))...etc...
		redCells: 	an OrderedCollection(a SnakeCell(582213888) a SnakeCell(582213888))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(582213888)
		blueCell: 	a SnakeCell(262262528)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(869291264)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(869291264)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(810@277) mouseDown red 18550468 nil]
		sourceMorph: 	a SimpleButtonMorph(323564800)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(810@277) mouseDown red 18550468 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(323564800)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(810@277) mouseDown red 18550468 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(323564800)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(810@277) mouseDown red 18550468 nil]
		sourceMorph: 	a SimpleButtonMorph(323564800)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(323564800)
	Arguments and temporary variables: 
		evt: 	[(810@277) mouseDown red 18550468 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(727685888)
		submorphs: 	an Array(a StringMorph(137733888)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (982513920) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(137733888)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(323564800)
		clickState: 	#firstClickUp
		firstClickDown: 	[(810@277) mouseDown red 18550468 nil]
		firstClickUp: 	[(810@277) mouseUp 18550562 nil]
		firstClickTime: 	18550468
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15569669


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(810@277) mouseUp 18550562 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(810@277) mouseUp 18550562 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(323564800)
		clickState: 	#firstClickUp
		firstClickDown: 	[(810@277) mouseDown red 18550468 nil]
		firstClickUp: 	[(810@277) mouseUp 18550562 nil]
		firstClickTime: 	18550468
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15569669


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(810@277) mouseUp 18550562 nil]
		evt: 	[(810@277) mouseUp 18550562 nil]
	Receiver's instance variables: 
		bounds: 	(810@277.0) corner: (826@293.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(810@277.0) corner: (826@293.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(323564800)
		keyboardFocus: 	a KeyListener(151911680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(810@277) mouseUp 18550562 nil]
		targetOffset: 	(196.0@81.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18550562 810 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(810@277) mouseUp 18550562 nil]
		evtBuf: 	#(1 18550562 810 277 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(810@277.0) corner: (826@293.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(810@277.0) corner: (826@293.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(323564800)
		keyboardFocus: 	a KeyListener(151911680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(810@277) mouseUp 18550562 nil]
		targetOffset: 	(196.0@81.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18550562 810 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(810@277.0) corner: (826@293.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(810@277.0) corner: (826@293.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(323564800)
		keyboardFocus: 	a KeyListener(151911680)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(810@277) mouseUp 18550562 nil]
		targetOffset: 	(196.0@81.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18550562 810 277 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15569753
		lastStepMessage: 	nil
		lastCycleTime: 	15569774
		alarms: 	a Heap()
		lastAlarmTime: 	15569753
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15569753
		lastStepMessage: 	nil
		lastCycleTime: 	15569774
		alarms: 	a Heap()
		lastAlarmTime: 	15569753
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15569753
		lastStepMessage: 	nil
		lastCycleTime: 	15569774
		alarms: 	a Heap()
		lastAlarmTime: 	15569753
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15569753
		lastStepMessage: 	nil
		lastCycleTime: 	15569774
		alarms: 	a Heap()
		lastAlarmTime: 	15569753
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:04:43.371248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(1061063936))
		firstCell: 	a SnakeCell(1061063936)
		newCell: 	nil
		lastCell: 	a SnakeCell(1061063936)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1061063936))
		redCells: 	an OrderedCollection(a SnakeCell(633826048))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1061063936))
		redCells: 	an OrderedCollection(a SnakeCell(633826048))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(633826048)
		blueCell: 	a SnakeCell(115457280)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(297344768)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(297344768)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(677@222) mouseDown red 18646331 nil]
		sourceMorph: 	a SimpleButtonMorph(118488832)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(677@222) mouseDown red 18646331 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(118488832)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(677@222) mouseDown red 18646331 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(118488832)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(677@222) mouseDown red 18646331 nil]
		sourceMorph: 	a SimpleButtonMorph(118488832)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(118488832)
	Arguments and temporary variables: 
		evt: 	[(677@222) mouseDown red 18646331 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(727146752)
		submorphs: 	an Array(a StringMorph(241718016)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (590988032) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(241718016)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(118488832)
		clickState: 	#firstClickUp
		firstClickDown: 	[(677@222) mouseDown red 18646331 nil]
		firstClickUp: 	[(677@222) mouseUp 18646409 nil]
		firstClickTime: 	18646331
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15665560


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(677@222) mouseUp 18646409 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(677@222) mouseUp 18646409 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(118488832)
		clickState: 	#firstClickUp
		firstClickDown: 	[(677@222) mouseDown red 18646331 nil]
		firstClickUp: 	[(677@222) mouseUp 18646409 nil]
		firstClickTime: 	18646331
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15665560


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(677@222) mouseUp 18646409 nil]
		evt: 	[(677@222) mouseUp 18646409 nil]
	Receiver's instance variables: 
		bounds: 	(677@222.0) corner: (693@238.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(677@222.0) corner: (693@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(118488832)
		keyboardFocus: 	a KeyListener(997122816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(677@222) mouseUp 18646409 nil]
		targetOffset: 	(63.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18646409 677 222 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(677@222) mouseUp 18646409 nil]
		evtBuf: 	#(1 18646409 677 222 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(677@222.0) corner: (693@238.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(677@222.0) corner: (693@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(118488832)
		keyboardFocus: 	a KeyListener(997122816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(677@222) mouseUp 18646409 nil]
		targetOffset: 	(63.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18646409 677 222 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(677@222.0) corner: (693@238.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(677@222.0) corner: (693@238.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(118488832)
		keyboardFocus: 	a KeyListener(997122816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(677@222) mouseUp 18646409 nil]
		targetOffset: 	(63.0@26.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18646409 677 222 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15665582
		lastStepMessage: 	nil
		lastCycleTime: 	15665603
		alarms: 	a Heap()
		lastAlarmTime: 	15665582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15665582
		lastStepMessage: 	nil
		lastCycleTime: 	15665603
		alarms: 	a Heap()
		lastAlarmTime: 	15665582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15665582
		lastStepMessage: 	nil
		lastCycleTime: 	15665603
		alarms: 	a Heap()
		lastAlarmTime: 	15665582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15665582
		lastStepMessage: 	nil
		lastCycleTime: 	15665603
		alarms: 	a Heap()
		lastAlarmTime: 	15665582
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:04:45.617248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(1061063936) a SnakeCell(85417728))
		firstCell: 	a SnakeCell(1061063936)
		newCell: 	nil
		lastCell: 	a SnakeCell(85417728)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1061063936) a SnakeCell(85417728))
		redCells: 	an OrderedCollection(a SnakeCell(633826048) a SnakeCell(633826048))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(1061063936) a SnakeCell(85417728))
		redCells: 	an OrderedCollection(a SnakeCell(633826048) a SnakeCell(633826048))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(633826048)
		blueCell: 	a SnakeCell(115457280)
		winner: 	nil
	Receiver's instance variables: 
		container: 	a Morph(297344768)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(297344768)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(622@201) mouseDown red 18648562 nil]
		sourceMorph: 	a SimpleButtonMorph(118488832)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(622@201) mouseDown red 18648562 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(118488832)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(622@201) mouseDown red 18648562 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(118488832)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(622@201) mouseDown red 18648562 nil]
		sourceMorph: 	a SimpleButtonMorph(118488832)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(118488832)
	Arguments and temporary variables: 
		evt: 	[(622@201) mouseDown red 18648562 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(727146752)
		submorphs: 	an Array(a StringMorph(241718016)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (590988032) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(241718016)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(118488832)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@201) mouseDown red 18648562 nil]
		firstClickUp: 	[(622@201) mouseUp 18648655 nil]
		firstClickTime: 	18648562
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15667767


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(622@201) mouseUp 18648655 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(622@201) mouseUp 18648655 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(118488832)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@201) mouseDown red 18648562 nil]
		firstClickUp: 	[(622@201) mouseUp 18648655 nil]
		firstClickTime: 	18648562
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15667767


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(622@201) mouseUp 18648655 nil]
		evt: 	[(622@201) mouseUp 18648655 nil]
	Receiver's instance variables: 
		bounds: 	(622@201.0) corner: (638@217.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@201.0) corner: (638@217.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(118488832)
		keyboardFocus: 	a KeyListener(997122816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@201) mouseUp 18648655 nil]
		targetOffset: 	(8.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18648655 622 201 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(622@201) mouseUp 18648655 nil]
		evtBuf: 	#(1 18648655 622 201 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(622@201.0) corner: (638@217.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@201.0) corner: (638@217.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(118488832)
		keyboardFocus: 	a KeyListener(997122816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@201) mouseUp 18648655 nil]
		targetOffset: 	(8.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18648655 622 201 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@201.0) corner: (638@217.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@201.0) corner: (638@217.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(118488832)
		keyboardFocus: 	a KeyListener(997122816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@201) mouseUp 18648655 nil]
		targetOffset: 	(8.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18648655 622 201 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15667830
		lastStepMessage: 	nil
		lastCycleTime: 	15667851
		alarms: 	a Heap()
		lastAlarmTime: 	15667830
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15667830
		lastStepMessage: 	nil
		lastCycleTime: 	15667851
		alarms: 	a Heap()
		lastAlarmTime: 	15667830
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15667830
		lastStepMessage: 	nil
		lastCycleTime: 	15667851
		alarms: 	a Heap()
		lastAlarmTime: 	15667830
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	15667830
		lastStepMessage: 	nil
		lastCycleTime: 	15667851
		alarms: 	a Heap()
		lastAlarmTime: 	15667830
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:06:26.882248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(609514752))
		firstCell: 	a SnakeCell(609514752)
		newCell: 	nil
		lastCell: 	a SnakeCell(609514752)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(609514752))
		redCells: 	an OrderedCollection(a SnakeCell(732975360))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(609514752))
		redCells: 	an OrderedCollection(a SnakeCell(732975360))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(732975360)
		blueCell: 	a SnakeCell(374975744)
		winner: 	nil
		delay: 	a Delay(120 msecs)
	Receiver's instance variables: 
		container: 	a Morph(813401856)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(813401856)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(649@223) mouseDown red 18747420 nil]
		sourceMorph: 	a SimpleButtonMorph(58959104)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(649@223) mouseDown red 18747420 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(58959104)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	1
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(a MorphEventSubscription nil nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(649@223) mouseDown red 18747420 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(58959104)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(649@223) mouseDown red 18747420 nil]
		sourceMorph: 	a SimpleButtonMorph(58959104)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(58959104)
	Arguments and temporary variables: 
		evt: 	[(649@223) mouseDown red 18747420 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(938388224)
		submorphs: 	an Array(a StringMorph(397902592)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (287472896) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(397902592)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(58959104)
		clickState: 	#firstClickUp
		firstClickDown: 	[(649@223) mouseDown red 18747420 nil]
		firstClickUp: 	[(649@223) mouseUp 18747482 nil]
		firstClickTime: 	18747420
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15766605


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(649@223) mouseUp 18747482 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(649@223) mouseUp 18747482 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(58959104)
		clickState: 	#firstClickUp
		firstClickDown: 	[(649@223) mouseDown red 18747420 nil]
		firstClickUp: 	[(649@223) mouseUp 18747482 nil]
		firstClickTime: 	18747420
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	15766605


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(649@223) mouseUp 18747482 nil]
		evt: 	[(649@223) mouseUp 18747482 nil]
	Receiver's instance variables: 
		bounds: 	(649@223.0) corner: (665@239.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@223.0) corner: (665@239.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(58959104)
		keyboardFocus: 	a KeyListener(533273344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@223) mouseUp 18747482 nil]
		targetOffset: 	(35.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18747482 649 223 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(649@223) mouseUp 18747482 nil]
		evtBuf: 	#(1 18747482 649 223 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(649@223.0) corner: (665@239.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@223.0) corner: (665@239.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(58959104)
		keyboardFocus: 	a KeyListener(533273344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@223) mouseUp 18747482 nil]
		targetOffset: 	(35.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18747482 649 223 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(649@223.0) corner: (665@239.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(649@223.0) corner: (665@239.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(58959104)
		keyboardFocus: 	a KeyListener(533273344)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@223) mouseUp 18747482 nil]
		targetOffset: 	(35.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18747482 649 223 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15766668
		lastStepMessage: 	nil
		lastCycleTime: 	15766690
		alarms: 	a Heap()
		lastAlarmTime: 	15766668
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15766668
		lastStepMessage: 	nil
		lastCycleTime: 	15766690
		alarms: 	a Heap()
		lastAlarmTime: 	15766668
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15766668
		lastStepMessage: 	nil
		lastCycleTime: 	15766690
		alarms: 	a Heap()
		lastAlarmTime: 	15766668
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	15766668
		lastStepMessage: 	nil
		lastCycleTime: 	15766690
		alarms: 	a Heap()
		lastAlarmTime: 	15766668
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:12:27.249248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344))
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(404441344)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344))
		redCells: 	an OrderedCollection(a SnakeCell(435227904))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344))
		redCells: 	an OrderedCollection(a SnakeCell(435227904))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(674@226) mouseDown red 19105161 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(674@226) mouseDown red 19105161 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(674@226) mouseDown red 19105161 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(674@226) mouseDown red 19105161 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(674@226) mouseDown red 19105161 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(674@226) mouseDown red 19105161 nil]
		firstClickUp: 	[(674@226) mouseUp 19105255 nil]
		firstClickTime: 	19105161
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16124368


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(674@226) mouseUp 19105255 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(674@226) mouseUp 19105255 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(674@226) mouseDown red 19105161 nil]
		firstClickUp: 	[(674@226) mouseUp 19105255 nil]
		firstClickTime: 	19105161
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16124368


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(674@226) mouseUp 19105255 nil]
		evt: 	[(674@226) mouseUp 19105255 nil]
	Receiver's instance variables: 
		bounds: 	(674@226.0) corner: (690@242.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(674@226.0) corner: (690@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(674@226) mouseUp 19105255 nil]
		targetOffset: 	(60.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19105255 674 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(674@226) mouseUp 19105255 nil]
		evtBuf: 	#(1 19105255 674 226 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(674@226.0) corner: (690@242.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(674@226.0) corner: (690@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(674@226) mouseUp 19105255 nil]
		targetOffset: 	(60.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19105255 674 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(674@226.0) corner: (690@242.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(674@226.0) corner: (690@242.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(674@226) mouseUp 19105255 nil]
		targetOffset: 	(60.0@30.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19105255 674 226 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16124432
		lastStepMessage: 	nil
		lastCycleTime: 	16124452
		alarms: 	a Heap()
		lastAlarmTime: 	16124432
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16124432
		lastStepMessage: 	nil
		lastCycleTime: 	16124452
		alarms: 	a Heap()
		lastAlarmTime: 	16124432
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16124432
		lastStepMessage: 	nil
		lastCycleTime: 	16124452
		alarms: 	a Heap()
		lastAlarmTime: 	16124432
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16124432
		lastStepMessage: 	nil
		lastCycleTime: 	16124452
		alarms: 	a Heap()
		lastAlarmTime: 	16124432
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:12:34.552248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480))
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(606260480)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480))
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480))
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(618@203) mouseDown red 19112478 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(618@203) mouseDown red 19112478 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(618@203) mouseDown red 19112478 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(618@203) mouseDown red 19112478 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(618@203) mouseDown red 19112478 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(618@203) mouseDown red 19112478 nil]
		firstClickUp: 	[(618@203) mouseUp 19112571 nil]
		firstClickTime: 	19112478
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16131675


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(618@203) mouseUp 19112571 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(618@203) mouseUp 19112571 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(618@203) mouseDown red 19112478 nil]
		firstClickUp: 	[(618@203) mouseUp 19112571 nil]
		firstClickTime: 	19112478
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16131675


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(618@203) mouseUp 19112571 nil]
		evt: 	[(618@203) mouseUp 19112571 nil]
	Receiver's instance variables: 
		bounds: 	(618@203.0) corner: (634@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@203.0) corner: (634@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@203) mouseUp 19112571 nil]
		targetOffset: 	(4.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19112571 618 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(618@203) mouseUp 19112571 nil]
		evtBuf: 	#(1 19112571 618 203 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(618@203.0) corner: (634@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@203.0) corner: (634@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@203) mouseUp 19112571 nil]
		targetOffset: 	(4.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19112571 618 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(618@203.0) corner: (634@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(618@203.0) corner: (634@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@203) mouseUp 19112571 nil]
		targetOffset: 	(4.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19112571 618 203 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16131738
		lastStepMessage: 	nil
		lastCycleTime: 	16131759
		alarms: 	a Heap()
		lastAlarmTime: 	16131738
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16131738
		lastStepMessage: 	nil
		lastCycleTime: 	16131759
		alarms: 	a Heap()
		lastAlarmTime: 	16131738
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16131738
		lastStepMessage: 	nil
		lastCycleTime: 	16131759
		alarms: 	a Heap()
		lastAlarmTime: 	16131738
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16131738
		lastStepMessage: 	nil
		lastCycleTime: 	16131759
		alarms: 	a Heap()
		lastAlarmTime: 	16131738
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:12:39.751248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a S...etc...
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(490608384)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(762@207) mouseDown red 19113991 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(762@207) mouseDown red 19113991 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(762@207) mouseDown red 19113991 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(762@207) mouseDown red 19113991 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(762@207) mouseDown red 19113991 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(762@207) mouseDown red 19113991 nil]
		firstClickUp: 	nil
		firstClickTime: 	19113991
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16136914


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 
		evt: 	[(757@262) mouseUp 19114786 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(757@262) mouseUp 19114786 nil]
		timedOut: 	true
		isDrag: 	true
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(762@207) mouseDown red 19113991 nil]
		firstClickUp: 	nil
		firstClickTime: 	19113991
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16136914


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(757@262) mouseUp 19114786 nil]
		evt: 	[(757@262) mouseUp 19114786 nil]
	Receiver's instance variables: 
		bounds: 	(757@262.0) corner: (773@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(757@262.0) corner: (773@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(757@262) mouseUp 19114786 nil]
		targetOffset: 	(148.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19114786 757 262 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(757@262) mouseUp 19114786 nil]
		evtBuf: 	#(1 19114786 757 262 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(757@262.0) corner: (773@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(757@262.0) corner: (773@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(757@262) mouseUp 19114786 nil]
		targetOffset: 	(148.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19114786 757 262 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(757@262.0) corner: (773@278.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(757@262.0) corner: (773@278.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(757@262) mouseUp 19114786 nil]
		targetOffset: 	(148.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19114786 757 262 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16136935
		lastStepMessage: 	nil
		lastCycleTime: 	16136957
		alarms: 	a Heap()
		lastAlarmTime: 	16136935
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16136935
		lastStepMessage: 	nil
		lastCycleTime: 	16136957
		alarms: 	a Heap()
		lastAlarmTime: 	16136935
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16136935
		lastStepMessage: 	nil
		lastCycleTime: 	16136957
		alarms: 	a Heap()
		lastAlarmTime: 	16136935
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16136935
		lastStepMessage: 	nil
		lastCycleTime: 	16136957
		alarms: 	a Heap()
		lastAlarmTime: 	16136935
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:12:44.972248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a S...etc...
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(865927424)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(893@202) mouseDown red 19115286 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(893@202) mouseDown red 19115286 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(893@202) mouseDown red 19115286 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(893@202) mouseDown red 19115286 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(893@202) mouseDown red 19115286 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(893@202) mouseDown red 19115286 nil]
		firstClickUp: 	nil
		firstClickTime: 	19115286
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16142135


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 
		evt: 	[(854@348) mouseUp 19116253 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(854@348) mouseUp 19116253 nil]
		timedOut: 	true
		isDrag: 	true
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(893@202) mouseDown red 19115286 nil]
		firstClickUp: 	nil
		firstClickTime: 	19115286
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16142135


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(854@348) mouseUp 19116253 nil]
		evt: 	[(854@348) mouseUp 19116253 nil]
	Receiver's instance variables: 
		bounds: 	(854@348.0) corner: (870@364.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(854@348.0) corner: (870@364.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(854@348) mouseUp 19116253 nil]
		targetOffset: 	(279.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19116253 854 348 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(854@348) mouseUp 19116253 nil]
		evtBuf: 	#(1 19116253 854 348 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(854@348.0) corner: (870@364.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(854@348.0) corner: (870@364.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(854@348) mouseUp 19116253 nil]
		targetOffset: 	(279.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19116253 854 348 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(854@348.0) corner: (870@364.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(854@348.0) corner: (870@364.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(854@348) mouseUp 19116253 nil]
		targetOffset: 	(279.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19116253 854 348 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16142157
		lastStepMessage: 	nil
		lastCycleTime: 	16142178
		alarms: 	a Heap()
		lastAlarmTime: 	16142157
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16142157
		lastStepMessage: 	nil
		lastCycleTime: 	16142178
		alarms: 	a Heap()
		lastAlarmTime: 	16142157
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16142157
		lastStepMessage: 	nil
		lastCycleTime: 	16142178
		alarms: 	a Heap()
		lastAlarmTime: 	16142157
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16142157
		lastStepMessage: 	nil
		lastCycleTime: 	16142178
		alarms: 	a Heap()
		lastAlarmTime: 	16142157
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:12:50.187248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a S...etc...
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(988384000)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(980@202) mouseDown red 19116939 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(980@202) mouseDown red 19116939 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(980@202) mouseDown red 19116939 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(980@202) mouseDown red 19116939 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(980@202) mouseDown red 19116939 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(980@202) mouseDown red 19116939 nil]
		firstClickUp: 	nil
		firstClickTime: 	19116939
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16147353


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 
		evt: 	[(970@125) mouseUp 19117719 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(970@125) mouseUp 19117719 nil]
		timedOut: 	true
		isDrag: 	true
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(980@202) mouseDown red 19116939 nil]
		firstClickUp: 	nil
		firstClickTime: 	19116939
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16147353


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(970@125) mouseUp 19117719 nil]
		evt: 	[(970@125) mouseUp 19117719 nil]
	Receiver's instance variables: 
		bounds: 	(970@125.0) corner: (986@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(970@125.0) corner: (986@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(970@125) mouseUp 19117719 nil]
		targetOffset: 	(366.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19117719 970 125 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(970@125) mouseUp 19117719 nil]
		evtBuf: 	#(1 19117719 970 125 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(970@125.0) corner: (986@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(970@125.0) corner: (986@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(970@125) mouseUp 19117719 nil]
		targetOffset: 	(366.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19117719 970 125 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(970@125.0) corner: (986@141.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(970@125.0) corner: (986@141.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(970@125) mouseUp 19117719 nil]
		targetOffset: 	(366.0@6.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19117719 970 125 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16147374
		lastStepMessage: 	nil
		lastCycleTime: 	16147395
		alarms: 	a Heap()
		lastAlarmTime: 	16147374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16147374
		lastStepMessage: 	nil
		lastCycleTime: 	16147395
		alarms: 	a Heap()
		lastAlarmTime: 	16147374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16147374
		lastStepMessage: 	nil
		lastCycleTime: 	16147395
		alarms: 	a Heap()
		lastAlarmTime: 	16147374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16147374
		lastStepMessage: 	nil
		lastCycleTime: 	16147395
		alarms: 	a Heap()
		lastAlarmTime: 	16147374
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:12:55.401248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a S...etc...
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(544060672)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(870@220) mouseDown red 19118920 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(870@220) mouseDown red 19118920 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(870@220) mouseDown red 19118920 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(870@220) mouseDown red 19118920 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(870@220) mouseDown red 19118920 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(870@220) mouseDown red 19118920 nil]
		firstClickUp: 	nil
		firstClickTime: 	19118920
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16152565


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 
		evt: 	[(876@281) mouseUp 19119669 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(876@281) mouseUp 19119669 nil]
		timedOut: 	true
		isDrag: 	true
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(870@220) mouseDown red 19118920 nil]
		firstClickUp: 	nil
		firstClickTime: 	19118920
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16152565


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(876@281) mouseUp 19119669 nil]
		evt: 	[(876@281) mouseUp 19119669 nil]
	Receiver's instance variables: 
		bounds: 	(876@281.0) corner: (892@297.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(876@281.0) corner: (892@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(876@281) mouseUp 19119669 nil]
		targetOffset: 	(256.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19119669 876 281 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(876@281) mouseUp 19119669 nil]
		evtBuf: 	#(1 19119669 876 281 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(876@281.0) corner: (892@297.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(876@281.0) corner: (892@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(876@281) mouseUp 19119669 nil]
		targetOffset: 	(256.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19119669 876 281 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(876@281.0) corner: (892@297.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(876@281.0) corner: (892@297.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(876@281) mouseUp 19119669 nil]
		targetOffset: 	(256.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19119669 876 281 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16152586
		lastStepMessage: 	nil
		lastCycleTime: 	16152607
		alarms: 	a Heap()
		lastAlarmTime: 	16152586
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16152586
		lastStepMessage: 	nil
		lastCycleTime: 	16152607
		alarms: 	a Heap()
		lastAlarmTime: 	16152586
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16152586
		lastStepMessage: 	nil
		lastCycleTime: 	16152607
		alarms: 	a Heap()
		lastAlarmTime: 	16152586
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16152586
		lastStepMessage: 	nil
		lastCycleTime: 	16152607
		alarms: 	a Heap()
		lastAlarmTime: 	16152586
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:14:12.235248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a S...etc...
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(190831360)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(682@220) mouseDown red 19210150 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(682@220) mouseDown red 19210150 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(682@220) mouseDown red 19210150 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(682@220) mouseDown red 19210150 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(682@220) mouseDown red 19210150 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(682@220) mouseDown red 19210150 nil]
		firstClickUp: 	[(681@220) mouseUp 19210243 nil]
		firstClickTime: 	19210150
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16229336


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(681@220) mouseUp 19210243 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(681@220) mouseUp 19210243 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(682@220) mouseDown red 19210150 nil]
		firstClickUp: 	[(681@220) mouseUp 19210243 nil]
		firstClickTime: 	19210150
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16229336


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(681@220) mouseUp 19210243 nil]
		evt: 	[(681@220) mouseUp 19210243 nil]
	Receiver's instance variables: 
		bounds: 	(682@220.0) corner: (698@236.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@220.0) corner: (698@236.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(681@220) mouseUp 19210243 nil]
		targetOffset: 	(68.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19210243 681 220 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(681@220) mouseUp 19210243 nil]
		evtBuf: 	#(1 19210243 681 220 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(682@220.0) corner: (698@236.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@220.0) corner: (698@236.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(681@220) mouseUp 19210243 nil]
		targetOffset: 	(68.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19210243 681 220 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(682@220.0) corner: (698@236.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(682@220.0) corner: (698@236.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(681@220) mouseUp 19210243 nil]
		targetOffset: 	(68.0@24.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19210243 681 220 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16229422
		lastStepMessage: 	nil
		lastCycleTime: 	16229442
		alarms: 	a Heap()
		lastAlarmTime: 	16229422
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16229422
		lastStepMessage: 	nil
		lastCycleTime: 	16229442
		alarms: 	a Heap()
		lastAlarmTime: 	16229422
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16229422
		lastStepMessage: 	nil
		lastCycleTime: 	16229442
		alarms: 	a Heap()
		lastAlarmTime: 	16229422
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16229422
		lastStepMessage: 	nil
		lastCycleTime: 	16229442
		alarms: 	a Heap()
		lastAlarmTime: 	16229422
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:14:17.448248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a S...etc...
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(886300416)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(627@183) mouseDown red 19211507 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(627@183) mouseDown red 19211507 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(627@183) mouseDown red 19211507 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(627@183) mouseDown red 19211507 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(627@183) mouseDown red 19211507 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(627@183) mouseDown red 19211507 nil]
		firstClickUp: 	[(627@183) mouseUp 19211663 nil]
		firstClickTime: 	19211507
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16234634


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(627@183) mouseUp 19211663 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(627@183) mouseUp 19211663 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickUp
		firstClickDown: 	[(627@183) mouseDown red 19211507 nil]
		firstClickUp: 	[(627@183) mouseUp 19211663 nil]
		firstClickTime: 	19211507
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16234634


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(627@183) mouseUp 19211663 nil]
		evt: 	[(627@183) mouseUp 19211663 nil]
	Receiver's instance variables: 
		bounds: 	(627@183.0) corner: (643@199.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@183.0) corner: (643@199.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@183) mouseUp 19211663 nil]
		targetOffset: 	(13.0@ -13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19211663 627 183 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(627@183) mouseUp 19211663 nil]
		evtBuf: 	#(1 19211663 627 183 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(627@183.0) corner: (643@199.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@183.0) corner: (643@199.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@183) mouseUp 19211663 nil]
		targetOffset: 	(13.0@ -13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19211663 627 183 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(627@183.0) corner: (643@199.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(627@183.0) corner: (643@199.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(627@183) mouseUp 19211663 nil]
		targetOffset: 	(13.0@ -13.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19211663 627 183 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16234634
		lastStepMessage: 	nil
		lastCycleTime: 	16234656
		alarms: 	a Heap()
		lastAlarmTime: 	16234634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16234634
		lastStepMessage: 	nil
		lastCycleTime: 	16234656
		alarms: 	a Heap()
		lastAlarmTime: 	16234634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16234634
		lastStepMessage: 	nil
		lastCycleTime: 	16234656
		alarms: 	a Heap()
		lastAlarmTime: 	16234634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16234634
		lastStepMessage: 	nil
		lastCycleTime: 	16234656
		alarms: 	a Heap()
		lastAlarmTime: 	16234634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:14:22.667248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a S...etc...
		firstCell: 	a SnakeCell(404441344)
		newCell: 	nil
		lastCell: 	a SnakeCell(385279232)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(404441344) a SnakeCell(606260480) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(435227904) a SnakeCell(435227904) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(435227904)
		blueCell: 	a SnakeCell(480512768)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(655582976)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(913@188) mouseDown red 19213098 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(913@188) mouseDown red 19213098 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(913@188) mouseDown red 19213098 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(913@188) mouseDown red 19213098 nil]
		sourceMorph: 	a SimpleButtonMorph(981244160)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(981244160)
	Arguments and temporary variables: 
		evt: 	[(913@188) mouseDown red 19213098 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(171535616)
		submorphs: 	an Array(a StringMorph(367446784)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (591557888) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(367446784)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(913@188) mouseDown red 19213098 nil]
		firstClickUp: 	nil
		firstClickTime: 	19213098
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16239829


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickTimedOut]
	Arguments and temporary variables: 
		evt: 	[(1009@95) mouseUp 19213847 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(1009@95) mouseUp 19213847 nil]
		timedOut: 	true
		isDrag: 	true
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(981244160)
		clickState: 	#firstClickTimedOut
		firstClickDown: 	[(913@188) mouseDown red 19213098 nil]
		firstClickUp: 	nil
		firstClickTime: 	19213098
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16239829


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(1009@95) mouseUp 19213847 nil]
		evt: 	[(1009@95) mouseUp 19213847 nil]
	Receiver's instance variables: 
		bounds: 	(1009@95.0) corner: (1025@111.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1009@95.0) corner: (1025@111.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1009@95) mouseUp 19213847 nil]
		targetOffset: 	(299.0@ -8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19213847 1009 95 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(1009@95) mouseUp 19213847 nil]
		evtBuf: 	#(1 19213847 1009 95 0 0 0 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(1009@95.0) corner: (1025@111.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1009@95.0) corner: (1025@111.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1009@95) mouseUp 19213847 nil]
		targetOffset: 	(299.0@ -8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19213847 1009 95 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1009@95.0) corner: (1025@111.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(1009@95.0) corner: (1025@111.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(981244160)
		keyboardFocus: 	a KeyListener(608875264)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1009@95) mouseUp 19213847 nil]
		targetOffset: 	(299.0@ -8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19213847 1009 95 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16239850
		lastStepMessage: 	nil
		lastCycleTime: 	16239871
		alarms: 	a Heap()
		lastAlarmTime: 	16239850
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16239850
		lastStepMessage: 	nil
		lastCycleTime: 	16239871
		alarms: 	a Heap()
		lastAlarmTime: 	16239850
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16239850
		lastStepMessage: 	nil
		lastCycleTime: 	16239871
		alarms: 	a Heap()
		lastAlarmTime: 	16239850
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16239850
		lastStepMessage: 	nil
		lastCycleTime: 	16239871
		alarms: 	a Heap()
		lastAlarmTime: 	16239850
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:14:36.109248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(12358912))
		firstCell: 	a SnakeCell(12358912)
		newCell: 	nil
		lastCell: 	a SnakeCell(12358912)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(12358912))
		redCells: 	an OrderedCollection(a SnakeCell(981402880))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(12358912))
		redCells: 	an OrderedCollection(a SnakeCell(981402880))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(981402880)
		blueCell: 	a SnakeCell(692734720)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(567440128)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(567440128)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(694@217) mouseDown red 19234018 nil]
		sourceMorph: 	a SimpleButtonMorph(801954048)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(694@217) mouseDown red 19234018 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(801954048)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(694@217) mouseDown red 19234018 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(801954048)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(694@217) mouseDown red 19234018 nil]
		sourceMorph: 	a SimpleButtonMorph(801954048)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(801954048)
	Arguments and temporary variables: 
		evt: 	[(694@217) mouseDown red 19234018 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(836998912)
		submorphs: 	an Array(a StringMorph(211454720)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (910472448) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(211454720)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(801954048)
		clickState: 	#firstClickUp
		firstClickDown: 	[(694@217) mouseDown red 19234018 nil]
		firstClickUp: 	[(694@217) mouseUp 19234112 nil]
		firstClickTime: 	19234018
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16253223


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(694@217) mouseUp 19234112 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(694@217) mouseUp 19234112 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(801954048)
		clickState: 	#firstClickUp
		firstClickDown: 	[(694@217) mouseDown red 19234018 nil]
		firstClickUp: 	[(694@217) mouseUp 19234112 nil]
		firstClickTime: 	19234018
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16253223


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(694@217) mouseUp 19234112 nil]
		evt: 	[(694@217) mouseUp 19234112 nil]
	Receiver's instance variables: 
		bounds: 	(694@217.0) corner: (710@233.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@217.0) corner: (710@233.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(801954048)
		keyboardFocus: 	a KeyListener(727138048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@217) mouseUp 19234112 nil]
		targetOffset: 	(80.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19234112 694 217 0 0 1 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(694@217) mouseUp 19234112 nil]
		evtBuf: 	#(1 19234112 694 217 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(694@217.0) corner: (710@233.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@217.0) corner: (710@233.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(801954048)
		keyboardFocus: 	a KeyListener(727138048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@217) mouseUp 19234112 nil]
		targetOffset: 	(80.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19234112 694 217 0 0 1 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(694@217.0) corner: (710@233.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(694@217.0) corner: (710@233.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(801954048)
		keyboardFocus: 	a KeyListener(727138048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(694@217) mouseUp 19234112 nil]
		targetOffset: 	(80.0@21.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19234112 694 217 0 0 1 1)
		lastKeyScanCode: 	115
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16253287
		lastStepMessage: 	nil
		lastCycleTime: 	16253308
		alarms: 	a Heap()
		lastAlarmTime: 	16253287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16253287
		lastStepMessage: 	nil
		lastCycleTime: 	16253308
		alarms: 	a Heap()
		lastAlarmTime: 	16253287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16253287
		lastStepMessage: 	nil
		lastCycleTime: 	16253308
		alarms: 	a Heap()
		lastAlarmTime: 	16253287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16253287
		lastStepMessage: 	nil
		lastCycleTime: 	16253308
		alarms: 	a Heap()
		lastAlarmTime: 	16253287
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:16:38.815248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920))
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(463089920)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920))
		redCells: 	an OrderedCollection(a SnakeCell(704050432))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920))
		redCells: 	an OrderedCollection(a SnakeCell(704050432))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(704@223) mouseDown red 19356728 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(704@223) mouseDown red 19356728 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(704@223) mouseDown red 19356728 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(704@223) mouseDown red 19356728 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(704@223) mouseDown red 19356728 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(704@223) mouseDown red 19356728 nil]
		firstClickUp: 	[(704@223) mouseUp 19356806 nil]
		firstClickTime: 	19356728
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16375928


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(704@223) mouseUp 19356806 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(704@223) mouseUp 19356806 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(704@223) mouseDown red 19356728 nil]
		firstClickUp: 	[(704@223) mouseUp 19356806 nil]
		firstClickTime: 	19356728
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16375928


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(704@223) mouseUp 19356806 nil]
		evt: 	[(704@223) mouseUp 19356806 nil]
	Receiver's instance variables: 
		bounds: 	(704@223.0) corner: (720@239.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@223.0) corner: (720@239.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@223) mouseUp 19356806 nil]
		targetOffset: 	(90.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19356806 704 223 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(704@223) mouseUp 19356806 nil]
		evtBuf: 	#(1 19356806 704 223 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(704@223.0) corner: (720@239.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@223.0) corner: (720@239.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@223) mouseUp 19356806 nil]
		targetOffset: 	(90.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19356806 704 223 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(704@223.0) corner: (720@239.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(704@223.0) corner: (720@239.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(704@223) mouseUp 19356806 nil]
		targetOffset: 	(90.0@27.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19356806 704 223 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16375991
		lastStepMessage: 	nil
		lastCycleTime: 	16376012
		alarms: 	a Heap()
		lastAlarmTime: 	16375991
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16375991
		lastStepMessage: 	nil
		lastCycleTime: 	16376012
		alarms: 	a Heap()
		lastAlarmTime: 	16375991
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16375991
		lastStepMessage: 	nil
		lastCycleTime: 	16376012
		alarms: 	a Heap()
		lastAlarmTime: 	16375991
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16375991
		lastStepMessage: 	nil
		lastCycleTime: 	16376012
		alarms: 	a Heap()
		lastAlarmTime: 	16375991
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:16:47.360248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336))
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(81262336)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336))
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432))
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336))
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432))
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(449@139) mouseDown red 19365199 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(449@139) mouseDown red 19365199 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(449@139) mouseDown red 19365199 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(449@139) mouseDown red 19365199 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(449@139) mouseDown red 19365199 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(449@139) mouseDown red 19365199 nil]
		firstClickUp: 	[(449@139) mouseUp 19365355 nil]
		firstClickTime: 	19365199
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16384394


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(449@139) mouseUp 19365355 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(449@139) mouseUp 19365355 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(449@139) mouseDown red 19365199 nil]
		firstClickUp: 	[(449@139) mouseUp 19365355 nil]
		firstClickTime: 	19365199
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16384394


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(449@139) mouseUp 19365355 nil]
		evt: 	[(449@139) mouseUp 19365355 nil]
	Receiver's instance variables: 
		bounds: 	(449@139.0) corner: (465@155.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(449@139.0) corner: (465@155.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@139) mouseUp 19365355 nil]
		targetOffset: 	(-165.0@ -57.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19365355 449 139 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(449@139) mouseUp 19365355 nil]
		evtBuf: 	#(1 19365355 449 139 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(449@139.0) corner: (465@155.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(449@139.0) corner: (465@155.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@139) mouseUp 19365355 nil]
		targetOffset: 	(-165.0@ -57.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19365355 449 139 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(449@139.0) corner: (465@155.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(449@139.0) corner: (465@155.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@139) mouseUp 19365355 nil]
		targetOffset: 	(-165.0@ -57.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19365355 449 139 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16384541
		lastStepMessage: 	nil
		lastCycleTime: 	16384562
		alarms: 	a Heap()
		lastAlarmTime: 	16384541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16384541
		lastStepMessage: 	nil
		lastCycleTime: 	16384562
		alarms: 	a Heap()
		lastAlarmTime: 	16384541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16384541
		lastStepMessage: 	nil
		lastCycleTime: 	16384562
		alarms: 	a Heap()
		lastAlarmTime: 	16384541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16384541
		lastStepMessage: 	nil
		lastCycleTime: 	16384562
		alarms: 	a Heap()
		lastAlarmTime: 	16384541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a GLMSyste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:16:58.235248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(571544320)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(469@158) mouseDown red 19376119 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(469@158) mouseDown red 19376119 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(469@158) mouseDown red 19376119 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(469@158) mouseDown red 19376119 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(469@158) mouseDown red 19376119 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(469@158) mouseDown red 19376119 nil]
		firstClickUp: 	[(469@158) mouseUp 19376228 nil]
		firstClickTime: 	19376119
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16395334


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(469@158) mouseUp 19376228 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(469@158) mouseUp 19376228 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(469@158) mouseDown red 19376119 nil]
		firstClickUp: 	[(469@158) mouseUp 19376228 nil]
		firstClickTime: 	19376119
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16395334


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(469@158) mouseUp 19376228 nil]
		evt: 	[(469@158) mouseUp 19376228 nil]
	Receiver's instance variables: 
		bounds: 	(469@158.0) corner: (485@174.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(469@158.0) corner: (485@174.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(469@158) mouseUp 19376228 nil]
		targetOffset: 	(-145.0@ -38.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19376228 469 158 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(469@158) mouseUp 19376228 nil]
		evtBuf: 	#(1 19376228 469 158 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(469@158.0) corner: (485@174.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(469@158.0) corner: (485@174.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(469@158) mouseUp 19376228 nil]
		targetOffset: 	(-145.0@ -38.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19376228 469 158 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(469@158.0) corner: (485@174.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(469@158.0) corner: (485@174.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(469@158) mouseUp 19376228 nil]
		targetOffset: 	(-145.0@ -38.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19376228 469 158 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16395418
		lastStepMessage: 	nil
		lastCycleTime: 	16395439
		alarms: 	a Heap()
		lastAlarmTime: 	16395418
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16395418
		lastStepMessage: 	nil
		lastCycleTime: 	16395439
		alarms: 	a Heap()
		lastAlarmTime: 	16395418
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16395418
		lastStepMessage: 	nil
		lastCycleTime: 	16395439
		alarms: 	a Heap()
		lastAlarmTime: 	16395418
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16395418
		lastStepMessage: 	nil
		lastCycleTime: 	16395439
		alarms: 	a Heap()
		lastAlarmTime: 	16395418
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:03.451248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(98155776)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(449@137) mouseDown red 19376962 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(449@137) mouseDown red 19376962 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(449@137) mouseDown red 19376962 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(449@137) mouseDown red 19376962 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(449@137) mouseDown red 19376962 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(449@137) mouseDown red 19376962 nil]
		firstClickUp: 	[(449@137) mouseUp 19377118 nil]
		firstClickTime: 	19376962
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16400633


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(449@137) mouseUp 19377118 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(449@137) mouseUp 19377118 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(449@137) mouseDown red 19376962 nil]
		firstClickUp: 	[(449@137) mouseUp 19377118 nil]
		firstClickTime: 	19376962
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16400633


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(449@137) mouseUp 19377118 nil]
		evt: 	[(449@137) mouseUp 19377118 nil]
	Receiver's instance variables: 
		bounds: 	(449@137.0) corner: (465@153.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(449@137.0) corner: (465@153.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@137) mouseUp 19377118 nil]
		targetOffset: 	(-165.0@ -59.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19377118 449 137 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(449@137) mouseUp 19377118 nil]
		evtBuf: 	#(1 19377118 449 137 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(449@137.0) corner: (465@153.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(449@137.0) corner: (465@153.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@137) mouseUp 19377118 nil]
		targetOffset: 	(-165.0@ -59.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19377118 449 137 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(449@137.0) corner: (465@153.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(449@137.0) corner: (465@153.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(449@137) mouseUp 19377118 nil]
		targetOffset: 	(-165.0@ -59.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19377118 449 137 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16400633
		lastStepMessage: 	nil
		lastCycleTime: 	16400653
		alarms: 	a Heap()
		lastAlarmTime: 	16400633
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16400633
		lastStepMessage: 	nil
		lastCycleTime: 	16400653
		alarms: 	a Heap()
		lastAlarmTime: 	16400633
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16400633
		lastStepMessage: 	nil
		lastCycleTime: 	16400653
		alarms: 	a Heap()
		lastAlarmTime: 	16400633
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16400633
		lastStepMessage: 	nil
		lastCycleTime: 	16400653
		alarms: 	a Heap()
		lastAlarmTime: 	16400633
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:08.658248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(734791424)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(452@137) mouseDown red 19379785 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(452@137) mouseDown red 19379785 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(452@137) mouseDown red 19379785 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(452@137) mouseDown red 19379785 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(452@137) mouseDown red 19379785 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(452@137) mouseDown red 19379785 nil]
		firstClickUp: 	[(452@137) mouseUp 19379988 nil]
		firstClickTime: 	19379785
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16405847


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(452@137) mouseUp 19379988 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(452@137) mouseUp 19379988 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(452@137) mouseDown red 19379785 nil]
		firstClickUp: 	[(452@137) mouseUp 19379988 nil]
		firstClickTime: 	19379785
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16405847


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(452@137) mouseUp 19379988 nil]
		evt: 	[(452@137) mouseUp 19379988 nil]
	Receiver's instance variables: 
		bounds: 	(452@137.0) corner: (468@153.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(452@137.0) corner: (468@153.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@137) mouseUp 19379988 nil]
		targetOffset: 	(-162.0@ -59.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19379988 452 137 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(452@137) mouseUp 19379988 nil]
		evtBuf: 	#(1 19379988 452 137 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(452@137.0) corner: (468@153.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(452@137.0) corner: (468@153.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@137) mouseUp 19379988 nil]
		targetOffset: 	(-162.0@ -59.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19379988 452 137 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(452@137.0) corner: (468@153.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(452@137.0) corner: (468@153.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(452@137) mouseUp 19379988 nil]
		targetOffset: 	(-162.0@ -59.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19379988 452 137 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16405847
		lastStepMessage: 	nil
		lastCycleTime: 	16405868
		alarms: 	a Heap()
		lastAlarmTime: 	16405847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16405847
		lastStepMessage: 	nil
		lastCycleTime: 	16405868
		alarms: 	a Heap()
		lastAlarmTime: 	16405847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16405847
		lastStepMessage: 	nil
		lastCycleTime: 	16405868
		alarms: 	a Heap()
		lastAlarmTime: 	16405847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16405847
		lastStepMessage: 	nil
		lastCycleTime: 	16405868
		alarms: 	a Heap()
		lastAlarmTime: 	16405847
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:13.886248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(787607808)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(470@159) mouseDown red 19382110 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(470@159) mouseDown red 19382110 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(470@159) mouseDown red 19382110 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(470@159) mouseDown red 19382110 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(470@159) mouseDown red 19382110 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(470@159) mouseDown red 19382110 nil]
		firstClickUp: 	[(470@159) mouseUp 19382250 nil]
		firstClickTime: 	19382110
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16411076


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(470@159) mouseUp 19382250 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(470@159) mouseUp 19382250 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(470@159) mouseDown red 19382110 nil]
		firstClickUp: 	[(470@159) mouseUp 19382250 nil]
		firstClickTime: 	19382110
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16411076


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(470@159) mouseUp 19382250 nil]
		evt: 	[(470@159) mouseUp 19382250 nil]
	Receiver's instance variables: 
		bounds: 	(470@159.0) corner: (486@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(470@159.0) corner: (486@175.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(470@159) mouseUp 19382250 nil]
		targetOffset: 	(-144.0@ -37.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19382250 470 159 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(470@159) mouseUp 19382250 nil]
		evtBuf: 	#(1 19382250 470 159 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(470@159.0) corner: (486@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(470@159.0) corner: (486@175.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(470@159) mouseUp 19382250 nil]
		targetOffset: 	(-144.0@ -37.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19382250 470 159 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(470@159.0) corner: (486@175.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(470@159.0) corner: (486@175.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(470@159) mouseUp 19382250 nil]
		targetOffset: 	(-144.0@ -37.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19382250 470 159 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16411076
		lastStepMessage: 	nil
		lastCycleTime: 	16411097
		alarms: 	a Heap()
		lastAlarmTime: 	16411076
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16411076
		lastStepMessage: 	nil
		lastCycleTime: 	16411097
		alarms: 	a Heap()
		lastAlarmTime: 	16411076
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16411076
		lastStepMessage: 	nil
		lastCycleTime: 	16411097
		alarms: 	a Heap()
		lastAlarmTime: 	16411076
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16411076
		lastStepMessage: 	nil
		lastCycleTime: 	16411097
		alarms: 	a Heap()
		lastAlarmTime: 	16411076
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:19.127248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(167082752)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(490@176) mouseDown red 19382718 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(490@176) mouseDown red 19382718 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(490@176) mouseDown red 19382718 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(490@176) mouseDown red 19382718 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(490@176) mouseDown red 19382718 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(490@176) mouseDown red 19382718 nil]
		firstClickUp: 	[(490@176) mouseUp 19382812 nil]
		firstClickTime: 	19382718
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16416304


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(490@176) mouseUp 19382812 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(490@176) mouseUp 19382812 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(490@176) mouseDown red 19382718 nil]
		firstClickUp: 	[(490@176) mouseUp 19382812 nil]
		firstClickTime: 	19382718
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16416304


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(490@176) mouseUp 19382812 nil]
		evt: 	[(490@176) mouseUp 19382812 nil]
	Receiver's instance variables: 
		bounds: 	(490@176.0) corner: (506@192.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(490@176.0) corner: (506@192.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(490@176) mouseUp 19382812 nil]
		targetOffset: 	(-124.0@ -20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19382812 490 176 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(490@176) mouseUp 19382812 nil]
		evtBuf: 	#(1 19382812 490 176 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(490@176.0) corner: (506@192.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(490@176.0) corner: (506@192.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(490@176) mouseUp 19382812 nil]
		targetOffset: 	(-124.0@ -20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19382812 490 176 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(490@176.0) corner: (506@192.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(490@176.0) corner: (506@192.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(490@176) mouseUp 19382812 nil]
		targetOffset: 	(-124.0@ -20.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19382812 490 176 0 0 1 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16416304
		lastStepMessage: 	nil
		lastCycleTime: 	16416325
		alarms: 	a Heap()
		lastAlarmTime: 	16416304
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16416304
		lastStepMessage: 	nil
		lastCycleTime: 	16416325
		alarms: 	a Heap()
		lastAlarmTime: 	16416304
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16416304
		lastStepMessage: 	nil
		lastCycleTime: 	16416325
		alarms: 	a Heap()
		lastAlarmTime: 	16416304
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16416304
		lastStepMessage: 	nil
		lastCycleTime: 	16416325
		alarms: 	a Heap()
		lastAlarmTime: 	16416304
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:24.438248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(18916608)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(692@198) mouseDown red 19383342 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(692@198) mouseDown red 19383342 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(692@198) mouseDown red 19383342 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(692@198) mouseDown red 19383342 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(692@198) mouseDown red 19383342 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@198) mouseDown red 19383342 nil]
		firstClickUp: 	[(692@198) mouseUp 19383451 nil]
		firstClickTime: 	19383342
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16421620


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(692@198) mouseUp 19383451 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(692@198) mouseUp 19383451 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@198) mouseDown red 19383342 nil]
		firstClickUp: 	[(692@198) mouseUp 19383451 nil]
		firstClickTime: 	19383342
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16421620


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(692@198) mouseUp 19383451 nil]
		evt: 	[(692@198) mouseUp 19383451 nil]
	Receiver's instance variables: 
		bounds: 	(692@198.0) corner: (708@214.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@198.0) corner: (708@214.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@198) mouseUp 19383451 nil]
		targetOffset: 	(78.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19383451 692 198 0 0 2 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(692@198) mouseUp 19383451 nil]
		evtBuf: 	#(1 19383451 692 198 0 0 2 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(692@198.0) corner: (708@214.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@198.0) corner: (708@214.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@198) mouseUp 19383451 nil]
		targetOffset: 	(78.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19383451 692 198 0 0 2 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(692@198.0) corner: (708@214.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@198.0) corner: (708@214.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@198) mouseUp 19383451 nil]
		targetOffset: 	(78.0@2.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19383451 692 198 0 0 2 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16421620
		lastStepMessage: 	nil
		lastCycleTime: 	16421641
		alarms: 	a Heap()
		lastAlarmTime: 	16421620
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16421620
		lastStepMessage: 	nil
		lastCycleTime: 	16421641
		alarms: 	a Heap()
		lastAlarmTime: 	16421620
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16421620
		lastStepMessage: 	nil
		lastCycleTime: 	16421641
		alarms: 	a Heap()
		lastAlarmTime: 	16421620
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16421620
		lastStepMessage: 	nil
		lastCycleTime: 	16421641
		alarms: 	a Heap()
		lastAlarmTime: 	16421620
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:29.748248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(744320768)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(692@204) mouseDown red 19383701 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(692@204) mouseDown red 19383701 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(692@204) mouseDown red 19383701 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(692@204) mouseDown red 19383701 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(692@204) mouseDown red 19383701 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@204) mouseDown red 19383701 nil]
		firstClickUp: 	[(692@204) mouseUp 19383779 nil]
		firstClickTime: 	19383701
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16426933


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(692@204) mouseUp 19383779 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(692@204) mouseUp 19383779 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@204) mouseDown red 19383701 nil]
		firstClickUp: 	[(692@204) mouseUp 19383779 nil]
		firstClickTime: 	19383701
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16426933


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(692@204) mouseUp 19383779 nil]
		evt: 	[(692@204) mouseUp 19383779 nil]
	Receiver's instance variables: 
		bounds: 	(692@204.0) corner: (708@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@204.0) corner: (708@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@204) mouseUp 19383779 nil]
		targetOffset: 	(78.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19383779 692 204 0 0 4 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(692@204) mouseUp 19383779 nil]
		evtBuf: 	#(1 19383779 692 204 0 0 4 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(692@204.0) corner: (708@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@204.0) corner: (708@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@204) mouseUp 19383779 nil]
		targetOffset: 	(78.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19383779 692 204 0 0 4 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(692@204.0) corner: (708@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@204.0) corner: (708@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@204) mouseUp 19383779 nil]
		targetOffset: 	(78.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19383779 692 204 0 0 4 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16426933
		lastStepMessage: 	nil
		lastCycleTime: 	16426954
		alarms: 	a Heap()
		lastAlarmTime: 	16426933
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16426933
		lastStepMessage: 	nil
		lastCycleTime: 	16426954
		alarms: 	a Heap()
		lastAlarmTime: 	16426933
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16426933
		lastStepMessage: 	nil
		lastCycleTime: 	16426954
		alarms: 	a Heap()
		lastAlarmTime: 	16426933
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16426933
		lastStepMessage: 	nil
		lastCycleTime: 	16426954
		alarms: 	a Heap()
		lastAlarmTime: 	16426933
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:35.016248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(557177088)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(692@204) mouseDown red 19384029 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(692@204) mouseDown red 19384029 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(692@204) mouseDown red 19384029 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(692@204) mouseDown red 19384029 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(692@204) mouseDown red 19384029 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.9380000000000001 g: 0.9380000000000001 b: 0.9380000000000001...etc...
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.876 g: 0.876 b: 0.876 alpha: 1.0)
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@204) mouseDown red 19384029 nil]
		firstClickUp: 	[(692@204) mouseUp 19384107 nil]
		firstClickTime: 	19384029
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16432201


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(692@204) mouseUp 19384107 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(692@204) mouseUp 19384107 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@204) mouseDown red 19384029 nil]
		firstClickUp: 	[(692@204) mouseUp 19384107 nil]
		firstClickTime: 	19384029
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16432201


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(692@204) mouseUp 19384107 nil]
		evt: 	[(692@204) mouseUp 19384107 nil]
	Receiver's instance variables: 
		bounds: 	(692@204.0) corner: (708@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@204.0) corner: (708@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@204) mouseUp 19384107 nil]
		targetOffset: 	(78.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19384107 692 204 0 0 6 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(692@204) mouseUp 19384107 nil]
		evtBuf: 	#(1 19384107 692 204 0 0 6 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(692@204.0) corner: (708@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@204.0) corner: (708@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@204) mouseUp 19384107 nil]
		targetOffset: 	(78.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19384107 692 204 0 0 6 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(692@204.0) corner: (708@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@204.0) corner: (708@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@204) mouseUp 19384107 nil]
		targetOffset: 	(78.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19384107 692 204 0 0 6 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16432201
		lastStepMessage: 	nil
		lastCycleTime: 	16432222
		alarms: 	a Heap()
		lastAlarmTime: 	16432201
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16432201
		lastStepMessage: 	nil
		lastCycleTime: 	16432222
		alarms: 	a Heap()
		lastAlarmTime: 	16432201
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16432201
		lastStepMessage: 	nil
		lastCycleTime: 	16432222
		alarms: 	a Heap()
		lastAlarmTime: 	16432201
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16432201
		lastStepMessage: 	nil
		lastCycleTime: 	16432222
		alarms: 	a Heap()
		lastAlarmTime: 	16432201
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:40.329248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(990190848)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(698@203) mouseDown red 19384372 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(698@203) mouseDown red 19384372 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(698@203) mouseDown red 19384372 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(698@203) mouseDown red 19384372 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(698@203) mouseDown red 19384372 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.97 g: 0.97 b: 0.97 alpha: 1.0)
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.9380000000000001 g: 0.9380000000000001 b: 0.9380000000000...etc...
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(698@203) mouseDown red 19384372 nil]
		firstClickUp: 	[(698@203) mouseUp 19384450 nil]
		firstClickTime: 	19384372
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16437515


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(698@203) mouseUp 19384450 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(698@203) mouseUp 19384450 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(698@203) mouseDown red 19384372 nil]
		firstClickUp: 	[(698@203) mouseUp 19384450 nil]
		firstClickTime: 	19384372
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16437515


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(698@203) mouseUp 19384450 nil]
		evt: 	[(698@203) mouseUp 19384450 nil]
	Receiver's instance variables: 
		bounds: 	(698@203.0) corner: (714@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(698@203.0) corner: (714@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(698@203) mouseUp 19384450 nil]
		targetOffset: 	(84.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19384450 698 203 0 0 2 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(698@203) mouseUp 19384450 nil]
		evtBuf: 	#(1 19384450 698 203 0 0 2 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(698@203.0) corner: (714@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(698@203.0) corner: (714@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(698@203) mouseUp 19384450 nil]
		targetOffset: 	(84.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19384450 698 203 0 0 2 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(698@203.0) corner: (714@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(698@203.0) corner: (714@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(698@203) mouseUp 19384450 nil]
		targetOffset: 	(84.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19384450 698 203 0 0 2 1)
		lastKeyScanCode: 	30
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16437515
		lastStepMessage: 	nil
		lastCycleTime: 	16437536
		alarms: 	a Heap()
		lastAlarmTime: 	16437515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16437515
		lastStepMessage: 	nil
		lastCycleTime: 	16437536
		alarms: 	a Heap()
		lastAlarmTime: 	16437515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16437515
		lastStepMessage: 	nil
		lastCycleTime: 	16437536
		alarms: 	a Heap()
		lastAlarmTime: 	16437515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	16437515
		lastStepMessage: 	nil
		lastCycleTime: 	16437536
		alarms: 	a Heap()
		lastAlarmTime: 	16437515
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:17:45.628248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a Sn...etc...
		firstCell: 	a SnakeCell(463089920)
		newCell: 	nil
		lastCell: 	a SnakeCell(1047522560)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(463089920) a SnakeCell(81262336) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(704050432) a SnakeCell(704050432) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north


SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	a SnakeCell(704050432)
		blueCell: 	a SnakeCell(314438400)
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(630116096)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(692@203) mouseDown red 19386150 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(692@203) mouseDown red 19386150 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(692@203) mouseDown red 19386150 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(692@203) mouseDown red 19386150 nil]
		sourceMorph: 	a SimpleButtonMorph(822575360)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(822575360)
	Arguments and temporary variables: 
		evt: 	[(692@203) mouseDown red 19386150 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(599704832)
		submorphs: 	an Array(a StringMorph(342323456)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.985 g: 0.985 b: 0.985 alpha: 1.0)
		extension: 	a MorphExtension (324321024) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.97 g: 0.97 b: 0.97 alpha: 1.0)
		label: 	a StringMorph(342323456)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@203) mouseDown red 19386150 nil]
		firstClickUp: 	[(692@203) mouseUp 19386213 nil]
		firstClickTime: 	19386150
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16442814


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(692@203) mouseUp 19386213 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(692@203) mouseUp 19386213 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(822575360)
		clickState: 	#firstClickUp
		firstClickDown: 	[(692@203) mouseDown red 19386150 nil]
		firstClickUp: 	[(692@203) mouseUp 19386213 nil]
		firstClickTime: 	19386150
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	16442814


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(692@203) mouseUp 19386213 nil]
		evt: 	[(692@203) mouseUp 19386213 nil]
	Receiver's instance variables: 
		bounds: 	(692@203.0) corner: (708@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@203.0) corner: (708@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@203) mouseUp 19386213 nil]
		targetOffset: 	(78.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19386213 692 203 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(692@203) mouseUp 19386213 nil]
		evtBuf: 	#(1 19386213 692 203 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(692@203.0) corner: (708@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@203.0) corner: (708@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@203) mouseUp 19386213 nil]
		targetOffset: 	(78.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19386213 692 203 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(692@203.0) corner: (708@219.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(692@203.0) corner: (708@219.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(822575360)
		keyboardFocus: 	a KeyListener(786111232)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(692@203) mouseUp 19386213 nil]
		targetOffset: 	(78.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19386213 692 203 0 0 1 1)
		lastKeyScanCode: 	13
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16442814
		lastStepMessage: 	nil
		lastCycleTime: 	16442828
		alarms: 	a Heap()
		lastAlarmTime: 	16442814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16442814
		lastStepMessage: 	nil
		lastCycleTime: 	16442828
		alarms: 	a Heap()
		lastAlarmTime: 	16442814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16442814
		lastStepMessage: 	nil
		lastCycleTime: 	16442828
		alarms: 	a Heap()
		lastAlarmTime: 	16442814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	16442814
		lastStepMessage: 	nil
		lastCycleTime: 	16442828
		alarms: 	a Heap()
		lastAlarmTime: 	16442814
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:19:21.390248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(381176576))
		firstCell: 	a SnakeCell(381176576)
		newCell: 	nil
		lastCell: 	a SnakeCell(381176576)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(381176576))
		redCells: 	an OrderedCollection(a SnakeCell(492604160))
		blueDirection: 	#east
		redDirection: 	#east


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(381176576))
		redCells: 	an OrderedCollection(a SnakeCell(492604160))
		blueDirection: 	#east
		redDirection: 	#east


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 250.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(910878976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 250.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 250.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#color: was sent to nil
22 June 2017 6:19:40.884248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #color:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	color: Color blue
		exception: 	MessageNotUnderstood: receiver of "color:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(425419008))
		firstCell: 	a SnakeCell(425419008)
		newCell: 	nil
		lastCell: 	a SnakeCell(425419008)
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(425419008))
		redCells: 	an OrderedCollection(a SnakeCell(1045816576))
		blueDirection: 	#east
		redDirection: 	#north


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(425419008))
		redCells: 	an OrderedCollection(a SnakeCell(1045816576))
		blueDirection: 	#east
		redDirection: 	#north


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 250.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(250 msecs)
	Receiver's instance variables: 
		container: 	a Morph(78827776)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 250.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #color:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 250.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 June 2017 6:23:31.362248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(a SnakeCell(117758720) a SnakeCell(266238720) a SnakeCell(394675456) a SnakeCell(...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(117758720) a SnakeCell(266238720) a SnakeCell(394675456) a SnakeCell(...etc...

Array(Object)>>at:
	Receiver: an Array(a SnakeCell(117758720) a SnakeCell(266238720) a SnakeCell(394675456) a SnakeCell(...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(117758720) a SnakeCell(266238720) a SnakeCell(394675456) a SnakeCell(...etc...

SnakeGame>>rows:at:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aRow: 	21
		aColumn: 	0
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(117758720))
		firstCell: 	a SnakeCell(117758720)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(117758720))
		redCells: 	an OrderedCollection(a SnakeCell(615254272))
		blueDirection: 	#east
		redDirection: 	#east


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(117758720))
		redCells: 	an OrderedCollection(a SnakeCell(615254272))
		blueDirection: 	#east
		redDirection: 	#east


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>rows:at:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 June 2017 6:24:02.116248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...

Array(Object)>>at:
	Receiver: an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...

SnakeGame>>rows:at:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aRow: 	22
		aColumn: 	0
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(27165952) a SnakeCell(240569088))
		firstCell: 	a SnakeCell(27165952)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(27165952) a SnakeCell(240569088))
		redCells: 	an OrderedCollection(a SnakeCell(615254272) a SnakeCell(615254272))
		blueDirection: 	#east
		redDirection: 	#east


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(27165952) a SnakeCell(240569088))
		redCells: 	an OrderedCollection(a SnakeCell(615254272) a SnakeCell(615254272))
		blueDirection: 	#east
		redDirection: 	#east


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>rows:at:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 June 2017 6:24:04.693248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...

Array(Object)>>at:
	Receiver: an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...

Array(Object)>>at:
	Receiver: an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(27165952) a SnakeCell(240569088) a SnakeCell(608307968) a SnakeCell(7...etc...

SnakeGame>>rows:at:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aRow: 	22
		aColumn: 	0
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(27165952) a SnakeCell(240569088))
		firstCell: 	a SnakeCell(27165952)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(27165952) a SnakeCell(240569088))
		redCells: 	an OrderedCollection(a SnakeCell(615254272) a SnakeCell(615254272))
		blueDirection: 	#east
		redDirection: 	#east


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(27165952) a SnakeCell(240569088))
		redCells: 	an OrderedCollection(a SnakeCell(615254272) a SnakeCell(615254272))
		blueDirection: 	#east
		redDirection: 	#east


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
Array(Object)>>at:
SnakeGame>>rows:at:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
22 June 2017 6:24:26.178248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(a SnakeCell(823545088) a SnakeCell(791795968) a SnakeCell(835098368) a SnakeCell(...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(823545088) a SnakeCell(791795968) a SnakeCell(835098368) a SnakeCell(...etc...

Array(Object)>>at:
	Receiver: an Array(a SnakeCell(823545088) a SnakeCell(791795968) a SnakeCell(835098368) a SnakeCell(...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(a SnakeCell(823545088) a SnakeCell(791795968) a SnakeCell(835098368) a SnakeCell(...etc...

SnakeGame>>rows:at:
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		aRow: 	1
		aColumn: 	0
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(823545088) a SnakeCell(791795968) a S...etc...
		firstCell: 	a SnakeCell(823545088)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(823545088) a SnakeCell(791795968) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(615254272) a SnakeCell(615254272) a ...etc...
		blueDirection: 	#east
		redDirection: 	#east


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(823545088) a SnakeCell(791795968) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(615254272) a SnakeCell(615254272) a ...etc...
		blueDirection: 	#east
		redDirection: 	#east


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(660144384)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeGame>>rows:at:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
22 June 2017 6:34:15.423248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(163626752) a SnakeCell(223622912) a SnakeCell(336587008) a S...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 21 at: 20
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(163626752) a SnakeCell(223622912) a SnakeCell(336587008) a S...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		container: 	a Morph(370597632)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(370597632)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(657@219) mouseDown red 20418378 nil]
		sourceMorph: 	a SimpleButtonMorph(460761856)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(657@219) mouseDown red 20418378 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(460761856)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(657@219) mouseDown red 20418378 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(460761856)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(657@219) mouseDown red 20418378 nil]
		sourceMorph: 	a SimpleButtonMorph(460761856)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(460761856)
	Arguments and temporary variables: 
		evt: 	[(657@219) mouseDown red 20418378 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(200092416)
		submorphs: 	an Array(a StringMorph(224744704)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	Color gray
		extension: 	a MorphExtension (936934144) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	(Color r: 0.0 g: 0.0 b: 0.0 alpha: 0.2)
		label: 	a StringMorph(224744704)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(460761856)
		clickState: 	#firstClickUp
		firstClickDown: 	[(657@219) mouseDown red 20418378 nil]
		firstClickUp: 	[(657@219) mouseUp 20418456 nil]
		firstClickTime: 	20418378
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	17437575


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(657@219) mouseUp 20418456 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(657@219) mouseUp 20418456 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(460761856)
		clickState: 	#firstClickUp
		firstClickDown: 	[(657@219) mouseDown red 20418378 nil]
		firstClickUp: 	[(657@219) mouseUp 20418456 nil]
		firstClickTime: 	20418378
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	17437575


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(657@219) mouseUp 20418456 nil]
		evt: 	[(657@219) mouseUp 20418456 nil]
	Receiver's instance variables: 
		bounds: 	(657@219.0) corner: (673@235.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(657@219.0) corner: (673@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(460761856)
		keyboardFocus: 	a SystemWindow(253292800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(657@219) mouseUp 20418456 nil]
		targetOffset: 	(43.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20418456 657 219 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(657@219) mouseUp 20418456 nil]
		evtBuf: 	#(1 20418456 657 219 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(657@219.0) corner: (673@235.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(657@219.0) corner: (673@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(460761856)
		keyboardFocus: 	a SystemWindow(253292800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(657@219) mouseUp 20418456 nil]
		targetOffset: 	(43.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20418456 657 219 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(657@219.0) corner: (673@235.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(657@219.0) corner: (673@235.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(460761856)
		keyboardFocus: 	a SystemWindow(253292800)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(657@219) mouseUp 20418456 nil]
		targetOffset: 	(43.0@23.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20418456 657 219 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17437637
		lastStepMessage: 	nil
		lastCycleTime: 	17437657
		alarms: 	a Heap()
		lastAlarmTime: 	17437637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17437637
		lastStepMessage: 	nil
		lastCycleTime: 	17437657
		alarms: 	a Heap()
		lastAlarmTime: 	17437637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17437637
		lastStepMessage: 	nil
		lastCycleTime: 	17437657
		alarms: 	a Heap()
		lastAlarmTime: 	17437637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17437637
		lastStepMessage: 	nil
		lastCycleTime: 	17437657
		alarms: 	a Heap()
		lastAlarmTime: 	17437637
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SystemWi...etc...
		fullBounds: 	(0@0) corner: (1304@746)
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Array did not understand #at:at:
22 June 2017 6:34:19.271248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>doesNotUnderstand: #at:at:
	Receiver: an Array(an Array(a SnakeCell(163626752) a SnakeCell(223622912) a SnakeCell(336587008) a S...etc...
	Arguments and temporary variables: 
		aMessage: 	at: 21 at: 20
		exception: 	MessageNotUnderstood: Array>>at:at:
		resumeValue: 	nil
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(163626752) a SnakeCell(223622912) a SnakeCell(336587008) a S...etc...

SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		container: 	a Morph(370597632)
		model: 	<<error during printing>>

[ self start ] in SnakeGame>>addControls
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		rowMorph: 	nil
		startBtn: 	nil
	Receiver's instance variables: 
		container: 	a Morph(370597632)
		model: 	<<error during printing>>

MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(622@204) mouseDown red 20422215 nil]
		sourceMorph: 	a SimpleButtonMorph(460761856)
		arity: 	0
	Receiver's instance variables: 
		event: 	#click
		selector: 	#value
		recipient: 	[ self start ]
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(622@204) mouseDown red 20422215 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(460761856)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	5
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil nil a MorphEventSubscription)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(622@204) mouseDown red 20422215 nil]
		eventType: 	#click
		sourceMorph: 	a SimpleButtonMorph(460761856)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


MorphicEventHandler>>click:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(622@204) mouseDown red 20422215 nil]
		sourceMorph: 	a SimpleButtonMorph(460761856)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) )


SimpleButtonMorph(Morph)>>click:
	Receiver: a SimpleButtonMorph(460761856)
	Arguments and temporary variables: 
		evt: 	[(622@204) mouseDown red 20422215 nil]
	Receiver's instance variables: 
		bounds: 	(614.0@196.0) corner: (734.0@246.0)
		owner: 	a Morph(200092416)
		submorphs: 	an Array(a StringMorph(224744704)'Start')
		fullBounds: 	(614.0@196.0) corner: (734.0@246.0)
		color: 	(Color r: 0.751 g: 0.751 b: 0.751 alpha: 1.0)
		extension: 	a MorphExtension (936934144) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	Color gray
		label: 	a StringMorph(224744704)'Start'


MouseClickState>>click
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(460761856)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@204) mouseDown red 20422215 nil]
		firstClickUp: 	[(622@204) mouseUp 20422309 nil]
		firstClickTime: 	20422215
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	17441421


MouseClickState>>handleEvent:from:
	Receiver: a MouseClickState[#firstClickUp]
	Arguments and temporary variables: 
		evt: 	[(622@204) mouseUp 20422309 nil]
		aHand: 	a HandMorph(58125568)
		localEvt: 	[(622@204) mouseUp 20422309 nil]
		timedOut: 	false
		isDrag: 	false
	Receiver's instance variables: 
		clickClient: 	a SimpleButtonMorph(460761856)
		clickState: 	#firstClickUp
		firstClickDown: 	[(622@204) mouseDown red 20422215 nil]
		firstClickUp: 	[(622@204) mouseUp 20422309 nil]
		firstClickTime: 	20422215
		clickSelector: 	#click:
		dblClickSelector: 	#doubleClick:
		dblClickTime: 	350
		dblClickTimeoutSelector: 	#doubleClickTimeout:
		dragSelector: 	#startDrag:
		dragThreshold: 	10
		localStamp: 	17441421


HandMorph>>handleEvent:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEvent: 	[(622@204) mouseUp 20422309 nil]
		evt: 	[(622@204) mouseUp 20422309 nil]
	Receiver's instance variables: 
		bounds: 	(622@204.0) corner: (638@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@204.0) corner: (638@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(460761856)
		keyboardFocus: 	a PluggableButtonMorph(348684032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@204) mouseUp 20422309 nil]
		targetOffset: 	(8.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20422309 622 204 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEventsFromQueue:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		anEventQueue: 	an InputEventSensor
		evt: 	[(622@204) mouseUp 20422309 nil]
		evtBuf: 	#(1 20422309 622 204 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	(622@204.0) corner: (638@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@204.0) corner: (638@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(460761856)
		keyboardFocus: 	a PluggableButtonMorph(348684032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@204) mouseUp 20422309 nil]
		targetOffset: 	(8.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20422309 622 204 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>processEvents
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@204.0) corner: (638@220.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	(622@204.0) corner: (638@220.0)
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	a SimpleButtonMorph(460761856)
		keyboardFocus: 	a PluggableButtonMorph(348684032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@204) mouseUp 20422309 nil]
		targetOffset: 	(8.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20422309 622 204 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
		h: 	a HandMorph(58125568)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17441484
		lastStepMessage: 	nil
		lastCycleTime: 	17441505
		alarms: 	a Heap()
		lastAlarmTime: 	17441484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17441484
		lastStepMessage: 	nil
		lastCycleTime: 	17441505
		alarms: 	a Heap()
		lastAlarmTime: 	17441484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17441484
		lastStepMessage: 	nil
		lastCycleTime: 	17441505
		alarms: 	a Heap()
		lastAlarmTime: 	17441484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	a FormCanvas on: DisplayScreen(1304x746x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17441484
		lastStepMessage: 	nil
		lastCycleTime: 	17441505
		alarms: 	a Heap()
		lastAlarmTime: 	17441484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a SpecWind...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		interactiveParser: 	nil
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	65
		numArgs: 	0



--- The full stack ---
Array(Object)>>doesNotUnderstand: #at:at:
SnakeGame>>start
[ self start ] in SnakeGame>>addControls
MorphEventSubscription>>notify:from:
[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
Set>>do:
MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
MorphicEventHandler>>click:fromMorph:
SimpleButtonMorph(Morph)>>click:
MouseClickState>>click
MouseClickState>>handleEvent:from:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 June 2017 6:35:13.756248 pm

VM: Win32 - IX86 - 6.1 - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@601)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32610048) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@601)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@601)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32610048) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@601)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@601)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32610048) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@601)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (988@601)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32610048) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (988@601)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(623@502.0) corner: (639@518.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@502) mouseOver CTRL 20459421 nil]
		targetOffset: 	(343@224)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20459421 623 503 0 2 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(623@502.0) corner: (639@518.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(623@502) mouseOver CTRL 20459421 nil]
		targetOffset: 	(343@224)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20459421 623 503 0 2 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1304@746)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	17495517
		lastStepMessage: 	nil
		lastCycleTime: 	17495538
		alarms: 	a Heap()
		lastAlarmTime: 	17495517
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1304@746)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1304@746)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-22T13:43:37.827248+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:14:16.938795 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(362371328) a SnakeCell(112090624) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(565302784) a SnakeCell(577038592) a ...etc...
		blueDirection: 	#west
		redDirection: 	#east


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(565302784) a SnakeCell(577038592) a S...etc...
		firstCell: 	a SnakeCell(565302784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(362371328) a SnakeCell(112090624) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(565302784) a SnakeCell(577038592) a ...etc...
		blueDirection: 	#west
		redDirection: 	#east


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(362371328) a SnakeCell(112090624) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(565302784) a SnakeCell(577038592) a ...etc...
		blueDirection: 	#west
		redDirection: 	#east


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(326370560)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:14:16.961608 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(882534400) a SnakeCell(87448576) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(870208256) a SnakeCell(154118400) a ...etc...
		blueDirection: 	#north
		redDirection: 	#east


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(870208256) a SnakeCell(154118400) a S...etc...
		firstCell: 	a SnakeCell(870208256)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(882534400) a SnakeCell(87448576) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(870208256) a SnakeCell(154118400) a ...etc...
		blueDirection: 	#north
		redDirection: 	#east


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(882534400) a SnakeCell(87448576) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(870208256) a SnakeCell(154118400) a ...etc...
		blueDirection: 	#north
		redDirection: 	#east


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(590290944)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:14:16.967262 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(841250304))
		firstCell: 	a SnakeCell(841250304)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(812155648)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:14:35.466348 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:14:36.272975 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(841250304))
		firstCell: 	a SnakeCell(841250304)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(812155648)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:14:37.053429 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(841250304))
		firstCell: 	a SnakeCell(841250304)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(812155648)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:15:13.776915 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(841250304))
		firstCell: 	a SnakeCell(841250304)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(812155648)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:15:14.921487 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(841250304))
		firstCell: 	a SnakeCell(841250304)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(812155648)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeModel did not understand #respawn
22 June 2017 11:15:15.14048 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


Message>>sentTo:
	Receiver: respawn
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		selector: 	#respawn
		args: 	#()
		lookupClass: 	SnakeModel


SnakeModel(Object)>>doesNotUnderstand: #respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		aMessage: 	respawn
		exception: 	MessageNotUnderstood: SnakeModel>>respawn
		resumeValue: 	MessageNotUnderstood: SnakeModel>>respawn
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(841250304))
		firstCell: 	a SnakeCell(841250304)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(841250304))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(812155648)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
Message>>sentTo:
SnakeModel(Object)>>doesNotUnderstand: #respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Cannot locate cairo library. Please check if it installed on your system
22 June 2017 11:32:27.109303 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

CairoLibrary(Object)>>error:
	Receiver: a CairoLibrary
	Arguments and temporary variables: 
		aString: 	'Cannot locate cairo library. Please check if it installed on your sys...etc...
	Receiver's instance variables: 
a CairoLibrary

CairoLibrary>>unix32ModuleName
	Receiver: a CairoLibrary
	Arguments and temporary variables: 

	Receiver's instance variables: 
a CairoLibrary

Unix32Platform>>ffiModuleName:
	Receiver: an Unix32Platform
	Arguments and temporary variables: 
		aLibrary: 	a CairoLibrary
	Receiver's instance variables: 
an Unix32Platform

CairoLibrary(FFILibrary)>>moduleName
	Receiver: a CairoLibrary
	Arguments and temporary variables: 

	Receiver's instance variables: 
a CairoLibrary

FFICalloutMethodBuilder>>moduleName
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	AthensCairoSurface class>>primImage:width:height:
		signature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #,...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>createFFICalloutLiteralFromSpec:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		functionSpec: 	a FFIFunctionSpec
		externalFunction: 	nil
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	AthensCairoSurface class>>primImage:width:height:
		signature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #,...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>generateFFICallout:spec:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		builder: 	an IRBuilder
		functionSpec: 	a FFIFunctionSpec
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	AthensCairoSurface class>>primImage:width:height:
		signature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #,...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


[ :builder | self generateFFICallout: builder spec: functionSpec ] in FFICalloutMethodBuilder>>generateMethodFromSpec:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		functionSpec: 	a FFIFunctionSpec
		ir: 	nil
		builder: 	an IRBuilder
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	AthensCairoSurface class>>primImage:width:height:
		signature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #,...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


IRBuilder class>>buildIR:
	Receiver: IRBuilder
	Arguments and temporary variables: 
		aBlock: 	[ :builder | self generateFFICallout: builder spec: functionSpec ]
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#add:->IRBuilder>>#add: #addBlockReturnTopIfRequ...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{IRReconstructor}
		name: 	#IRBuilder
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'OpalCompiler-Core-IR-Manipulation'
		traitComposition: 	{}
		localSelectors: 	nil


FFICalloutMethodBuilder>>generateMethodFromSpec:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		functionSpec: 	a FFIFunctionSpec
		ir: 	nil
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	AthensCairoSurface class>>primImage:width:height:
		signature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #,...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>generate
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 

	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	AthensCairoSurface class>>primImage:width:height:
		signature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #,...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutMethodBuilder>>build:
	Receiver: a FFICalloutMethodBuilder
	Arguments and temporary variables: 
		aBlock: 	[ :builder | 
builder
	signature: functionSignature;
	sender: sender;
	...etc...
	Receiver's instance variables: 
		calloutAPI: 	a FFICalloutAPI
		requestor: 	a FFICallout
		sender: 	AthensCairoSurface class>>primImage:width:height:
		signature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #,...etc...
		module: 	CairoLibrary
		functionResolutionStrategies: 	an OrderedCollection(a FFICallbackFunctionResolut...etc...


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aF...etc...
		moduleNameOrLibrary: 	CairoLibrary
		sender: 	AthensCairoSurface class>>primImage:width:height:
		ffiMethod: 	nil
	Receiver's instance variables: 
		context: 	AthensCairoSurface class>>primImage:width:height:
		options: 	#()
		callingConvention: 	#cdecl


AthensCairoSurface class(Object)>>nbCall:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		fnSpec: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #, #i...etc...
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	nil
		dispatch: 	nil
		dispatchStruct: 	nil


AthensCairoSurface class>>primImage:width:height:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: No module to load address from
22 June 2017 11:34:04.447633 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ExternalLibraryFunction(Object)>>error:
	Receiver: <cdecl: void* 'cairo_image_surface_create' (long long long) module: 'a CairoLibrary'>
	Arguments and temporary variables: 
		aString: 	'No module to load address from'
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		flags: 	0
		argTypes: 	an Array(void* long long long)
		name: 	'cairo_image_surface_create'
		module: 	a CairoLibrary
		errorCodeName: 	nil


ExternalLibraryFunction(Object)>>externalCallFailed
	Receiver: <cdecl: void* 'cairo_image_surface_create' (long long long) module: 'a CairoLibrary'>
	Arguments and temporary variables: 
		errCode: 	12
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		flags: 	0
		argTypes: 	an Array(void* long long long)
		name: 	'cairo_image_surface_create'
		module: 	a CairoLibrary
		errorCodeName: 	nil


ExternalLibraryFunction(ExternalFunction)>>invokeWithArguments:
	Receiver: <cdecl: void* 'cairo_image_surface_create' (long long long) module: 'a CairoLibrary'>
	Arguments and temporary variables: 
		argArray: 	#(0 21 254)
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		flags: 	0
		argTypes: 	an Array(void* long long long)
		name: 	'cairo_image_surface_create'
		module: 	a CairoLibrary
		errorCodeName: 	nil


AthensCairoSurface class>>primImage:width:height:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		aFormat: 	0
		aWidth: 	21
		aHeight: 	254
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	nil
		dispatch: 	nil
		dispatchStruct: 	nil


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aF...etc...
		moduleNameOrLibrary: 	CairoLibrary
		sender: 	AthensCairoSurface class>>primImage:width:height:
		ffiMethod: 	AthensCairoSurface class>>#primImage:width:height:
	Receiver's instance variables: 
		context: 	AthensCairoSurface class>>primImage:width:height:
		options: 	#()
		callingConvention: 	#cdecl


AthensCairoSurface class(Object)>>nbCall:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		fnSpec: 	#(#AthensCairoSurface #cairo_image_surface_create #(#int #aFormat #, #i...etc...
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	nil
		dispatch: 	nil
		dispatchStruct: 	nil


AthensCairoSurface class>>primImage:width:height:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		aFormat: 	0
		aWidth: 	21
		aHeight: 	254
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	nil
		dispatch: 	nil
		dispatchStruct: 	nil


AthensCairoSurface class>>extent:format:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		anExtent: 	(21@253)
		aFormat: 	0
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	nil
		dispatch: 	nil
		dispatchStruct: 	nil


AthensCairoSurface class>>extent:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		anExtent: 	(21@253)
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	nil
		dispatch: 	nil
		dispatchStruct: 	nil


HiRulerBuilder>>athensSurface
	Receiver: a HiRulerBuilder
	Arguments and temporary variables: 
		athensSurface: 	nil
		ruler: 	a HiRuler
	Receiver's instance variables: 
		rowSize: 	23
		columnSize: 	7
		nodeBuilder: 	a HiNodeBuilder
		linkBuilders: 	an OrderedCollection(a HiLinkBuilder)
		values: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFil...etc...


HiRulerBuilder>>form
	Receiver: a HiRulerBuilder
	Arguments and temporary variables: 
		surface: 	nil
		form: 	nil
	Receiver's instance variables: 
		rowSize: 	23
		columnSize: 	7
		nodeBuilder: 	a HiNodeBuilder
		linkBuilders: 	an OrderedCollection(a HiLinkBuilder)
		values: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFil...etc...


HiRulerController>>buildRulerForm
	Receiver: a HiRulerController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


HiRulerController>>refreshRuler
	Receiver: a HiRulerController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


HiRulerController>>values:
	Receiver: a HiRulerController
	Arguments and temporary variables: 
		aCollection: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an ...etc...
	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


HiRulerController>>updateFromTree
	Receiver: a HiRulerController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


[ hiedraRulerController updateFromTree ] in EpLogNodeGraphModel>>initializeHiedraController
	Receiver: an EpLogNodeGraphModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an EpUnifiedBrowserModel
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		refreshButtonModel: 	a ButtonModel
		directory: 	{localDirectory}/ombu-sessions
		hiedraRulerController: 	a HiRulerController
		selectDirectoryButtonModel: 	a ButtonModel
		logNodesTreeModel: 	a TreeModel
		directoryTextModel: 	nil
		monitor: 	nil
		openSettingsButtonModel: 	a ButtonModel
		hiedraCheckBoxModel: 	a CheckBoxModel


BlockClosure>>cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		anArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


BlockClosure>>cull:cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		firstArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		secondArg: 	#()
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


BlockClosure>>cull:cull:cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		firstArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		secondArg: 	#()
		thirdArg: 	a ValueChanged
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


BlockClosure>>cull:cull:cull:cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		firstArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		secondArg: 	#()
		thirdArg: 	a ValueChanged
		fourthArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


[ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: announcement oldValue
	cull: announcement
	cull: ann ] in CollectionValueHolder(NewValueHolder)>>whenChangedDo:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		aBlock: 	[ hiedraRulerController updateFromTree ]
		block: 	nil
		announcement: 	a ValueChanged
		ann: 	an Announcer
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


BlockClosure>>cull:cull:
	Receiver: [ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: announcement oldValue
	...etc...
	Arguments and temporary variables: 
		firstArg: 	a ValueChanged
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	CollectionValueHolder(NewValueHolder)>>whenChangedDo:
		startpc: 	38
		numArgs: 	2


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	ValueChanged
		subscriber: 	a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogN...etc...
		action: 	[ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: anno...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	ValueChanged
		subscriber: 	a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogN...etc...
		action: 	[ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: anno...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ValueChanged
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		announcement: 	a ValueChanged
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


CollectionValueHolder(NewValueHolder)>>valueChanged:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		oldValue: 	#()
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


[ | oldValue |
oldValue := value.
value := anObject.
self valueChanged: oldValue ] in CollectionValueHolder(NewValueHolder)>>value:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		anObject: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		oldValue: 	#()
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


BlockClosure>>ensure:
	Receiver: [ | oldValue |
oldValue := value.
value := anObject.
self valueChanged: oldValue ]
	Arguments and temporary variables: 
		aBlock: 	[ lock := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CollectionValueHolder(NewValueHolder)>>value:
		startpc: 	27
		numArgs: 	0


CollectionValueHolder(NewValueHolder)>>handleCircularReferencesWhile:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | oldValue |
oldValue := value.
value := anObject.
self valueChanged:...etc...
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


CollectionValueHolder(NewValueHolder)>>value:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		anObject: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


TreeModel>>roots:
	Receiver: a TreeModel
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: Could not coerce arguments
22 June 2017 11:34:09.434076 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ExternalLibraryFunction(Object)>>error:
	Receiver: <cdecl: bool 'ioRegisterSurface' (long void* void*) module: 'SurfacePlugin'>
	Arguments and temporary variables: 
		aString: 	'Could not coerce arguments'
	Receiver's instance variables: 
		handle: 	@ 16rF7319860
		flags: 	0
		argTypes: 	an Array(bool long void* void*)
		name: 	'ioRegisterSurface'
		module: 	#SurfacePlugin
		errorCodeName: 	nil


ExternalLibraryFunction(Object)>>externalCallFailed
	Receiver: <cdecl: bool 'ioRegisterSurface' (long void* void*) module: 'SurfacePlugin'>
	Arguments and temporary variables: 
		errCode: 	6
	Receiver's instance variables: 
		handle: 	@ 16rF7319860
		flags: 	0
		argTypes: 	an Array(bool long void* void*)
		name: 	'ioRegisterSurface'
		module: 	#SurfacePlugin
		errorCodeName: 	nil


ExternalLibraryFunction(ExternalFunction)>>invokeWithArguments:
	Receiver: <cdecl: bool 'ioRegisterSurface' (long void* void*) module: 'SurfacePlugin'>
	Arguments and temporary variables: 
		argArray: 	an Array(Error: No module to load address from @ 16r08DE1DB8 #[0 0 0 ...etc...
	Receiver's instance variables: 
		handle: 	@ 16rF7319860
		flags: 	0
		argTypes: 	an Array(bool long void* void*)
		name: 	'ioRegisterSurface'
		module: 	#SurfacePlugin
		errorCodeName: 	nil


AthensCairoSurface class>>ioRegisterSurface:dispatch:surfaceId:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		aCairoSurfaceHandle: 	Error: No module to load address from
		sqSurfaceDispatchPtr: 	@ 16r08DE1DB8
		idHolder: 	#[0 0 0 0]
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	a WorkingSession
		dispatch: 	@ 16r08DE1DB8
		dispatchStruct: 	SQSurfaceDispatch ( 
majorVersion: 	1
minorVersion: 	0
getSurfa...etc...


FFICalloutAPI>>function:module:
	Receiver: a FFICalloutAPI
	Arguments and temporary variables: 
		functionSignature: 	#(#bool #ioRegisterSurface #(#int #aCairoSurfaceHandle #, #v...etc...
		moduleNameOrLibrary: 	#SurfacePlugin
		sender: 	AthensCairoSurface class>>ioRegisterSurface:dispatch:surfaceId:
		ffiMethod: 	AthensCairoSurface class>>#ioRegisterSurface:dispatch:surfaceId:
	Receiver's instance variables: 
		context: 	AthensCairoSurface class>>ioRegisterSurface:dispatch:surfaceId:
		options: 	#()
		callingConvention: 	#cdecl


AthensCairoSurface class(Object)>>nbCall:module:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		fnSpec: 	#(#bool #ioRegisterSurface #(#int #aCairoSurfaceHandle #, #void #* #sqS...etc...
		aModuleNameOrHandle: 	#SurfacePlugin
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	a WorkingSession
		dispatch: 	@ 16r08DE1DB8
		dispatchStruct: 	SQSurfaceDispatch ( 
majorVersion: 	1
minorVersion: 	0
getSurfa...etc...


AthensCairoSurface class>>ioRegisterSurface:dispatch:surfaceId:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		aCairoSurfaceHandle: 	Error: No module to load address from
		sqSurfaceDispatchPtr: 	@ 16r08DE1DB8
		idHolder: 	#[0 0 0 0]
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	a WorkingSession
		dispatch: 	@ 16r08DE1DB8
		dispatchStruct: 	SQSurfaceDispatch ( 
majorVersion: 	1
minorVersion: 	0
getSurfa...etc...


AthensCairoSurface class>>registerSurface:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		anAthensCairoSurface: 	an AthensCairoSurface
		id: 	#[0 0 0 0]
		address: 	Error: No module to load address from
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	a WorkingSession
		dispatch: 	@ 16r08DE1DB8
		dispatchStruct: 	SQSurfaceDispatch ( 
majorVersion: 	1
minorVersion: 	0
getSurfa...etc...


AthensCairoSurface>>initialize
	Receiver: an AthensCairoSurface
	Arguments and temporary variables: 

	Receiver's instance variables: 
		currentCanvas: 	nil
		handle: 	Error: No module to load address from
		context: 	nil
		builder: 	nil
		id: 	nil
		ftFontRenderer: 	nil
		session: 	a WorkingSession


AthensCairoSurface class>>extent:format:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		anExtent: 	(21@253)
		aFormat: 	0
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	a WorkingSession
		dispatch: 	@ 16r08DE1DB8
		dispatchStruct: 	SQSurfaceDispatch ( 
majorVersion: 	1
minorVersion: 	0
getSurfa...etc...


AthensCairoSurface class>>extent:
	Receiver: AthensCairoSurface
	Arguments and temporary variables: 
		anExtent: 	(21@253)
	Receiver's instance variables: 
		superclass: 	AthensSurface
		methodDict: 	a MethodDictionary(#asAthensPaintOn:->AthensCairoSurface>>#asAthens...etc...
		format: 	65543
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensCairoPDFSurface. AthensQuartzSurface. AthensCairoSDLSurface}...etc...
		name: 	#AthensCairoSurface
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection(AthensCairoDefs)
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Athens-Cairo'
		traitComposition: 	TCairoLibrary
		localSelectors: 	a Set(#createStrokePaintFor: #stride #writeToPng: #height #load...etc...
		session: 	a WorkingSession
		dispatch: 	@ 16r08DE1DB8
		dispatchStruct: 	SQSurfaceDispatch ( 
majorVersion: 	1
minorVersion: 	0
getSurfa...etc...


HiRulerBuilder>>athensSurface
	Receiver: a HiRulerBuilder
	Arguments and temporary variables: 
		athensSurface: 	nil
		ruler: 	a HiRuler
	Receiver's instance variables: 
		rowSize: 	23
		columnSize: 	7
		nodeBuilder: 	a HiNodeBuilder
		linkBuilders: 	an OrderedCollection(a HiLinkBuilder)
		values: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFil...etc...


HiRulerBuilder>>form
	Receiver: a HiRulerBuilder
	Arguments and temporary variables: 
		surface: 	nil
		form: 	nil
	Receiver's instance variables: 
		rowSize: 	23
		columnSize: 	7
		nodeBuilder: 	a HiNodeBuilder
		linkBuilders: 	an OrderedCollection(a HiLinkBuilder)
		values: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFil...etc...


HiRulerController>>buildRulerForm
	Receiver: a HiRulerController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


HiRulerController>>refreshRuler
	Receiver: a HiRulerController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


HiRulerController>>values:
	Receiver: a HiRulerController
	Arguments and temporary variables: 
		aCollection: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an ...etc...
	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


HiRulerController>>updateFromTree
	Receiver: a HiRulerController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rulerBuilder: 	a HiRulerBuilder
		rulerForm: 	nil
		indexesByNode: 	an IdentityDictionary(an EpFileLogNode->8 an EpFileLogNode->7 an...etc...
		nodes: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
		treeModel: 	a TreeModel


[ hiedraRulerController updateFromTree ] in EpLogNodeGraphModel>>initializeHiedraController
	Receiver: an EpLogNodeGraphModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announceur: 	nil
		focusOrder: 	nil
		owner: 	an EpUnifiedBrowserModel
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		announcer: 	an Announcer
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Untitled window' ]
		refreshButtonModel: 	a ButtonModel
		directory: 	{localDirectory}/ombu-sessions
		hiedraRulerController: 	a HiRulerController
		selectDirectoryButtonModel: 	a ButtonModel
		logNodesTreeModel: 	a TreeModel
		directoryTextModel: 	nil
		monitor: 	nil
		openSettingsButtonModel: 	a ButtonModel
		hiedraCheckBoxModel: 	a CheckBoxModel


BlockClosure>>cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		anArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


BlockClosure>>cull:cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		firstArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		secondArg: 	#()
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


BlockClosure>>cull:cull:cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		firstArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		secondArg: 	#()
		thirdArg: 	a ValueChanged
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


BlockClosure>>cull:cull:cull:cull:
	Receiver: [ hiedraRulerController updateFromTree ]
	Arguments and temporary variables: 
		firstArg: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		secondArg: 	#()
		thirdArg: 	a ValueChanged
		fourthArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	EpLogNodeGraphModel>>initializeHiedraController
		startpc: 	81
		numArgs: 	0


[ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: announcement oldValue
	cull: announcement
	cull: ann ] in CollectionValueHolder(NewValueHolder)>>whenChangedDo:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		aBlock: 	[ hiedraRulerController updateFromTree ]
		block: 	nil
		announcement: 	a ValueChanged
		ann: 	an Announcer
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


BlockClosure>>cull:cull:
	Receiver: [ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: announcement oldValue
	...etc...
	Arguments and temporary variables: 
		firstArg: 	a ValueChanged
		secondArg: 	an Announcer
	Receiver's instance variables: 
		outerContext: 	CollectionValueHolder(NewValueHolder)>>whenChangedDo:
		startpc: 	38
		numArgs: 	2


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	ValueChanged
		subscriber: 	a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogN...etc...
		action: 	[ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: anno...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	ValueChanged
		subscriber: 	a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogN...etc...
		action: 	[ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: anno...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a ValueChanged
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a ValueChanged
		announcement: 	a ValueChanged
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


CollectionValueHolder(NewValueHolder)>>valueChanged:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		oldValue: 	#()
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


[ | oldValue |
oldValue := value.
value := anObject.
self valueChanged: oldValue ] in CollectionValueHolder(NewValueHolder)>>value:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		anObject: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
		oldValue: 	#()
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


BlockClosure>>ensure:
	Receiver: [ | oldValue |
oldValue := value.
value := anObject.
self valueChanged: oldValue ]
	Arguments and temporary variables: 
		aBlock: 	[ lock := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CollectionValueHolder(NewValueHolder)>>value:
		startpc: 	27
		numArgs: 	0


CollectionValueHolder(NewValueHolder)>>handleCircularReferencesWhile:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | oldValue |
oldValue := value.
value := anObject.
self valueChanged:...etc...
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...


CollectionValueHolder(NewValueHolder)>>value:
	Receiver: a CollectionValueHolder[ an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an...etc...
	Arguments and temporary variables: 
		anObject: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpF...etc...
	Receiver's instance variables: 
		announcer: 	an Announcer
		lock: 	true
		value: 	an Array(an EpMonitorLogNode an EpFileLogNode an EpFileLogNode an EpFile...etc...



--- The full stack ---
ExternalLibraryFunction(Object)>>error:
ExternalLibraryFunction(Object)>>externalCallFailed
ExternalLibraryFunction(ExternalFunction)>>invokeWithArguments:
AthensCairoSurface class>>ioRegisterSurface:dispatch:surfaceId:
FFICalloutAPI>>function:module:
AthensCairoSurface class(Object)>>nbCall:module:
AthensCairoSurface class>>ioRegisterSurface:dispatch:surfaceId:
AthensCairoSurface class>>registerSurface:
AthensCairoSurface>>initialize
AthensCairoSurface class>>extent:format:
AthensCairoSurface class>>extent:
HiRulerBuilder>>athensSurface
HiRulerBuilder>>form
HiRulerController>>buildRulerForm
HiRulerController>>refreshRuler
HiRulerController>>values:
HiRulerController>>updateFromTree
[ hiedraRulerController updateFromTree ] in EpLogNodeGraphModel>>initializeHiedraController
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
BlockClosure>>cull:cull:cull:cull:
[ :announcement :ann | 
aBlock
	cull: announcement newValue
	cull: announcement oldValue
	cull: announcement
	cull: ann ] in CollectionValueHolder(NewValueHolder)>>whenChangedDo:
BlockClosure>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
CollectionValueHolder(NewValueHolder)>>valueChanged:
[ | oldValue |
oldValue := value.
value := anObject.
self valueChanged: oldValue ] in CollectionValueHolder(NewValueHolder)>>value:
BlockClosure>>ensure:
CollectionValueHolder(NewValueHolder)>>handleCircularReferencesWhile:
CollectionValueHolder(NewValueHolder)>>value:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
TreeModel>>roots:
EpLogNodeGraphModel>>refreshLogNodesTreeModel
EpLogNodeGraphModel>>refresh
EpUnifiedBrowserModel>>refresh
EpUnifiedBrowserModel class>>open
[ self open ] in EpUnifiedBrowserModel class>>worldMenuItemOn:
BlockClosure>>cull:
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of OrderedCollection class did not understand #snake
22 June 2017 11:40:42.124102 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

OrderedCollection class(Object)>>doesNotUnderstand: #snake
	Receiver: OrderedCollection
	Arguments and temporary variables: 
		aMessage: 	snake
		exception: 	MessageNotUnderstood: OrderedCollection class>>snake
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	SequenceableCollection
		methodDict: 	a MethodDictionary(#add:->OrderedCollection>>#add: #add:after:->Ord...etc...
		format: 	65539
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{SortedCollection. ObjectFinalizerCollection. WeakOrderedCollection...etc...
		name: 	#OrderedCollection
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable'
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(62796544))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(62796544))
		firstCell: 	a SnakeCell(62796544)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(62796544))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(62796544))
		redCells: 	an OrderedCollection(a SnakeCell(175602432))
		blueDirection: 	#east
		redDirection: 	#south


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(812155648)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	136
		numArgs: 	0



--- The full stack ---
OrderedCollection class(Object)>>doesNotUnderstand: #snake
SnakeModel>>respawn
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#value: was sent to nil
23 June 2017 12:14:09.301715 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #value:
	Receiver: nil
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#value: was sent to nil
23 June 2017 12:14:14.3391 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #value:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	value: AColorSelectorMorph>>#drawOnAthensCanvas:
		exception: 	MessageNotUnderstood: receiver of "value:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: value: AColorSelectorMorph>>#drawOnAthensCanvas:
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#value:
		args: 	{AColorSelectorMorph>>#drawOnAthensCanvas:}
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #value:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	value: AColorSelectorMorph>>#drawOnAthensCanvas:
		exception: 	MessageNotUnderstood: receiver of "value:" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "value:" is nil
	Receiver's instance variables: 
nil

[ :method | 
(aSelectBlock value: method)
	ifTrue: [ result add: method ] ] in [ :class | 
class
	methodsDo: [ :method | 
		(aSelectBlock value: method)
			ifTrue: [ result add: method ] ].
class classSide
	methodsDo: [ :method | 
		(aSelectBlock value: method)
			ifTrue: [ result add: method ] ] ] in Finder>>methodSearch:
	Receiver: a Finder
	Arguments and temporary variables: 
		aSelectBlock: 	nil
		result: 	an OrderedCollection()
		class: 	AColorSelectorMorph
		method: 	AColorSelectorMorph>>#drawOnAthensCanvas:
	Receiver's instance variables: 
		searchingString: 	'"Color blue"'
		selectedMethod: 	nil
		selectedClass: 	nil
		packagesSelection: 	Smalltalk
		currentSearchMode: 	#Selectors
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary()
		useRegEx: 	false


MethodDictionary>>valuesDo:
	Receiver: a MethodDictionary(#color:->AColorSelectorMorph>>#color: #defaultFillStyle->AColorSelector...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :method | 
(aSelectBlock value: method)
	ifTrue: [ result add: method...etc...
		i: 	1
		value: 	AColorSelectorMorph>>#drawOnAthensCanvas:
	Receiver's instance variables: 
		tally: 	7
		array: 	{AColorSelectorMorph>>#drawOnAthensCanvas:. nil. nil. nil. nil. nil. nil...etc...


AColorSelectorMorph class(Behavior)>>methodsDo:
	Receiver: AColorSelectorMorph
	Arguments and temporary variables: 
		aBlock: 	[ :method | 
(aSelectBlock value: method)
	ifTrue: [ result add: method...etc...
	Receiver's instance variables: 
		superclass: 	BracketSliderMorph
		methodDict: 	a MethodDictionary(#color:->AColorSelectorMorph>>#color: #defaultFi...etc...
		format: 	65559
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#AColorSelectorMorph
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Widgets-ColorPicker'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


[ :class | 
class
	methodsDo: [ :method | 
		(aSelectBlock value: method)
			ifTrue: [ result add: method ] ].
class classSide
	methodsDo: [ :method | 
		(aSelectBlock value: method)
			ifTrue: [ result add: method ] ] ] in Finder>>methodSearch:
	Receiver: a Finder
	Arguments and temporary variables: 
		aSelectBlock: 	nil
		result: 	an OrderedCollection()
		class: 	AColorSelectorMorph
	Receiver's instance variables: 
		searchingString: 	'"Color blue"'
		selectedMethod: 	nil
		selectedClass: 	nil
		packagesSelection: 	Smalltalk
		currentSearchMode: 	#Selectors
		environment: 	Smalltalk
		resultDictionary: 	a Dictionary()
		useRegEx: 	false


[ :each | 
| newLabel |
"Special handling for first and last element"
(count = 0
	or: [ count + 1 = size
			or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
	ifTrue: [ bar current: count.
		oldLabel = (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
			ifFalse: [ bar label: newLabel.
				oldLabel := newLabel ].
		lastUpdate := Time millisecondClockValue ].
aBlock value: each.
count := count + 1 ] in [ :bar | 
labelBlock := aStringOrBlock isString
	ifTrue: [ bar label: aStringOrBlock.
		[ :dummyItem | aStringOrBlock ] ]
	ifFalse: [ aStringOrBlock ].
self
	do: [ :each | 
		| newLabel |
		"Special handling for first and last element"
		(count = 0
			or: [ count + 1 = size
					or: [ (Time millisecondsSince: lastUpdate) >= msecs ] ])
			ifTrue: [ bar current: count.
				oldLabel
					= (newLabel := (labelBlock cull: each) ifNil: [ oldLabel ])
					ifFalse: [ bar label: newLabel.
						oldLabel := newLabel ].
				lastUpdate := Time millisecondClockValue ].
		aBlock value: each.
		count := count + 1 ] ] in Array(Collection)>>do:displayingProgress:every:
	Receiver: {AColorSelectorMorph. AGroupContentHasBeenModified. AGroupHasBeenAdded. AGroupHasBeenCreat...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :class | 
class
	methodsDo: [ :method | 
		(aSelectBlock value: metho...etc...
		aStringOrBlock: 	[ :aClass | aClass name ]
		msecs: 	20
		size: 	6513
		bar: 	a Job
		count: 	0
		labelBlock: 	[ :aClass | aClass name ]
		oldLabel: 	#AColorSelectorMorph
		lastUpdate: 	2848839
		each: 	AColorSelectorMorph
		newLabel: 	#AColorSelectorMorph
	Receiver's instance variables: 
{AColorSelectorMorph. AGroupContentHasBeenModified. AGroupHasBeenAdded. AGroupHasBeenCreat...etc...

Array(SequenceableCollection)>>do:
	Receiver: {AColorSelectorMorph. AGroupContentHasBeenModified. AGroupHasBeenAdded. AGroupHasBeenCreat...etc...
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:00:03.845215 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(325049600) a SnakeCell(985313024) a Sna...etc...
		firstCell: 	a SnakeCell(325049600)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(910391296) a SnakeCell(126864384) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(325049600) a SnakeCell(985313024) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(325049600) a SnakeCell(985313024) a S...etc...
		firstCell: 	a SnakeCell(325049600)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(910391296) a SnakeCell(126864384) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(325049600) a SnakeCell(985313024) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(910391296) a SnakeCell(126864384) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(325049600) a SnakeCell(985313024) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(231141376)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:04:54.673261 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(405355264) a SnakeCell(927828992) a Sna...etc...
		firstCell: 	a SnakeCell(405355264)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(405355264) a SnakeCell(927828992) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(70703104) a SnakeCell(749418240) a S...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(405355264) a SnakeCell(927828992) a S...etc...
		firstCell: 	a SnakeCell(405355264)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(405355264) a SnakeCell(927828992) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(70703104) a SnakeCell(749418240) a S...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(405355264) a SnakeCell(927828992) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(70703104) a SnakeCell(749418240) a S...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(556634624)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:11:55.112993 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(776391936) a SnakeCell(709429760) a Sna...etc...
		firstCell: 	a SnakeCell(776391936)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(558107136) a SnakeCell(972608768) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(776391936) a SnakeCell(709429760) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(776391936) a SnakeCell(709429760) a S...etc...
		firstCell: 	a SnakeCell(776391936)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(558107136) a SnakeCell(972608768) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(776391936) a SnakeCell(709429760) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(558107136) a SnakeCell(972608768) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(776391936) a SnakeCell(709429760) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(639107072)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:18:09.702871 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	90
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(1022470144) a SnakeCell(492365568) a Sn...etc...
		firstCell: 	a SnakeCell(1022470144)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(934950144) a SnakeCell(570024448) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1022470144) a SnakeCell(492365568) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(1022470144) a SnakeCell(492365568) a ...etc...
		firstCell: 	a SnakeCell(1022470144)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(934950144) a SnakeCell(570024448) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1022470144) a SnakeCell(492365568) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(934950144) a SnakeCell(570024448) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1022470144) a SnakeCell(492365568) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(948086016)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:19:31.853612 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(454193920) a SnakeCell(407931136) a Sna...etc...
		firstCell: 	a SnakeCell(454193920)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(257863168) a SnakeCell(285607424) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(454193920) a SnakeCell(407931136) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(454193920) a SnakeCell(407931136) a S...etc...
		firstCell: 	a SnakeCell(454193920)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(257863168) a SnakeCell(285607424) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(454193920) a SnakeCell(407931136) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(257863168) a SnakeCell(285607424) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(454193920) a SnakeCell(407931136) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(207443968)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:23:01.659481 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #value: in BlockClosure failed
23 June 2017 1:23:20.473672 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>primitiveFailed:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		selector: 	#value:
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure(Object)>>primitiveFailed
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>primitiveFailed:
BlockClosure(Object)>>primitiveFailed
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:23:21.365185 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	2
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ cells removeLast ]
		nextValue: 	2
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
PrimitiveFailed: primitive #value: in BlockClosure failed
23 June 2017 1:23:22.58163 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>primitiveFailed:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		selector: 	#value:
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure(Object)>>primitiveFailed
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	2
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	92
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	2
		aBlock: 	[ cells removeLast ]
		nextValue: 	2
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>primitiveFailed:
BlockClosure(Object)>>primitiveFailed
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:23.233344 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:24.35396 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:28.08624 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:29.092704 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:29.668254 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:30.209469 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:30.733452 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:23:31.297792 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


Message>>sentTo:
	Receiver: rows
	Arguments and temporary variables: 
		receiver: 	SnakeGame
	Receiver's instance variables: 
		selector: 	#rows
		args: 	#()
		lookupClass: 	SnakeGame class


SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	MessageNotUnderstood: SnakeGame class>>rows
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a Sna...etc...
		firstCell: 	a SnakeCell(566518784)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a S...etc...
		firstCell: 	a SnakeCell(566518784)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(146092288) a SnakeCell(800081408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(566518784) a SnakeCell(613255936) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(53790976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
Message>>sentTo:
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:24:54.97981 am

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	94
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	94
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	94
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(341724672) a SnakeCell(996094208) a Sna...etc...
		firstCell: 	a SnakeCell(341724672)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(647920384) a SnakeCell(782863360) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(341724672) a SnakeCell(996094208) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(341724672) a SnakeCell(996094208) a S...etc...
		firstCell: 	a SnakeCell(341724672)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(647920384) a SnakeCell(782863360) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(341724672) a SnakeCell(996094208) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(647920384) a SnakeCell(782863360) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(341724672) a SnakeCell(996094208) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(944876800)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:04:46.906963 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	106
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	106
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	106
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(319480576) a SnakeCell(804416512) a Sna...etc...
		firstCell: 	a SnakeCell(319480576)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(347969024) a SnakeCell(720908544) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(319480576) a SnakeCell(804416512) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(319480576) a SnakeCell(804416512) a S...etc...
		firstCell: 	a SnakeCell(319480576)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(347969024) a SnakeCell(720908544) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(319480576) a SnakeCell(804416512) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(347969024) a SnakeCell(720908544) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(319480576) a SnakeCell(804416512) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(521190656)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:07:21.729741 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	106
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	106
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	106
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(890060288) a SnakeCell(945910272) a Sna...etc...
		firstCell: 	a SnakeCell(890060288)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(92495360) a SnakeCell(865096192) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(890060288) a SnakeCell(945910272) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(890060288) a SnakeCell(945910272) a S...etc...
		firstCell: 	a SnakeCell(890060288)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(92495360) a SnakeCell(865096192) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(890060288) a SnakeCell(945910272) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(92495360) a SnakeCell(865096192) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(890060288) a SnakeCell(945910272) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(655408640)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #'++'
23 June 2017 1:11:08.222835 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ByteString(Object)>>doesNotUnderstand: #'++'
	Receiver: 'SnakeSize: '
	Arguments and temporary variables: 
		aMessage: 	++ 4
		exception: 	MessageNotUnderstood: ByteString>>++
		resumeValue: 	nil
	Receiver's instance variables: 
'SnakeSize: '

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(817552896) a SnakeCell(1011143168) a Sn...etc...
		firstCell: 	a SnakeCell(817552896)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(171376128) a SnakeCell(543011328) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(817552896) a SnakeCell(1011143168) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(817552896) a SnakeCell(1011143168) a ...etc...
		firstCell: 	a SnakeCell(817552896)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(171376128) a SnakeCell(543011328) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(817552896) a SnakeCell(1011143168) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(171376128) a SnakeCell(543011328) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(817552896) a SnakeCell(1011143168) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(7909888)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #'++'
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Character did not understand #+
23 June 2017 1:11:31.684432 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Character(Object)>>doesNotUnderstand: #+
	Receiver: $S
	Arguments and temporary variables: 
		aMessage: 	+ 4
		exception: 	MessageNotUnderstood: Character>>+
		resumeValue: 	nil
	Receiver's instance variables: 
$S

[ :element | element perform: selector with: self ] in SmallInteger(Number)>>adaptToCollection:andSend:
	Receiver: 4
	Arguments and temporary variables: 
		rcvr: 	'SnakeSize: '
		selector: 	#+
		element: 	$S
	Receiver's instance variables: 
4

ByteString(SequenceableCollection)>>collect:
	Receiver: 'SnakeSize: '
	Arguments and temporary variables: 
		aBlock: 	[ :element | element perform: selector with: self ]
		newCollection: 	'           '
		index: 	1
	Receiver's instance variables: 
'SnakeSize: '

SmallInteger(Number)>>adaptToCollection:andSend:
	Receiver: 4
	Arguments and temporary variables: 
		rcvr: 	'SnakeSize: '
		selector: 	#+
	Receiver's instance variables: 
4

ByteString(Collection)>>+
	Receiver: 'SnakeSize: '
	Arguments and temporary variables: 
		arg: 	4
	Receiver's instance variables: 
'SnakeSize: '

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(225115648) a SnakeCell(726249984) a Sna...etc...
		firstCell: 	a SnakeCell(225115648)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(860167680) a SnakeCell(1052021248) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(225115648) a SnakeCell(726249984) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(225115648) a SnakeCell(726249984) a S...etc...
		firstCell: 	a SnakeCell(225115648)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(860167680) a SnakeCell(1052021248) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(225115648) a SnakeCell(726249984) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(860167680) a SnakeCell(1052021248) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(225115648) a SnakeCell(726249984) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(1009860096)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Character(Object)>>doesNotUnderstand: #+
[ :element | element perform: selector with: self ] in SmallInteger(Number)>>adaptToCollection:andSend:
ByteString(SequenceableCollection)>>collect:
SmallInteger(Number)>>adaptToCollection:andSend:
ByteString(Collection)>>+
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: This block accepts 0 arguments, but was called with 1 argument.
23 June 2017 1:13:21.603122 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

BlockClosure(Object)>>error:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		aString: 	'This block accepts 0 arguments, but was called with 1 argument.'
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	114
		numArgs: 	0


BlockClosure>>numArgsError:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		numArgsForInvocation: 	1
		printNArgs: 	[ :n | 
n printString , ' argument'
	,
		(n = 1
			ifTrue: [ '' ]
	...etc...
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	114
		numArgs: 	0


BlockClosure>>value:
	Receiver: [ cells removeLast ]
	Arguments and temporary variables: 
		anArg: 	1
		newContext: 	nil
		ncv: 	nil
	Receiver's instance variables: 
		outerContext: 	SnakeModel>>respawn:
		startpc: 	114
		numArgs: 	0


SmallInteger(Number)>>to:do:
	Receiver: 1
	Arguments and temporary variables: 
		stop: 	3
		aBlock: 	[ cells removeLast ]
		nextValue: 	1
	Receiver's instance variables: 
1

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(956259840) a SnakeCell(91509248) a Snak...etc...
		firstCell: 	a SnakeCell(956259840)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(397639168) a SnakeCell(152384000) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(956259840) a SnakeCell(91509248) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(956259840) a SnakeCell(91509248) a Sn...etc...
		firstCell: 	a SnakeCell(956259840)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(397639168) a SnakeCell(152384000) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(956259840) a SnakeCell(91509248) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(397639168) a SnakeCell(152384000) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(956259840) a SnakeCell(91509248) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(1042464256)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
BlockClosure(Object)>>error:
BlockClosure>>numArgsError:
BlockClosure>>value:
SmallInteger(Number)>>to:do:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SnakeGame class did not understand #rows
23 June 2017 1:17:58.482531 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeGame class(Object)>>doesNotUnderstand: #rows
	Receiver: SnakeGame
	Arguments and temporary variables: 
		aMessage: 	rows
		exception: 	MessageNotUnderstood: SnakeGame class>>rows
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addControls->SnakeGame>>#addControls #addKeyLis...etc...
		format: 	65541
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SnakeGame
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#snake_game
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		cells: 	an OrderedCollection(a SnakeCell(497537536))
		firstCell: 	a SnakeCell(497537536)
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(885784064) a SnakeCell(1016115712) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(497537536))
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(497537536))
		firstCell: 	a SnakeCell(497537536)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(885784064) a SnakeCell(1016115712) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(497537536))
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(885784064) a SnakeCell(1016115712) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(497537536))
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(199507456)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeGame class(Object)>>doesNotUnderstand: #rows
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

23 June 2017 1:42:11.74642 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1513@487)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(680302336) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1513@487)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1513@487)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(680302336) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1513@487)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1513@487)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(680302336) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1513@487)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1513@487)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(680302336) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1513@487)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(84@278.0) corner: (100@294.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(84@278) mouseUp 2107873 nil]
		targetOffset: 	(60.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2107873 84 278 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(84@278.0) corner: (100@294.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(84@278) mouseUp 2107873 nil]
		targetOffset: 	(60.0@5.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2107873 84 278 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	2107925
		lastStepMessage: 	nil
		lastCycleTime: 	2107947
		alarms: 	a Heap()
		lastAlarmTime: 	2107925
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ Smalltalk snapshot: true andQuit: true ] in WorldState class>>saveAndQuit
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
WorldState class>>saveAndQuit
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ].
		self showShortcut ].
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Please use veryDeepCopy
23 June 2017 2:00:29.706081 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>error:
	Receiver: a SnakeCell(132028160)
	Arguments and temporary variables: 
		aString: 	'Please use veryDeepCopy'
	Receiver's instance variables: 
		bounds: 	(713.0@355.0) corner: (733.0@375.0)
		owner: 	a Morph(293795584)
		submorphs: 	an Array(a StringMorph(761238272)'')
		fullBounds: 	(713.0@355.0) corner: (733.0@375.0)
		color: 	Color lightGray
		extension: 	a MorphExtension (498342144)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(761238272)''
		parent: 	<<error during printing>>

SnakeCell(Morph)>>deepCopy
	Receiver: a SnakeCell(132028160)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(713.0@355.0) corner: (733.0@375.0)
		owner: 	a Morph(293795584)
		submorphs: 	an Array(a StringMorph(761238272)'')
		fullBounds: 	(713.0@355.0) corner: (733.0@375.0)
		color: 	Color lightGray
		extension: 	a MorphExtension (498342144)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(761238272)''
		parent: 	<<error during printing>>

Array(Object)>>deepCopy
	Receiver: an Array(a SnakeCell(226765568) a SnakeCell(23400192) a SnakeCell(298056960) a SnakeCell(1...etc...
	Arguments and temporary variables: 
		newObject: 	#(nil nil nil nil nil nil nil nil nil nil)
		class: 	Array
		index: 	4
	Receiver's instance variables: 
an Array(a SnakeCell(226765568) a SnakeCell(23400192) a SnakeCell(298056960) a SnakeCell(1...etc...

OrderedCollection(Object)>>deepCopy
	Receiver: an OrderedCollection(a SnakeCell(226765568) a SnakeCell(23400192) a SnakeCell(298056960) a...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(a SnakeCell(226765568) a SnakeCell(23400192) a SnakeCell(298056...etc...
		firstIndex: 	1
		lastIndex: 	4


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(226765568) a SnakeCell(23400192) a Snak...etc...
		firstCell: 	a SnakeCell(75145472)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(226765568) a SnakeCell(23400192) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(250100480) a SnakeCell(817032960) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(226765568) a SnakeCell(23400192) a Sn...etc...
		firstCell: 	a SnakeCell(226765568)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(226765568) a SnakeCell(23400192) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(250100480) a SnakeCell(817032960) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(226765568) a SnakeCell(23400192) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(250100480) a SnakeCell(817032960) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(199381248)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>error:
SnakeCell(Morph)>>deepCopy
Array(Object)>>deepCopy
OrderedCollection(Object)>>deepCopy
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Please use veryDeepCopy
23 June 2017 2:00:29.729012 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SnakeCell(Object)>>error:
	Receiver: a SnakeCell(423183616)
	Arguments and temporary variables: 
		aString: 	'Please use veryDeepCopy'
	Receiver's instance variables: 
		bounds: 	(713.0@355.0) corner: (733.0@375.0)
		owner: 	a Morph(1055471360)
		submorphs: 	an Array(a StringMorph(22237952)'')
		fullBounds: 	(713.0@355.0) corner: (733.0@375.0)
		color: 	Color lightGray
		extension: 	a MorphExtension (91642112)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(22237952)''
		parent: 	<<error during printing>>

SnakeCell(Morph)>>deepCopy
	Receiver: a SnakeCell(423183616)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(713.0@355.0) corner: (733.0@375.0)
		owner: 	a Morph(1055471360)
		submorphs: 	an Array(a StringMorph(22237952)'')
		fullBounds: 	(713.0@355.0) corner: (733.0@375.0)
		color: 	Color lightGray
		extension: 	a MorphExtension (91642112)
		borderWidth: 	1
		borderColor: 	Color gray
		target: 	nil
		actionSelector: 	#flash
		arguments: 	#()
		actWhen: 	#buttonUp
		oldColor: 	nil
		label: 	a StringMorph(22237952)''
		parent: 	<<error during printing>>

Array(Object)>>deepCopy
	Receiver: an Array(a SnakeCell(837792256) a SnakeCell(486965504) a SnakeCell(369580800) a SnakeCell(...etc...
	Arguments and temporary variables: 
		newObject: 	#(nil nil nil nil nil nil nil nil nil nil)
		class: 	Array
		index: 	4
	Receiver's instance variables: 
an Array(a SnakeCell(837792256) a SnakeCell(486965504) a SnakeCell(369580800) a SnakeCell(...etc...

OrderedCollection(Object)>>deepCopy
	Receiver: an OrderedCollection(a SnakeCell(837792256) a SnakeCell(486965504) a SnakeCell(369580800) ...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		array: 	an Array(a SnakeCell(837792256) a SnakeCell(486965504) a SnakeCell(36958...etc...
		firstIndex: 	1
		lastIndex: 	4


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(837792256) a SnakeCell(486965504) a Sna...etc...
		firstCell: 	a SnakeCell(1025560320)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(837792256) a SnakeCell(486965504) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(780694016) a SnakeCell(889076992) a ...etc...
		blueDirection: 	#south
		redDirection: 	#south
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(837792256) a SnakeCell(486965504) a S...etc...
		firstCell: 	a SnakeCell(837792256)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(837792256) a SnakeCell(486965504) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(780694016) a SnakeCell(889076992) a ...etc...
		blueDirection: 	#south
		redDirection: 	#south
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(837792256) a SnakeCell(486965504) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(780694016) a SnakeCell(889076992) a ...etc...
		blueDirection: 	#south
		redDirection: 	#south
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(944263680)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SnakeCell(Object)>>error:
SnakeCell(Morph)>>deepCopy
Array(Object)>>deepCopy
OrderedCollection(Object)>>deepCopy
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #contents:
23 June 2017 2:27:21.999339 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ByteString(Object)>>doesNotUnderstand: #contents:
	Receiver: 'test'
	Arguments and temporary variables: 
		aMessage: 	contents: 4
		exception: 	MessageNotUnderstood: ByteString>>contents:
		resumeValue: 	nil
	Receiver's instance variables: 
'test'

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(129158400) a SnakeCell(164252928) a Sna...etc...
		firstCell: 	a SnakeCell(129158400)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(129158400) a SnakeCell(164252928) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(12496128) a SnakeCell(643305216) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(129158400) a SnakeCell(164252928) a S...etc...
		firstCell: 	a SnakeCell(129158400)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(129158400) a SnakeCell(164252928) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(12496128) a SnakeCell(643305216) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(129158400) a SnakeCell(164252928) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(12496128) a SnakeCell(643305216) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(692778752)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #contents:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #contents:
23 June 2017 2:27:22.089446 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ByteString(Object)>>doesNotUnderstand: #contents:
	Receiver: 'test'
	Arguments and temporary variables: 
		aMessage: 	contents: 4
		exception: 	MessageNotUnderstood: ByteString>>contents:
		resumeValue: 	nil
	Receiver's instance variables: 
'test'

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(882249472) a SnakeCell(354087168) a Sna...etc...
		firstCell: 	a SnakeCell(882249472)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(882249472) a SnakeCell(354087168) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(469608704) a SnakeCell(711619328) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(882249472) a SnakeCell(354087168) a S...etc...
		firstCell: 	a SnakeCell(882249472)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(882249472) a SnakeCell(354087168) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(469608704) a SnakeCell(711619328) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(882249472) a SnakeCell(354087168) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(469608704) a SnakeCell(711619328) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(112030976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #contents:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #contents:
23 June 2017 2:27:22.098736 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ByteString(Object)>>doesNotUnderstand: #contents:
	Receiver: 'test'
	Arguments and temporary variables: 
		aMessage: 	contents: 4
		exception: 	MessageNotUnderstood: ByteString>>contents:
		resumeValue: 	nil
	Receiver's instance variables: 
'test'

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(299185408) a SnakeCell(607806720) a Sna...etc...
		firstCell: 	a SnakeCell(299185408)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(299185408) a SnakeCell(607806720) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(902108928) a SnakeCell(513962752) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(299185408) a SnakeCell(607806720) a S...etc...
		firstCell: 	a SnakeCell(299185408)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(299185408) a SnakeCell(607806720) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(902108928) a SnakeCell(513962752) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(299185408) a SnakeCell(607806720) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(902108928) a SnakeCell(513962752) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(214137600)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #contents:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #contents:
23 June 2017 2:27:22.103659 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ByteString(Object)>>doesNotUnderstand: #contents:
	Receiver: 'test'
	Arguments and temporary variables: 
		aMessage: 	contents: 4
		exception: 	MessageNotUnderstood: ByteString>>contents:
		resumeValue: 	nil
	Receiver's instance variables: 
'test'

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(24530176) a SnakeCell(847723264) a Snak...etc...
		firstCell: 	a SnakeCell(24530176)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(24530176) a SnakeCell(847723264) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(208400128) a SnakeCell(35659008) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(24530176) a SnakeCell(847723264) a Sn...etc...
		firstCell: 	a SnakeCell(24530176)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(24530176) a SnakeCell(847723264) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(208400128) a SnakeCell(35659008) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(24530176) a SnakeCell(847723264) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(208400128) a SnakeCell(35659008) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(736524032)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #contents:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #contents:
23 June 2017 2:27:22.109447 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ByteString(Object)>>doesNotUnderstand: #contents:
	Receiver: 'test'
	Arguments and temporary variables: 
		aMessage: 	contents: 4
		exception: 	MessageNotUnderstood: ByteString>>contents:
		resumeValue: 	nil
	Receiver's instance variables: 
'test'

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(589949696) a SnakeCell(491722496) a Sna...etc...
		firstCell: 	a SnakeCell(589949696)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(589949696) a SnakeCell(491722496) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(149045504) a SnakeCell(40509184) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(589949696) a SnakeCell(491722496) a S...etc...
		firstCell: 	a SnakeCell(589949696)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(589949696) a SnakeCell(491722496) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(149045504) a SnakeCell(40509184) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(589949696) a SnakeCell(491722496) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(149045504) a SnakeCell(40509184) a S...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(605061376)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #contents:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteString did not understand #contents:
23 June 2017 2:27:22.116177 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

ByteString(Object)>>doesNotUnderstand: #contents:
	Receiver: 'test'
	Arguments and temporary variables: 
		aMessage: 	contents: 4
		exception: 	MessageNotUnderstood: ByteString>>contents:
		resumeValue: 	nil
	Receiver's instance variables: 
'test'

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		cells: 	an OrderedCollection(a SnakeCell(93077760) a SnakeCell(1015153408) a Sna...etc...
		firstCell: 	a SnakeCell(93077760)
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(93077760) a SnakeCell(1015153408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1003251456) a SnakeCell(679896320) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(93077760) a SnakeCell(1015153408) a S...etc...
		firstCell: 	a SnakeCell(93077760)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(93077760) a SnakeCell(1015153408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1003251456) a SnakeCell(679896320) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(93077760) a SnakeCell(1015153408) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1003251456) a SnakeCell(679896320) a...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(826558208)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #contents:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#row was sent to nil
23 June 2017 2:35:46.069698 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

UndefinedObject(Object)>>doesNotUnderstand: #row
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: receiver of "row" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		newCells: 	an OrderedCollection()
		firstCell: 	nil
		snakeSize: 	4
		spawnPlace: 	20
		offset: 	1
		newCell: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(936909568) a SnakeCell(892746496) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(996389120) a SnakeCell(238217472) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(936909568) a SnakeCell(892746496) a S...etc...
		firstCell: 	a SnakeCell(936909568)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(936909568) a SnakeCell(892746496) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(996389120) a SnakeCell(238217472) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(936909568) a SnakeCell(892746496) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(996389120) a SnakeCell(238217472) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(1068056832)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #row
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #streamContents:
23 June 2017 2:52:57.474647 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #streamContents:
	Receiver: a TextMorph(123433728)
	Arguments and temporary variables: 
		aMessage: 	streamContents: [ :stream | 
stream
	nextPutAll: 'respawn for snake: ...etc...
		exception: 	MessageNotUnderstood: TextMorph>>streamContents:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(733.0@280.0) corner: (762.0@301.0)
		owner: 	a Morph(502731520)
		submorphs: 	#()
		fullBounds: 	(733.0@280.0) corner: (762.0@301.0)
		color: 	Color white
		extension: 	a MorphExtension (678849280) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '4'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color lightGray
		newCell: 	nil
		cells: 	an OrderedCollection(a SnakeCell(913506560) a SnakeCell(947919104) a Sna...etc...
		firstCell: 	nil
		snakeSize: 	4
		spawnPlace: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(913506560) a SnakeCell(947919104) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(569475840) a SnakeCell(923330304) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveNorth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(569475840) a SnakeCell(923330304) a S...etc...
		firstCell: 	a SnakeCell(569475840)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color lightGray
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(913506560) a SnakeCell(947919104) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(569475840) a SnakeCell(923330304) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(913506560) a SnakeCell(947919104) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(569475840) a SnakeCell(923330304) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(394078976)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #streamContents:
SnakeModel>>respawn:
SnakeModel>>moveNorth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of TextMorph did not understand #streamContents:
23 June 2017 2:52:57.678263 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

TextMorph(Object)>>doesNotUnderstand: #streamContents:
	Receiver: a TextMorph(953533184)
	Arguments and temporary variables: 
		aMessage: 	streamContents: [ :stream | 
stream
	nextPutAll: 'respawn for snake: ...etc...
		exception: 	MessageNotUnderstood: TextMorph>>streamContents:
		resumeValue: 	nil
	Receiver's instance variables: 
		bounds: 	(733.0@280.0) corner: (762.0@301.0)
		owner: 	a Morph(604717824)
		submorphs: 	#()
		fullBounds: 	(733.0@280.0) corner: (762.0@301.0)
		color: 	Color white
		extension: 	a MorphExtension (174948096) [other:  (kmDispatcher -> a KMDispatche...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for '1'
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	(10@0)
		defaultColor: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		newCell: 	nil
		cells: 	an OrderedCollection(a SnakeCell(451300096))
		firstCell: 	nil
		snakeSize: 	1
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(89006336))
		redCells: 	an OrderedCollection(a SnakeCell(451300096))
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveNorth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(451300096))
		firstCell: 	a SnakeCell(451300096)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(89006336))
		redCells: 	an OrderedCollection(a SnakeCell(451300096))
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(89006336))
		redCells: 	an OrderedCollection(a SnakeCell(451300096))
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(425024256)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
TextMorph(Object)>>doesNotUnderstand: #streamContents:
SnakeModel>>respawn:
SnakeModel>>moveNorth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Color did not understand #do:
23 June 2017 2:54:42.894426 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Color(Object)>>doesNotUnderstand: #do:
	Receiver: Color red
	Arguments and temporary variables: 
		aMessage: 	do: [ :v | self nextPut: v ]
		exception: 	MessageNotUnderstood: Color>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1072693248
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


WriteStream(Stream)>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		aCollection: 	Color red
	Receiver's instance variables: 
		collection: 	'respawn for snake:                                                ...etc...
		position: 	19
		readLimit: 	0
		writeLimit: 	100


WriteStream>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Instance of Color did not understand #do:
23 June 2017 2:54:43.279294 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Color(Object)>>doesNotUnderstand: #do:
	Receiver: Color red
	Arguments and temporary variables: 
		aMessage: 	do: [ :v | self nextPut: v ]
		exception: 	MessageNotUnderstood: Color>>do:
		resumeValue: 	nil
	Receiver's instance variables: 
		rgb: 	1072693248
		cachedDepth: 	32
		cachedBitPattern: 	a Bitmap of length 1
		alpha: 	255


WriteStream(Stream)>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		aCollection: 	Color red
	Receiver's instance variables: 
		collection: 	'respawn for snake:                                                ...etc...
		position: 	19
		readLimit: 	0
		writeLimit: 	100


WriteStream>>nextPutAll:
	Receiver: a WriteStream
	Arguments and temporary variables: 
		aCollection: 	Color red
		newEnd: 	nil
	Receiver's instance variables: 
		collection: 	'respawn for snake:                                                ...etc...
		position: 	19
		readLimit: 	0
		writeLimit: 	100


[ :stream | 
stream
	nextPutAll: 'respawn for snake: ';
	nextPutAll: cellColor ] in SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		msg: 	nil
		newCell: 	nil
		cells: 	an OrderedCollection(a SnakeCell(499937024) a SnakeCell(412327168) a Sna...etc...
		firstCell: 	nil
		snakeSize: 	4
		spawnPlace: 	6
		stream: 	a WriteStream
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(56745216) a SnakeCell(234643200) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(499937024) a SnakeCell(412327168) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


String class(SequenceableCollection class)>>new:streamContents:
	Receiver: String
	Arguments and temporary variables: 
		newSize: 	100
		blockWithArg: 	[ :stream | 
stream
	nextPutAll: 'respawn for snake: ';
	nextPutA...etc...
		stream: 	a WriteStream
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 316)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


String class(SequenceableCollection class)>>streamContents:
	Receiver: String
	Arguments and temporary variables: 
		blockWithArg: 	[ :stream | 
stream
	nextPutAll: 'respawn for snake: ';
	nextPutA...etc...
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(size 316)
		format: 	0
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{ByteString. WideString. Symbol}
		name: 	#String
		classPool: 	a Dictionary(#AsciiOrder->#[0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Strings'
		traitComposition: 	{}
		localSelectors: 	nil


SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		msg: 	nil
		newCell: 	nil
		cells: 	an OrderedCollection(a SnakeCell(499937024) a SnakeCell(412327168) a Sna...etc...
		firstCell: 	nil
		snakeSize: 	4
		spawnPlace: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(56745216) a SnakeCell(234643200) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(499937024) a SnakeCell(412327168) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(499937024) a SnakeCell(412327168) a S...etc...
		firstCell: 	a SnakeCell(499937024)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(56745216) a SnakeCell(234643200) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(499937024) a SnakeCell(412327168) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(56745216) a SnakeCell(234643200) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(499937024) a SnakeCell(412327168) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(197262592)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Color(Object)>>doesNotUnderstand: #do:
WriteStream(Stream)>>nextPutAll:
WriteStream>>nextPutAll:
[ :stream | 
stream
	nextPutAll: 'respawn for snake: ';
	nextPutAll: cellColor ] in SnakeModel>>respawn:
String class(SequenceableCollection class)>>new:streamContents:
String class(SequenceableCollection class)>>streamContents:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of SmallInteger did not understand #row
23 June 2017 2:56:07.481886 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

SmallInteger(Object)>>doesNotUnderstand: #row
	Receiver: 6
	Arguments and temporary variables: 
		aMessage: 	row
		exception: 	MessageNotUnderstood: SmallInteger>>row
		resumeValue: 	nil
	Receiver's instance variables: 
6

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		msg: 	'respawn for snake: Color red'
		newCell: 	a SnakeCell(427820288)
		cells: 	an OrderedCollection(a SnakeCell(427820288))
		firstCell: 	a SnakeCell(427820288)
		snakeSize: 	4
		spawnPlace: 	6
		offset: 	1
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(600864512) a SnakeCell(191763200) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(427820288))
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(427820288))
		firstCell: 	a SnakeCell(665426176)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(600864512) a SnakeCell(191763200) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(427820288))
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(600864512) a SnakeCell(191763200) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(427820288))
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(746844416)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
SmallInteger(Object)>>doesNotUnderstand: #row
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 1
23 June 2017 2:57:26.353754 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

OrderedCollection(Object)>>errorSubscriptBounds:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		index: 	1
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection>>at:
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 
		anInteger: 	1
		index: 	3
	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


OrderedCollection(SequenceableCollection)>>first
	Receiver: an OrderedCollection()
	Arguments and temporary variables: 

	Receiver's instance variables: 
		array: 	#(nil nil nil nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	2


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection()
		firstCell: 	nil
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	nil
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(328519936) a SnakeCell(257870080) a...etc...
		redCells: 	an OrderedCollection()
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(328519936) a SnakeCell(257870080) a...etc...
		redCells: 	an OrderedCollection()
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(916943104)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
OrderedCollection(Object)>>errorSubscriptBounds:
OrderedCollection>>at:
OrderedCollection(SequenceableCollection)>>first
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 26
23 June 2017 3:05:42.607328 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		msg: 	'respawn for snake: Color blue'
		newCell: 	a SnakeCell(398111488)
		cells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a Snak...etc...
		snakeSize: 	8
		spawnPlace: 	20
		offset: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(158868736) a SnakeCell(785209088) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a Sn...etc...
		firstCell: 	a SnakeCell(386652928)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(158868736) a SnakeCell(785209088) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(158868736) a SnakeCell(785209088) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(1038680320)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 26
23 June 2017 3:05:50.666772 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		msg: 	'respawn for snake: Color blue'
		newCell: 	a SnakeCell(398111488)
		cells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a Snak...etc...
		snakeSize: 	21
		spawnPlace: 	20
		offset: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(158868736) a SnakeCell(785209088) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a Sn...etc...
		firstCell: 	a SnakeCell(386652928)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(158868736) a SnakeCell(785209088) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(578238208) a SnakeCell(12850432) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(158868736) a SnakeCell(785209088) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(1038680320)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 26
23 June 2017 3:05:50.684869 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		msg: 	'respawn for snake: Color red'
		newCell: 	a SnakeCell(158868736)
		cells: 	an OrderedCollection(a SnakeCell(290570496) a SnakeCell(244275456) a Sna...etc...
		snakeSize: 	24
		spawnPlace: 	6
		offset: 	20
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(623133440) a SnakeCell(578238208) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(290570496) a SnakeCell(244275456) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveNorth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(290570496) a SnakeCell(244275456) a S...etc...
		firstCell: 	a SnakeCell(158868736)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(623133440) a SnakeCell(578238208) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(290570496) a SnakeCell(244275456) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(623133440) a SnakeCell(578238208) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(290570496) a SnakeCell(244275456) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(1038680320)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeModel>>respawn:
SnakeModel>>moveNorth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 26
23 June 2017 3:15:25.495168 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(491410688) a SnakeCell(991602432) a SnakeCell(318989056) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(491410688) a SnakeCell(991602432) a SnakeCell(318989056) a S...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(491410688) a SnakeCell(991602432) a SnakeCell(318989056) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(491410688) a SnakeCell(991602432) a SnakeCell(318989056) a S...etc...

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		msg: 	'respawn for snake: Color blue'
		newCell: 	a SnakeCell(300312832)
		cells: 	an OrderedCollection(a SnakeCell(774959360) a SnakeCell(254176000) a Sna...etc...
		snakeSize: 	8
		spawnPlace: 	20
		offset: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(774959360) a SnakeCell(254176000) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(594820864) a SnakeCell(618417408) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(774959360) a SnakeCell(254176000) a S...etc...
		firstCell: 	a SnakeCell(172316928)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(774959360) a SnakeCell(254176000) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(594820864) a SnakeCell(618417408) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(774959360) a SnakeCell(254176000) a...etc...
		redCells: 	an OrderedCollection(a SnakeCell(594820864) a SnakeCell(618417408) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(142663424)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 26
23 June 2017 3:22:26.315838 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...
	Arguments and temporary variables: 
		index: 	26
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color blue
		msg: 	'respawn for snake: Color blue'
		newCell: 	a SnakeCell(285054208)
		cells: 	an OrderedCollection(a SnakeCell(947561728) a SnakeCell(1005508352) a Sn...etc...
		snakeSize: 	8
		spawnPlace: 	20
		offset: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(947561728) a SnakeCell(1005508352) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1033810688) a SnakeCell(1040316672) ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveSouth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(947561728) a SnakeCell(1005508352) a ...etc...
		firstCell: 	a SnakeCell(1060275456)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color blue
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(947561728) a SnakeCell(1005508352) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1033810688) a SnakeCell(1040316672) ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(947561728) a SnakeCell(1005508352) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(1033810688) a SnakeCell(1040316672) ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(129092352)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeModel>>respawn:
SnakeModel>>moveSouth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
23 June 2017 3:24:24.580194 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(198347008) a SnakeCell(724079360) a SnakeCell(889476864) a S...etc...

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		offsetSign: 	-1
		msg: 	'respawn for snake: Color red'
		newCell: 	a SnakeCell(866072320)
		cells: 	an OrderedCollection(a SnakeCell(433500416) a SnakeCell(506980608) a Sna...etc...
		snakeSize: 	8
		spawnPlace: 	6
		offset: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(682242816) a SnakeCell(1043576576) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(433500416) a SnakeCell(506980608) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>moveEast:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(433500416) a SnakeCell(506980608) a S...etc...
		firstCell: 	a SnakeCell(99475712)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(682242816) a SnakeCell(1043576576) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(433500416) a SnakeCell(506980608) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(682242816) a SnakeCell(1043576576) ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(433500416) a SnakeCell(506980608) a ...etc...
		blueDirection: 	#south
		redDirection: 	#east
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(129092352)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeModel>>respawn:
SnakeModel>>moveEast:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 0
23 June 2017 3:24:24.845523 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Array(Object)>>errorSubscriptBounds:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

Array(Object)>>at:
	Receiver: an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...
	Arguments and temporary variables: 
		index: 	0
	Receiver's instance variables: 
an Array(an Array(a SnakeCell(562684672) a SnakeCell(597575936) a SnakeCell(755241216) a S...etc...

SnakeModel>>respawn:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		cellColor: 	Color red
		offsetSign: 	-1
		msg: 	'respawn for snake: Color red'
		newCell: 	a SnakeCell(79179008)
		cells: 	an OrderedCollection(a SnakeCell(216350464) a SnakeCell(512969984) a Sna...etc...
		snakeSize: 	19
		spawnPlace: 	6
		offset: 	6
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(417180928) a SnakeCell(26283776) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(216350464) a SnakeCell(512969984) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>moveNorth:
	Receiver: <<error during printing>>
	Arguments and temporary variables: 
		ordered: 	an OrderedCollection(a SnakeCell(216350464) a SnakeCell(512969984) a S...etc...
		firstCell: 	a SnakeCell(158868736)
		newCell: 	nil
		lastCell: 	nil
		playerColor: 	Color red
	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(417180928) a SnakeCell(26283776) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(216350464) a SnakeCell(512969984) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


SnakeModel>>executeStep
	Receiver: <<error during printing>>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		contents: 	nil
		numberOfColumns: 	nil
		numberOfRows: 	nil
		board: 	a SnakeGame
		blueCells: 	an OrderedCollection(a SnakeCell(417180928) a SnakeCell(26283776) a ...etc...
		redCells: 	an OrderedCollection(a SnakeCell(216350464) a SnakeCell(512969984) a ...etc...
		blueDirection: 	#south
		redDirection: 	#north
		color: 	nil


[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
	Receiver: a SnakeGame
	Arguments and temporary variables: 
		redCell: 	nil
		blueCell: 	nil
		winner: 	nil
		delay: 	a Delay(200 msecs)
	Receiver's instance variables: 
		container: 	a Morph(1038680320)
		model: 	<<error during printing>>

[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay ...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SnakeGame>>start
		startpc: 	201
		numArgs: 	0



--- The full stack ---
Array(Object)>>errorSubscriptBounds:
Array(Object)>>at:
SnakeModel>>respawn:
SnakeModel>>moveNorth:
SnakeModel>>executeStep
[ [ winner isNil ]
	whileTrue: [ | delay |
		delay := Delay forMilliseconds: 200.
		delay wait.
		model executeStep.
		winner := model checkWinner ] ] in SnakeGame>>start
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

23 June 2017 3:28:31.618945 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(44266752) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(44266752) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(44266752) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(44266752) a RubCursor(646287872)...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(324@879.0) corner: (340@895.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(324@879) mouseOver 6370046 nil]
		targetOffset: 	(65.0@375.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6370046 324 879 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(324@879.0) corner: (340@895.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(324@879) mouseOver 6370046 nil]
		targetOffset: 	(65.0@375.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6370046 324 879 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6379678
		lastStepMessage: 	nil
		lastCycleTime: 	6379700
		alarms: 	a Heap()
		lastAlarmTime: 	6379678
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T13:42:11.536457+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

23 June 2017 6:30:55.577035 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@373)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@373)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	(46@375)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(324@879.0) corner: (340@895.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(324@879) mouseOver 6370046 nil]
		targetOffset: 	(65.0@375.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6370046 324 879 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(324@879.0) corner: (340@895.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(324@879) mouseOver 6370046 nil]
		targetOffset: 	(65.0@375.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6370046 324 879 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SearchMorph(292520704))(a SearchMorp...etc...
		lastStepTime: 	6379678
		lastStepMessage: 	nil
		lastCycleTime: 	6379700
		alarms: 	a Heap()
		lastAlarmTime: 	6379678
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

23 June 2017 6:35:11.297083 pm

VM: unix - i686 - linux-gnu - CoInterpreter VMMaker.oscog-eem.2231 uuid: de62947a-7f40-4977-a232-e06a3a80c939 May 31 2017
StackToRegisterMappingCogit VMMaker.oscog-eem.2227 uuid: 7ea146b4-39ce-4de7-afa3-a76ed1d1da35 May 31 2017
VM: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $ Date: Tue May 30 19:41:27 2017 -0700 $ Plugins: 201705310241 https://github.com/OpenSmalltalk/opensmalltalk-vm.git $

Image: Pharo6.0 [Latest update: #60499]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $]->$[ $}->${ )
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	47
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	54
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@411)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@411)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@411)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@411)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@411)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@411)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(357473024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1526@411)
		owner: 	a TransformWithLayoutMorph(466835968)
		submorphs: 	an Array(a RubPrimarySelectionMorph(711402752) a RubCursor(646287872...etc...
		fullBounds: 	(0@0) corner: (1526@411)
		color: 	Color transparent
		extension: 	a MorphExtension (615461376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(281681664)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color white
		margins: 	(6@6) corner: (6@6)
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a RubSmalltalkCodeMode
		cursor: 	a RubCursor(646287872)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubPluggableGetMenuPolicy
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(357473024)
	Receiver's instance variables: 
		bounds: 	(608@237.0) corner: (624@253.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(600@229) mouseOver 250420 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 250420 600 229 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(58125568)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(608@237.0) corner: (624@253.0)
		owner: 	a WorldMorph(562956288) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (5551872)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(600@229) mouseOver 250420 nil]
		targetOffset: 	(7.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 250420 600 229 0 0 0 1)
		lastKeyScanCode: 	19
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
		hand: 	a HandMorph(58125568)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(58125568))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(58125568))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(58125568))
		viewBox: 	(0@0) corner: (1855@1056)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(436128512))(a DropList...etc...
		lastStepTime: 	255498
		lastStepMessage: 	nil
		lastCycleTime: 	255520
		alarms: 	a Heap()
		lastAlarmTime: 	255498
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(58125568)


WorldMorph>>viewBox:
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1855@1056)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(562956288) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1855@1056)
		owner: 	nil
		submorphs: 	an Array(a MenuMorph(252727040) a TaskbarMorph(804941056) a Nautilus...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.295 g: 0.295 b: 0.295 alpha: 1.0)
		extension: 	a MorphExtension (841644544) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(562956288) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65549
		layout: 	a FixedLayout
		instanceVariables: 	nil
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#ExtraWorldList->#() )
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil
		announcer: 	nil


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	41
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	49
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2017-06-23T18:30:55.421747+02:00


SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>snapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ ^ SessionManager default snapshot: save andQuit: quit ] in SmalltalkImage>>snapshot:andQuit:
CurrentExecutionEnvironment class>>activate:for:
DefaultExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
DefaultExecutionEnvironment class>>beActiveDuring:
SmalltalkImage>>snapshot:andQuit:
[ (Smalltalk snapshot: true andQuit: false)
	ifFalse: [ UIManager default inform: 'Image saved' ] ] in ToolShortcutsCategory>>saveImage
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
Set>>do:
ToolShortcutsCategory(KMCategory)>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in KMDispatcher>>dispatch:inCategories:
OrderedCollection>>do:
KMDispatcher>>dispatch:inCategories:
KmGlobalDispatcher>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
KMDispatcher>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

