OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:39:49.682237+02:00' ],		#prior : OmReference [ 'Pharo.a2n1nu78s48lntpcyz4z691y', '84' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell |\r\tfirstCell := snake cells at: 1.\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'H\'\r\t\tifTrue: [  ].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell |\r\tfirstCell := snake cells at: 1.\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [ snake decreaseHealth. board messageArea content: ((snake color) asString) ].\r\tfirstCell label = \'H\'\r\t\tifTrue: [  ].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:39',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:41:11.219237+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell |\r\tfirstCell := snake cells at: 1.\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [ snake decreaseHealth. board messageArea content: ((snake color) asString) ].\r\tfirstCell label = \'H\'\r\t\tifTrue: [  ].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:39',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [  ].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:41',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:41:49.978237+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [  ].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:41',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [ \r\t\t\r\t\t].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:41',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:43:03.563237+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [ \r\t\t\r\t\t].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:41',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [ \r\t\t\tsnake increaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:43',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:43:22.321237+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [ \r\t\t\tsnake increaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r',			#stamp : 'p 6/25/2017 14:43',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [ \r\t\t\tsnake increaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r\t\t\r\tfirstCell artifact: nil.',			#stamp : 'p 6/25/2017 14:43',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:45:10.658237+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\t"health changes"\r\tfirstCell label = \'h\'\r\t\tifTrue: [\r\t\t\tsnake decreaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\tfirstCell label = \'H\'\r\t\tifTrue: [ \r\t\t\tsnake increaseHealth.\r\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t].\r\t\t\r\t"size changes"\t\r\tfirstCell label = \'s\'\r\t\tifTrue: [  ].\r\tfirstCell label = \'S\'\r\t\tifTrue: [  ].\r\t\t\r\tfirstCell artifact: nil.',			#stamp : 'p 6/25/2017 14:43',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label /= \'\'\r\t\tifTrue: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:45',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:45:48.448237+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\tself moveSnakes.\r\tself handleArtifacts.\r\tself updateTime.\r',			#stamp : 'p 6/25/2017 12:56',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\tself moveSnakes.\r\tself handleArtifacts.\r\tself checkForArtifact: redSnake.\r\tself checkForArtifact: blueSnake.\r\tself updateTime.\r',			#stamp : 'p 6/25/2017 14:45',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:46:50.807237+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label /= \'\'\r\t\tifTrue: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:45',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:46',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:48:38.703237+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifact:',			#protocol : #checking,			#sourceCode : 'activateArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:48',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:48:42.583237+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #checking,			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:48',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:48:48.194237+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'checkForArtifact:',			#protocol : #checking,			#sourceCode : 'checkForArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:46',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:48:55.354237+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifact:',			#protocol : #checking,			#sourceCode : 'activateArtifact: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:48',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:49:00.305237+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #checking,			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:48',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:48',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:49:22.377237+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\tself moveSnakes.\r\tself handleArtifacts.\r\tself checkForArtifact: redSnake.\r\tself checkForArtifact: blueSnake.\r\tself updateTime.\r',			#stamp : 'p 6/25/2017 14:45',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\tself moveSnakes.\r\tself handleArtifacts.\r\tself activateArtifactFor: redSnake.\r\tself activateArtifactFor: blueSnake.\r\tself updateTime.\r',			#stamp : 'p 6/25/2017 14:49',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:49:41.961237+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\tsnake increaseHealth.\r\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:48',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:49',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:49:59.296237+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:49',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tboard messageArea contents: textOutput.\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:49',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:51:13.923237+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'getOppositeDirection:',			#protocol : #direction,			#sourceCode : 'getOppositeDirection: dir\r\tdir = #north\r\t\tifTrue: [ ^#south ].\r\tdir = #south\r\t\tifTrue: [ ^#north ].\r\tdir = #east\r\t\tifTrue: [ ^#west ].\r\tdir = #west\r\t\tifTrue: [ ^#east ].',			#stamp : 'p 6/25/2017 14:51',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:51:13.948237+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'getOppositeDirection:',			#protocol : #direction,			#sourceCode : 'getOppositeDirection: dir\r\tdir = #north\r\t\tifTrue: [ ^#south ].\r\tdir = #south\r\t\tifTrue: [ ^#north ].\r\tdir = #east\r\t\tifTrue: [ ^#west ].\r\tdir = #west\r\t\tifTrue: [ ^#east ].',			#stamp : 'p 6/24/2017 16:53',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:51:22.348237+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseHealth,			#protocol : #'as yet unclassified',			#sourceCode : 'decreaseHealth\r\thealth := health - 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseHealth,			#protocol : #accessing,			#sourceCode : 'decreaseHealth\r\thealth := health - 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:51:22.426237+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseHealth,			#protocol : #'as yet unclassified',			#sourceCode : 'increaseHealth\r\thealth := health + 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseHealth,			#protocol : #accessing,			#sourceCode : 'increaseHealth\r\thealth := health + 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:52:20.446237+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction:',			#protocol : #accessing,			#sourceCode : 'direction: anObject\r\tdirection := anObject',			#stamp : 'p 6/25/2017 14:51',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction:',			#protocol : #accessing,			#sourceCode : 'direction: anObject\r\tdirection = (self getOppositeDirection: anObject)\r\t\tifFalse: [ direction := anObject ].',			#stamp : 'p 6/25/2017 14:52',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:53:35.003237+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #handleArtifacts,			#protocol : #'artifact handling',			#sourceCode : 'handleArtifacts\r\t\t| prob |\r\t\tprob := self generateRandomNumber: 100.\r\t\t\r\t\t(prob <= 5)\r\t\t\tifTrue: [\r\t\t\t\tself spawnArtifacts.\t\r\t\t\t]\r\t\t\tifFalse: [ \r\t\t\t\t"lower probability to despawn,\r\t\t\t\tso people get the chance to catch them"\r\t\t\t\t(prob > 97)\r\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\tself despawnArtifacts.\r\t\t\t\t\t].\r\t\t\t].',			#stamp : 'p 6/25/2017 12:59',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #handleArtifacts,			#protocol : #'artifact handling',			#sourceCode : 'handleArtifacts\r\t\t| prob |\r\t\tprob := self generateRandomNumber: 100.\r\t\t\r\t\t(prob <= 6)\r\t\t\tifTrue: [\r\t\t\t\tself spawnArtifacts.\t\r\t\t\t]\r\t\t\tifFalse: [ \r\t\t\t\t"lower probability to despawn,\r\t\t\t\tso people get the chance to catch them"\r\t\t\t\t(prob > 97)\r\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\tself despawnArtifacts.\r\t\t\t\t\t].\r\t\t\t].',			#stamp : 'p 6/25/2017 14:53',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:55:01.488237+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [  ].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [  ].\r\t\t\r\t\tboard messageArea contents: textOutput.\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:49',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [ \r\t\t\t\t].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [ \r\t\t\t\t].\r\t\t\r\t\tboard messageArea contents: textOutput.\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:55',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:55:32.553237+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color snakeSize health direction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #snakeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #direction,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#protocol : #modifying	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:55:38.790237+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseHealth,			#protocol : #accessing,			#sourceCode : 'decreaseHealth\r\thealth := health - 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseHealth,			#protocol : #modifying,			#sourceCode : 'decreaseHealth\r\thealth := health - 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:55:40.831237+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseHealth,			#protocol : #accessing,			#sourceCode : 'increaseHealth\r\thealth := health + 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseHealth,			#protocol : #modifying,			#sourceCode : 'increaseHealth\r\thealth := health + 1.',			#stamp : 'p 6/25/2017 14:37',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:55:51.381237+02:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r',			#stamp : 'p 6/25/2017 14:55',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:55:56.974237+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseSize,			#protocol : #modifying,			#sourceCode : 'decreaseSize',			#stamp : 'p 6/25/2017 14:55',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:56:48.955237+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [ \r\t\t\t\t].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [ \r\t\t\t\t].\r\t\t\r\t\tboard messageArea contents: textOutput.\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:55',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'activateArtifactFor:',			#protocol : #'artifact handling',			#sourceCode : 'activateArtifactFor: snake\r\t| firstCell textOutput |\r\tfirstCell := snake cells at: 1.\r\ttextOutput := ((snake color) asString).\r\t\r\r\tfirstCell label = \'\'\r\t\tifFalse: [ \r\t\t\t"health changes"\r\t\t\tfirstCell label = \'h\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'H\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseHealth.\r\t\t\t\t\ttextOutput := (textOutput,\' snake health: \',(snake health) asString ).\r\t\t\t\t].\r\t\t\r\t\t\t"size changes"\t\r\t\t\tfirstCell label = \'s\'\r\t\t\t\tifTrue: [\r\t\t\t\t\tsnake decreaseSize.\r\t\t\t\t\ttextOutput := (textOutput,\' snake size: \',(snake snakeSize) asString ).\r\t\t\t\t].\r\t\t\tfirstCell label = \'S\'\r\t\t\t\tifTrue: [ \r\t\t\t\t\tsnake increaseSize.\r\t\t\t\t\ttextOutput := (textOutput,\' snake size: \',(snake snakeSize) asString ).\r\t\t\t\t].\r\t\t\r\t\tboard messageArea contents: textOutput.\r\t\tfirstCell artifact: nil.\r\t].',			#stamp : 'p 6/25/2017 14:56',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:57:06.878237+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseSize,			#protocol : #modifying,			#sourceCode : 'decreaseSize',			#stamp : 'p 6/25/2017 14:55',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseSize,			#protocol : #modifying,			#sourceCode : 'decreaseSize\r\tsnakeSize := snakeSize - 1.',			#stamp : 'p 6/25/2017 14:57',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:57:22.454237+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r',			#stamp : 'p 6/25/2017 14:55',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\tsnakeSize := snakeSize + 1.',			#stamp : 'p 6/25/2017 14:57',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:58:26.482237+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseSize,			#protocol : #modifying,			#sourceCode : 'decreaseSize\r\tsnakeSize := snakeSize - 1.',			#stamp : 'p 6/25/2017 14:57',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseSize,			#protocol : #modifying,			#sourceCode : 'decreaseSize\r\t| lastCell |\r\t\r\tsnakeSize := snakeSize - 1.\r\tlastCell := cells at: (cells size).\r\tlastCell color: Color lightGray.',			#stamp : 'p 6/25/2017 14:58',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T14:59:31.331237+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseSize,			#protocol : #modifying,			#sourceCode : 'decreaseSize\r\t| lastCell |\r\t\r\tsnakeSize := snakeSize - 1.\r\tlastCell := cells at: (cells size).\r\tlastCell color: Color lightGray.',			#stamp : 'p 6/25/2017 14:58',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #decreaseSize,			#protocol : #modifying,			#sourceCode : 'decreaseSize\r\t| lastCell |\r\t\r\tsnakeSize := snakeSize - 1.\r\tlastCell := cells at: (cells size).\r\tlastCell color: Color lightGray.\r\tcells removeLast.',			#stamp : 'p 6/25/2017 14:59',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:00:08.394237+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\t\r\tblueSnake snakeSize: 4.\r\tblueSnake cells: OrderedCollection new.\r\tblueSnake color: Color blue.\r\tblueSnake health: 10.\r\tblueSnake direction: #south.\r\t\r\tredSnake snakeSize: 4.\r\tredSnake cells: OrderedCollection new.\r\tredSnake color: Color red.\r\tredSnake health: 10.\r\tredSnake direction: #north.\r\t\t\r\ttimer := 600.\r\trandom := Random new.\r\tartifactCells := OrderedCollection new.',			#stamp : 'p 6/25/2017 14:27',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\t\r\tblueSnake snakeSize: 4.\r\tblueSnake color: Color blue.\r\tblueSnake health: 10.\r\tblueSnake direction: #south.\r\t\r\tredSnake snakeSize: 4.\r\tredSnake color: Color red.\r\tredSnake health: 10.\r\tredSnake direction: #north.\r\t\t\r\ttimer := 600.\r\trandom := Random new.\r\tartifactCells := OrderedCollection new.',			#stamp : 'p 6/25/2017 15:00',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:00:17.251237+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color snakeSize health direction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #snakeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #direction,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'initialize - release'	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:00:19.920237+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color snakeSize health direction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #snakeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #direction,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#protocol : #'initialize - release'	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:00:24.658237+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color snakeSize health direction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #snakeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #direction,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#protocol : #initialize	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:00:46.873237+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tcells := OrderedCollection new.',			#stamp : 'p 6/25/2017 15:00',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:03:21.699237+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\tsnakeSize := snakeSize + 1.',			#stamp : 'p 6/25/2017 14:57',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\tlastCell color: Color lightGray.\r\tcells removeLast.',			#stamp : 'p 6/25/2017 15:03',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:03:26.093237+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\tlastCell color: Color lightGray.\r\tcells removeLast.',			#stamp : 'p 6/25/2017 15:03',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\tcells removeLast.',			#stamp : 'p 6/25/2017 15:03',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:03:38.764237+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\tcells removeLast.',			#stamp : 'p 6/25/2017 15:03',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\t\r\t\r\t\r\tcells addLast: newCell.',			#stamp : 'p 6/25/2017 15:03',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:04:15.466237+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\t\r\t\r\t\r\tcells addLast: newCell.',			#stamp : 'p 6/25/2017 15:03',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\t\r\tnewCell := self findValidNewCell: lastCell.\r\t\r\tcells addLast: newCell.',			#stamp : 'p 6/25/2017 15:04',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:04:25.902237+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpProtocolAddition {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color snakeSize health direction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #snakeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #direction,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#protocol : #search	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:05:10.642237+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y |\r\tx := previousCell position: x.',			#stamp : 'p 6/25/2017 15:05',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:05:34.557237+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y |\r\tx := previousCell position: x.',			#stamp : 'p 6/25/2017 15:05',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y |\r\tx := previousCell column.\r\ty := previousCell row.',			#stamp : 'p 6/25/2017 15:05',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:05:39.488237+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y |\r\tx := previousCell column.\r\ty := previousCell row.',			#stamp : 'p 6/25/2017 15:05',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y |\r\tx := previousCell column.\r\ty := previousCell row.\r\t\r\t',			#stamp : 'p 6/25/2017 15:05',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:07:04.263237+02:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y |\r\tx := previousCell column.\r\ty := previousCell row.\r\t\r\t',			#stamp : 'p 6/25/2017 15:05',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y board |\r\tx := previousCell column.\r\ty := previousCell row.\r\t\r\t',			#stamp : 'p 6/25/2017 15:07',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:07:26.210237+02:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y board |\r\tx := previousCell column.\r\ty := previousCell row.\r\t\r\t',			#stamp : 'p 6/25/2017 15:07',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y board |\r\tx := previousCell column.\r\ty := previousCell row.\r\tboard := (previousCell parent) board.\r\t\r\t',			#stamp : 'p 6/25/2017 15:07',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:10:56.195237+02:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: previousCell\r\t| x y board |\r\tx := previousCell column.\r\ty := previousCell row.\r\tboard := (previousCell parent) board.\r\t\r\t',			#stamp : 'p 6/25/2017 15:07',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: current\r\t| x y board above below left right |\r\tx := current column.\r\ty := current row.\r\tboard := (current parent) board.\r\t\r\tabove := board rows: y+1 at: x.\r\tbelow := board rows: y-1 at: x.\r\tleft := board rows: y at: x+1.\r\tright := board rows: y at: x-1. \r\t',			#stamp : 'p 6/25/2017 15:10',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:12:38.360237+02:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'findValidNewCell:',			#protocol : #search,			#sourceCode : 'findValidNewCell: current\r\t| x y board above below left right |\r\tx := current column.\r\ty := current row.\r\tboard := (current parent) board.\r\t\r\tabove := board rows: y+1 at: x.\r\tbelow := board rows: y-1 at: x.\r\tleft := board rows: y at: x+1.\r\tright := board rows: y at: x-1. \r\t',			#stamp : 'p 6/25/2017 15:10',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:12:54.168237+02:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color snakeSize health direction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #snakeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #direction,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color snakeSize health direction previousCell\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #snakeSize,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #direction,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #previousCell,					#parent : @31				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @31,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:14:02.556237+02:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #direction,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #direction,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\tplayer lastCell: lastCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:14:16.344237+02:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #cells class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #color class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #snakeSize class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #health class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #direction class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #previousCell class: Snake classVariable: false)'			}		]	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2017-06-25T15:14:16.365237+02:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction1:',			#protocol : #accessing,			#sourceCode : 'direction1: anObject\r\tdirection := anObject',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2017-06-25T15:14:16.376237+02:00' ],		#trigger : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #previousCell,			#protocol : #accessing,			#sourceCode : 'previousCell\r\t^ previousCell',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2017-06-25T15:14:16.385237+02:00' ],		#trigger : OmReference [ '53' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'previousCell:',			#protocol : #accessing,			#sourceCode : 'previousCell: anObject\r\tpreviousCell := anObject',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:14:25.895237+02:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction1:',			#protocol : #accessing,			#sourceCode : 'direction1: anObject\r\tdirection := anObject',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:14:43.288237+02:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #direction,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\tplayer lastCell: lastCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #direction,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\tplayer previousCell: lastCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:14:46.947237+02:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveNorth:',			#protocol : #direction,			#sourceCode : 'moveNorth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell row = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \r\t\t\t\tnewCell := board rows: (firstCell row)+1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveNorth:',			#protocol : #direction,			#sourceCode : 'moveNorth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell row = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \r\t\t\t\tnewCell := board rows: (firstCell row)+1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\tplayer previousCell: lastCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:14:51.883237+02:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveSouth:',			#protocol : #direction,			#sourceCode : 'moveSouth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell row = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \t\t\t\r\t\t\t\tnewCell := board rows: (firstCell row)-1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveSouth:',			#protocol : #direction,			#sourceCode : 'moveSouth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell row = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \t\t\t\r\t\t\t\tnewCell := board rows: (firstCell row)-1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\tplayer previousCell: lastCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:14:53.937237+02:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveWest:',			#protocol : #direction,			#sourceCode : 'moveWest: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)+1.\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveWest:',			#protocol : #direction,			#sourceCode : 'moveWest: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)+1.\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\tplayer previousCell: lastCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/25/2017 15:14',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:15:18.374237+02:00' ],		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\t\r\tnewCell := self findValidNewCell: lastCell.\r\t\r\tcells addLast: newCell.',			#stamp : 'p 6/25/2017 15:04',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\t\r\tcells addLast: previousCell.',			#stamp : 'p 6/25/2017 15:15',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:15:23.095237+02:00' ],		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell newCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\t\r\tcells addLast: previousCell.',			#stamp : 'p 6/25/2017 15:15',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #increaseSize,			#protocol : #modifying,			#sourceCode : 'increaseSize\r\t| lastCell |\r\t\r\tsnakeSize := snakeSize + 1.\r\tlastCell := cells at: (cells size).\r\t\r\tcells addLast: previousCell.',			#stamp : 'p 6/25/2017 15:15',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:21:04.881237+02:00' ],		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:17',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (6*offsetSign) at: ((spawnPlace+offset)*(-1)*(offsetSign))). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:21',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:22:51.853237+02:00' ],		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Artifact class',				#isMetaSide : true			},			#name : #'getNew:',			#protocol : #'intance creation',			#sourceCode : 'getNew: type\r\t(type = 1)\r\t\tifTrue: [ ^HealthDown new. ].\r\t(type = 2)\r\t\tifTrue: [ ^HealthUp new. ].\r\t(type = 3)\r\t\tifTrue: [ ^SizeDown new. ].\r\t(type = 4)\r\t\tifTrue: [ ^SizeUp new. ].\r\t^HealthDown new. "default"',			#stamp : 'p 6/24/2017 22:06',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Artifact class',				#isMetaSide : true			},			#name : #'getNew:',			#protocol : #'intance creation',			#sourceCode : 'getNew: type\r\t(type = 1)\r\t\tifTrue: [ ^HealthDown new. ].\r\t(type = 2)\r\t\tifTrue: [ ^HealthUp new. ].\r\t(type = 3)\r\t\tifTrue: [ ^SizeDown new. ].\r\t(type = 4)\r\t\tifTrue: [ ^SizeUp new. ].\r\t^SizeUp new. "default"',			#stamp : 'p 6/25/2017 15:22',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:23:23.956237+02:00' ],		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #spawnArtifacts,			#protocol : #'artifact handling',			#sourceCode : 'spawnArtifacts\r\t| x y |\r\tx := self generateRandomNumber: 25.\r\ty := self generateRandomNumber: 25.\r\t\r\t"there can\'t be a snake or other artifact there, we don\'t want too many artifacts"\r\t((artifactCells size <= 15) and: (self checkPosition: x@y))\r\t\tifTrue: [\r\t\t\t| type artifact newCell |\r\t\t\ttype := self generateRandomNumber: 4.\r\t\t\tartifact := Artifact getNew: type.\r\t\t\tnewCell := ((board rows at: x) at: y).\r\t\t\tnewCell artifact: artifact.\r\t\t\tartifactCells add: newCell.\r\t\t].\r\t',			#stamp : 'p 6/25/2017 13:00',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #spawnArtifacts,			#protocol : #'artifact handling',			#sourceCode : 'spawnArtifacts\r\t| x y |\r\tx := self generateRandomNumber: 25.\r\ty := self generateRandomNumber: 25.\r\t\r\t"there can\'t be a snake or other artifact there, we don\'t want too many artifacts"\r\t((artifactCells size <= 15) and: (self checkPosition: x@y))\r\t\tifTrue: [\r\t\t\t| type artifact newCell |\r\t\t\ttype := self generateRandomNumber: 4.\r\t\t\t"TODO set to type again"\r\t\t\tartifact := Artifact getNew: 5.\r\t\t\tnewCell := ((board rows at: x) at: y).\r\t\t\tnewCell artifact: artifact.\r\t\t\tartifactCells add: newCell.\r\t\t].\r\t',			#stamp : 'p 6/25/2017 15:23',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:24:46.418237+02:00' ],		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (6*offsetSign) at: ((spawnPlace+offset)*(-1)*(offsetSign))). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:21',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign) at: ((spawnPlace+offset)*(-1)*(offsetSign))). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:24',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:25:41.803237+02:00' ],		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign) at: ((spawnPlace+offset)*(-1)*(offsetSign))). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:24',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (6*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:25',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:26:23.353237+02:00' ],		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (6*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:25',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset < 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (6*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:26',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:27:03.404237+02:00' ],		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset < 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (6*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:26',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset < 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:27',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:27:19.570237+02:00' ],		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset < 6)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:27',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:27',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:28:39.261237+02:00' ],		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:27',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:28',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:30:12.349237+02:00' ],		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:28',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:30',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:31:57.090237+02:00' ],		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:30',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:31',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:34:30.087237+02:00' ],		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:34',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+(offset*(-1)))*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:34',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:37:58.567237+02:00' ],		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+(offset*(-1)))*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:34',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t"(offset <= 5)\r\t\t\tifTrue: [" newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. "]\r\t\t\tsince we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\t"ifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ]."\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:37',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:44:48.193237+02:00' ],		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'setDirection:',			#protocol : #accessing,			#sourceCode : 'setDirection: anObject\r\tdirection = (self getOppositeDirection: anObject)\r\t\tifFalse: [ direction := anObject ].',			#stamp : 'p 6/25/2017 15:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:45:05.532237+02:00' ],		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction:',			#protocol : #accessing,			#sourceCode : 'direction: anObject\r\tdirection = (self getOppositeDirection: anObject)\r\t\tifFalse: [ direction := anObject ].',			#stamp : 'p 6/25/2017 14:52',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction:',			#protocol : #accessing,			#sourceCode : 'direction: anObject\r\tdirection := anObject.',			#stamp : 'p 6/25/2017 15:45',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:46:02.657237+02:00' ],		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up red"\r\t\tifTrue: [ parent model redSnake direction: #north. "parent messageArea contents: \'up\'" ].\r\tkey = 31 "down red"\r\t\tifTrue: [ parent model redSnake direction: #south. "parent messageArea contents: \'down\'" ].\r\tkey = 29 "right red"\r\t\tifTrue: [ parent model redSnake direction: #east. "parent messageArea contents: \'right\'" ].\r\tkey = 28 "left red"\r\t\tifTrue: [ parent model redSnake direction: #west. "parent messageArea contents: \'left\'" ].\r\tkey = 119 "blue up (w)"\r\t\tifTrue: [ parent model blueSnake direction: #north. "parent messageArea contents: \'w\'" ].\r\tkey = 115 "blue down (s)"\r\t\tifTrue: [ parent model blueSnake direction: #south. "parent messageArea contents: \'s\'" ].\r\tkey = 100 "blue right (d)"\r\t\tifTrue: [ parent model blueSnake direction: #east. "parent messageArea contents: \'d\'" ].\r\tkey = 97 "blue left (a)"\r\t\tifTrue: [ parent model blueSnake direction: #west. "parent messageArea contents: \'a\'" ].',			#stamp : 'p 6/25/2017 14:31',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up red"\r\t\tifTrue: [ parent model redSnake setDirection: #north. "parent messageArea contents: \'up\'" ].\r\tkey = 31 "down red"\r\t\tifTrue: [ parent model redSnake setDirection: #south. "parent messageArea contents: \'down\'" ].\r\tkey = 29 "right red"\r\t\tifTrue: [ parent model redSnake setDirection: #east. "parent messageArea contents: \'right\'" ].\r\tkey = 28 "left red"\r\t\tifTrue: [ parent model redSnake setDirection: #west. "parent messageArea contents: \'left\'" ].\r\tkey = 119 "blue up (w)"\r\t\tifTrue: [ parent model blueSnake setDirection: #north. "parent messageArea contents: \'w\'" ].\r\tkey = 115 "blue down (s)"\r\t\tifTrue: [ parent model blueSnake setDirection: #south. "parent messageArea contents: \'s\'" ].\r\tkey = 100 "blue right (d)"\r\t\tifTrue: [ parent model blueSnake setDirection: #east. "parent messageArea contents: \'d\'" ].\r\tkey = 97 "blue left (a)"\r\t\tifTrue: [ parent model blueSnake setDirection: #west. "parent messageArea contents: \'a\'" ].',			#stamp : 'p 6/25/2017 15:46',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:46:38.588237+02:00' ],		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up red"\r\t\tifTrue: [ parent model redSnake setDirection: #north. "parent messageArea contents: \'up\'" ].\r\tkey = 31 "down red"\r\t\tifTrue: [ parent model redSnake setDirection: #south. "parent messageArea contents: \'down\'" ].\r\tkey = 29 "right red"\r\t\tifTrue: [ parent model redSnake setDirection: #east. "parent messageArea contents: \'right\'" ].\r\tkey = 28 "left red"\r\t\tifTrue: [ parent model redSnake setDirection: #west. "parent messageArea contents: \'left\'" ].\r\tkey = 119 "blue up (w)"\r\t\tifTrue: [ parent model blueSnake setDirection: #north. "parent messageArea contents: \'w\'" ].\r\tkey = 115 "blue down (s)"\r\t\tifTrue: [ parent model blueSnake setDirection: #south. "parent messageArea contents: \'s\'" ].\r\tkey = 100 "blue right (d)"\r\t\tifTrue: [ parent model blueSnake setDirection: #east. "parent messageArea contents: \'d\'" ].\r\tkey = 97 "blue left (a)"\r\t\tifTrue: [ parent model blueSnake setDirection: #west. "parent messageArea contents: \'a\'" ].',			#stamp : 'p 6/25/2017 15:46',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up red"\r\t\tifTrue: [ parent model redSnake direction: #north. "parent messageArea contents: \'up\'" ].\r\tkey = 31 "down red"\r\t\tifTrue: [ parent model redSnake direction: #south. "parent messageArea contents: \'down\'" ].\r\tkey = 29 "right red"\r\t\tifTrue: [ parent model redSnake direction: #east. "parent messageArea contents: \'right\'" ].\r\tkey = 28 "left red"\r\t\tifTrue: [ parent model redSnake direction: #west. "parent messageArea contents: \'left\'" ].\r\tkey = 119 "blue up (w)"\r\t\tifTrue: [ parent model blueSnake direction: #north. "parent messageArea contents: \'w\'" ].\r\tkey = 115 "blue down (s)"\r\t\tifTrue: [ parent model blueSnake direction: #south. "parent messageArea contents: \'s\'" ].\r\tkey = 100 "blue right (d)"\r\t\tifTrue: [ parent model blueSnake direction: #east. "parent messageArea contents: \'d\'" ].\r\tkey = 97 "blue left (a)"\r\t\tifTrue: [ parent model blueSnake direction: #west. "parent messageArea contents: \'a\'" ].',			#stamp : 'p 6/25/2017 15:46',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:46:58.523237+02:00' ],		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction:',			#protocol : #accessing,			#sourceCode : 'direction: anObject\r\tdirection := anObject.',			#stamp : 'p 6/25/2017 15:45',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'direction:',			#protocol : #accessing,			#sourceCode : 'direction: anObject\r\tdirection = (self getOppositeDirection: anObject)\r\t\tifFalse: [ direction := anObject ].',			#stamp : 'p 6/25/2017 15:46',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:47:12.637237+02:00' ],		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'forceDirection:',			#protocol : #accessing,			#sourceCode : 'forceDirection: anObject\r\tdirection := anObject.',			#stamp : 'p 6/25/2017 15:47',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:47:28.199237+02:00' ],		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake direction: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake direction: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t"(offset <= 5)\r\t\t\tifTrue: [" newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. "]\r\t\t\tsince we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\t"ifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ]."\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:37',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t"(offset <= 5)\r\t\t\tifTrue: [" newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. "]\r\t\t\tsince we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\t"ifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ]."\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:47',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:48:24.449237+02:00' ],		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t"(offset <= 5)\r\t\t\tifTrue: [" newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. "]\r\t\t\tsince we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\t"ifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ]."\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:47',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:48',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:52:41.981237+02:00' ],		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+offset)*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:48',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+((-1)*offset))*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:52',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:53:36.175237+02:00' ],		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+((-1)*offset))*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:52',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+((-1)*offset))*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:53',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:55:06.623237+02:00' ],		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+((-1)*offset))*(-1)*(offsetSign)). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:53',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredSnake forceDirection: #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake decreaseHealth.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueSnake forceDirection: #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\t(offset <= 5)\r\t\t\tifTrue: [ newCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace. ]\r\t\t\t"since we spawn the whole snake, we can only spawn five places down/up --> every additional cell is then left/right"\r\t\t\tifFalse: [ newCell := (board rows at: spawnPlace + (5*offsetSign)) at: ((spawnPlace+((-1)*(offsetSign)*offset))). ].\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/25/2017 15:55',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:57:28.758237+02:00' ],		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #spawnArtifacts,			#protocol : #'artifact handling',			#sourceCode : 'spawnArtifacts\r\t| x y |\r\tx := self generateRandomNumber: 25.\r\ty := self generateRandomNumber: 25.\r\t\r\t"there can\'t be a snake or other artifact there, we don\'t want too many artifacts"\r\t((artifactCells size <= 15) and: (self checkPosition: x@y))\r\t\tifTrue: [\r\t\t\t| type artifact newCell |\r\t\t\ttype := self generateRandomNumber: 4.\r\t\t\t"TODO set to type again"\r\t\t\tartifact := Artifact getNew: 5.\r\t\t\tnewCell := ((board rows at: x) at: y).\r\t\t\tnewCell artifact: artifact.\r\t\t\tartifactCells add: newCell.\r\t\t].\r\t',			#stamp : 'p 6/25/2017 15:23',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #spawnArtifacts,			#protocol : #'artifact handling',			#sourceCode : 'spawnArtifacts\r\t| x y |\r\tx := self generateRandomNumber: 25.\r\ty := self generateRandomNumber: 25.\r\t\r\t"there can\'t be a snake or other artifact there, we don\'t want too many artifacts"\r\t((artifactCells size <= 15) and: (self checkPosition: x@y))\r\t\tifTrue: [\r\t\t\t| type artifact newCell |\r\t\t\ttype := self generateRandomNumber: 4.\r\t\t\tartifact := Artifact getNew: type.\r\t\t\tnewCell := ((board rows at: x) at: y).\r\t\t\tnewCell artifact: artifact.\r\t\t\tartifactCells add: newCell.\r\t\t].\r\t',			#stamp : 'p 6/25/2017 15:57',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-25T15:57:53.860237+02:00' ],		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\t\r\tblueSnake snakeSize: 4.\r\tblueSnake color: Color blue.\r\tblueSnake health: 10.\r\tblueSnake direction: #south.\r\t\r\tredSnake snakeSize: 4.\r\tredSnake color: Color red.\r\tredSnake health: 10.\r\tredSnake direction: #north.\r\t\t\r\ttimer := 600.\r\trandom := Random new.\r\tartifactCells := OrderedCollection new.',			#stamp : 'p 6/25/2017 15:00',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\t\r\tblueSnake snakeSize: 4.\r\tblueSnake color: Color blue.\r\tblueSnake health: 10.\r\tblueSnake direction: #south.\r\t\r\tredSnake snakeSize: 4.\r\tredSnake color: Color red.\r\tredSnake health: 10.\r\tredSnake direction: #north.\r\t\t\r\ttimer := 600.\r\trandom := Random new.\r\tartifactCells := OrderedCollection new.',			#stamp : 'p 6/25/2017 15:57',			#package : #snake_game		}	}}