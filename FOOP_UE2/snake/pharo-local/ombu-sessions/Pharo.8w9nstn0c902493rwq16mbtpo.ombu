OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:17:04.228436+02:00' ],		#prior : OmReference [ 'Pharo.8pkrx749mmm579e75n7b7tft9', '60' ],		#self : OmReference [ '1' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakeGame\r\tinstanceVariableNames: \'container model rows messageArea keyListener\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #container,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #model,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #rows,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #messageArea,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #keyListener,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeGame class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeGame,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #SnakeGame\r\tinstanceVariableNames: \'startBtn container model rows messageArea keyListener\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeGame,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #startBtn,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #container,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #model,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #rows,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #messageArea,					#parent : @31				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeGame,						#isMetaSide : false					},					#name : #keyListener,					#parent : @31				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeGame class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeGame class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @31			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeGame,					#isMetaSide : false				},				#parent : @31,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:17:24.550436+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #addControls,			#protocol : #initialize,			#sourceCode : 'addControls\r\t| rowMorph startBtn |\r\trowMorph := Morph new \r\t\tlayoutPolicy: RowLayout new;\r\t\textent: 500@50;\r\t\tcolor: Color transparent.\r\tstartBtn := self createButton: \'Start\' onClickExecutes: [ self start ].\r\tmessageArea := self createTextArea: \'Welcome to Snake! (arrow keys control red, WASD controls blue)\'.\r\trowMorph addMorph: messageArea.\r\trowMorph addMorph: startBtn.\r\tcontainer addMorph: rowMorph.',			#stamp : 'p 6/24/2017 16:02',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #addControls,			#protocol : #initialize,			#sourceCode : 'addControls\r\t| rowMorph |\r\trowMorph := Morph new \r\t\tlayoutPolicy: RowLayout new;\r\t\textent: 500@50;\r\t\tcolor: Color transparent.\r\tstartBtn := self createButton: \'Start\' onClickExecutes: [ self start ].\r\tmessageArea := self createTextArea: \'Welcome to Snake! (arrow keys control red, WASD controls blue)\'.\r\trowMorph addMorph: messageArea.\r\trowMorph addMorph: startBtn.\r\tcontainer addMorph: rowMorph.',			#stamp : 'p 6/24/2017 19:17',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:18:07.069436+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:16',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\t\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:18',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:19:36.447436+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\t\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:18',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\tstartBtn setLabel: \'Game started!\'.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:19',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:20:37.991436+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\tstartBtn setLabel: \'Game started!\'.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:19',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\tstartBtn label: \'Game started!\'.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:20',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:21:04.992436+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\tstartBtn label: \'Game started!\'.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:20',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\tstartBtn at: startBtn label put: \'Game started!\'.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:21',			#package : #snake_game		}	}}