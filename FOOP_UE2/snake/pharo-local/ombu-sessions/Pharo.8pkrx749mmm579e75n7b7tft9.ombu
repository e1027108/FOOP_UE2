OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:40:40.022101+02:00' ],		#prior : OmReference [ 'Pharo.6hfd7yovo72tnsd7isd5slt97', '5' ],		#self : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Object',				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Snake\r\tinstanceVariableNames: \'cells color size health\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #Snake,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #cells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #size,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #Snake,						#isMetaSide : false					},					#name : #health,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Snake class\r\tinstanceVariableNames: \'\''				},				#name : #'Snake class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Snake,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:41:47.259101+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueCells redCells blueDirection redDirection color timer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #timer,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueCells redCells blueDirection redDirection color timer blueSnake\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueCells,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redCells,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #timer,					#parent : @35				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueSnake,					#parent : @35				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @35			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @35,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:41:48.763101+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueCells redCells blueDirection redDirection color timer blueSnake\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #timer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueSnake,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueCells redCells blueDirection redDirection color timer blueSnake redSnake\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueCells,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redCells,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #timer,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueSnake,					#parent : @37				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redSnake,					#parent : @37				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @37			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @37,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:41:48.934101+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 600.',			#stamp : 'p 6/24/2017 16:31',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\ttimer := 600.',			#stamp : 'p 6/24/2017 18:41',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:42:06.216101+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueCells redCells blueDirection redDirection color timer blueSnake redSnake\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #timer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueSnake,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redSnake,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueDirection redDirection color timer blueSnake redSnake\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @39				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @39				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @39				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @39				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #timer,					#parent : @39				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueSnake,					#parent : @39				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redSnake,					#parent : @39				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @39			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @39,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:42:21.603101+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\ttimer := 600.',			#stamp : 'p 6/24/2017 18:41',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\t\r\t\r\t\r\ttimer := 600.',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:42:34.052101+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #cells class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #color class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #size class: Snake classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #health class: Snake classVariable: false)'			}		]	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2017-06-24T18:42:34.071101+02:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #cells,			#protocol : #accessing,			#sourceCode : 'cells\r\t^ cells',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2017-06-24T18:42:34.084101+02:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'cells:',			#protocol : #accessing,			#sourceCode : 'cells: anObject\r\tcells := anObject',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2017-06-24T18:42:34.093101+02:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #color,			#protocol : #accessing,			#sourceCode : 'color\r\t^ color',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2017-06-24T18:42:34.101101+02:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'color:',			#protocol : #accessing,			#sourceCode : 'color: anObject\r\tcolor := anObject',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2017-06-24T18:42:34.111101+02:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #size1,			#protocol : #accessing,			#sourceCode : 'size1\r\t^ size',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2017-06-24T18:42:34.119101+02:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'size:',			#protocol : #accessing,			#sourceCode : 'size: anObject\r\tsize := anObject',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ],		#time : DateAndTime [ '2017-06-24T18:42:34.128101+02:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #health,			#protocol : #accessing,			#sourceCode : 'health\r\t^ health',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2017-06-24T18:42:34.136101+02:00' ],		#trigger : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Snake,				#isMetaSide : false			},			#name : #'health:',			#protocol : #accessing,			#sourceCode : 'health: anObject\r\thealth := anObject',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:44:14.076101+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\t\r\t\r\t\r\ttimer := 600.',			#stamp : 'p 6/24/2017 18:42',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\t"blueCells := OrderedCollection new.\r\tredCells := OrderedCollection new."\r\tblueSnake := Snake new.\r\tredSnake := Snake new.\r\t\r\tblueSnake size: 4.\r\tblueSnake cells: OrderedCollection new.\r\tblueSnake color: Color blue.\r\tblueSnake health: 10.\r\t\r\tredSnake size: 4.\r\tredSnake cells: OrderedCollection new.\r\tredSnake color: Color red.\r\tredSnake health: 10.\r\t\t\r\ttimer := 600.',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:44:24.039101+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpCompositeRefactoring {		#childrenRefactorings : [			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #board class: SnakeModel classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #blueDirection class: SnakeModel classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #redDirection class: SnakeModel classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #color class: SnakeModel classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #timer class: SnakeModel classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #blueSnake class: SnakeModel classVariable: false)'			},			EpGenericRefactoring {				#storeString : '(RBCreateAccessorsForVariableRefactoring variable: #redSnake class: SnakeModel classVariable: false)'			}		]	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2017-06-24T18:44:24.062101+02:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'blueDirection1:',			#protocol : #accessing,			#sourceCode : 'blueDirection1: anObject\r\tblueDirection := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2017-06-24T18:44:24.075101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'redDirection1:',			#protocol : #accessing,			#sourceCode : 'redDirection1: anObject\r\tredDirection := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2017-06-24T18:44:24.086101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #color,			#protocol : #accessing,			#sourceCode : 'color\r\t^ color',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2017-06-24T18:44:24.099101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'color:',			#protocol : #accessing,			#sourceCode : 'color: anObject\r\tcolor := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2017-06-24T18:44:24.112101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #timer,			#protocol : #accessing,			#sourceCode : 'timer\r\t^ timer',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2017-06-24T18:44:24.123101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'timer:',			#protocol : #accessing,			#sourceCode : 'timer: anObject\r\ttimer := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2017-06-24T18:44:24.136101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #blueSnake,			#protocol : #accessing,			#sourceCode : 'blueSnake\r\t^ blueSnake',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2017-06-24T18:44:24.147101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'blueSnake:',			#protocol : #accessing,			#sourceCode : 'blueSnake: anObject\r\tblueSnake := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2017-06-24T18:44:24.159101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #redSnake,			#protocol : #accessing,			#sourceCode : 'redSnake\r\t^ redSnake',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2017-06-24T18:44:24.167101+02:00' ],		#trigger : OmReference [ '17' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'redSnake:',			#protocol : #accessing,			#sourceCode : 'redSnake: anObject\r\tredSnake := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:44:38.277101+02:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'blueDirection1:',			#protocol : #accessing,			#sourceCode : 'blueDirection1: anObject\r\tblueDirection := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:44:43.377101+02:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'redDirection1:',			#protocol : #accessing,			#sourceCode : 'redDirection1: anObject\r\tredDirection := anObject',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:45:10.531101+02:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'blueCells:',			#protocol : #accessing,			#sourceCode : 'blueCells: anObject\r\tblueCells := anObject',			#stamp : 'Patrick 6/22/2017 14:05',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'blueCells:',			#protocol : #accessing,			#sourceCode : 'blueCells: anObject\r\tblueSnake cells: anObject',			#stamp : 'p 6/24/2017 18:45',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:45:25.401101+02:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #blueCells,			#protocol : #accessing,			#sourceCode : 'blueCells\r\t^ blueCells',			#stamp : 'Patrick 6/22/2017 14:05',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #blueCells,			#protocol : #accessing,			#sourceCode : 'blueCells\r\t^ blueSnake cells.',			#stamp : 'p 6/24/2017 18:45',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:46:16.520101+02:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #redCells,			#protocol : #accessing,			#sourceCode : 'redCells\r\t^ redCells',			#stamp : 'Patrick 6/22/2017 14:06',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #redCells,			#protocol : #accessing,			#sourceCode : 'redCells\r\t^ redSnake cells.',			#stamp : 'p 6/24/2017 18:46',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:46:26.388101+02:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'redCells:',			#protocol : #accessing,			#sourceCode : 'redCells: anObject\r\tredCells := anObject',			#stamp : 'Patrick 6/22/2017 14:06',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'redCells:',			#protocol : #accessing,			#sourceCode : 'redCells: anObject\r\tredSnake cells: anObject',			#stamp : 'p 6/24/2017 18:46',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:46:36.870101+02:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #timer,			#protocol : #accessing,			#sourceCode : 'timer\r\t^ timer',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #timer,			#protocol : #execution,			#sourceCode : 'timer\r\t^ timer',			#stamp : 'p 6/24/2017 18:44',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:47:33.280101+02:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\ttimer = 0\r\t\tifTrue: [\r\t\t\t(redCells size) > (blueCells size)\r\t\t\t\tifTrue: [ ^\'Red\' ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\t(redCells size) < (blueCells size)\r\t\t\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t\t\t].\r\t\t]\r\t\tifFalse: [ ^nil ].',			#stamp : 'p 6/24/2017 16:26',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\ttimer = 0\r\t\tifTrue: [\r\t\t\t(redSnake cells size) > (blueSnake cells size)\r\t\t\t\tifTrue: [ ^\'Red\' ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\t(redSnake cells size) < (redSnake cells size)\r\t\t\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t\t\t].\r\t\t]\r\t\tifFalse: [ ^nil ].',			#stamp : 'p 6/24/2017 18:47',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:48:47.003101+02:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeSteps,			#protocol : #execution,			#sourceCode : 'executeSteps\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 16:29',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:49:18.470101+02:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 16:30',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake cells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake cells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake cells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake cells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake cells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake cells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake cells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake cells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 18:49',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:51:15.317101+02:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: cellColor\r\t"respawns a snake to its fixed starting location"\r\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(cellColor = Color red)\r\t\tifTrue: [ spawnPlace := 6. snakeSize := redCells size. cells := redCells. redDirection := #north. offsetSign := (-1) ]\r\t\tifFalse: [ spawnPlace := 20. snakeSize := blueCells size. cells := blueCells. blueDirection := #south. offsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: cellColor asString ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: cellColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'ChristophGross 6/23/2017 18:34',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: cellColor\r\t"respawns a snake to its fixed starting location"\r\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(cellColor = Color red)\r\t\tifTrue: [\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: cellColor asString ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: cellColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 18:51',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:54:25.264101+02:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\ttimer = 0\r\t\tifTrue: [\r\t\t\t(redSnake cells size) > (blueSnake cells size)\r\t\t\t\tifTrue: [ ^\'Red\' ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\t(redSnake cells size) < (redSnake cells size)\r\t\t\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t\t\t].\r\t\t]\r\t\tifFalse: [ ^nil ].',			#stamp : 'p 6/24/2017 18:47',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t(redSnake health = 0)\r\t\tifTrue: [ ^\'Blue\' ].\r\t(blueSnake health = 0)\r\t\tifTrue: [ ^\'Red\' ].\r\ttimer = 0\r\t\tifTrue: [\r\t\t\t(redSnake cells size) > (blueSnake cells size)\r\t\t\t\tifTrue: [ ^\'Red\' ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\t(redSnake cells size) < (redSnake cells size)\r\t\t\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t\t\t].\r\t\t]\r\t\tifFalse: [ ^nil ].',			#stamp : 'p 6/24/2017 18:54',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:56:27.753101+02:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: cellColor\r\t"respawns a snake to its fixed starting location"\r\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(cellColor = Color red)\r\t\tifTrue: [\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: cellColor asString ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: cellColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 18:51',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: player\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(player color = Color red)\r\t\tifTrue: [\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: (player color asString) ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: player color ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 18:56',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:57:47.626101+02:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #execution,			#sourceCode : 'moveEast: ordered\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := ordered first.\r\tplayerColor := firstCell color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: ordered col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := ordered last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\tordered addFirst: newCell.\r\t\t\t\tordered removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'ChristophGross 6/23/2017 19:50',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #execution,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: player ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 18:57',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:58:14.286101+02:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveNorth:',			#protocol : #execution,			#sourceCode : 'moveNorth: ordered\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := ordered first.\r\tplayerColor := firstCell color.\r\t(firstCell row = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: ordered col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \r\t\t\t\tnewCell := board rows: (firstCell row)+1 at: (firstCell column).\r\t\t\t\tlastCell := ordered last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\tordered addFirst: newCell.\r\t\t\t\tordered removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'ChristophGross 6/23/2017 19:50',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveNorth:',			#protocol : #execution,			#sourceCode : 'moveNorth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell row = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \r\t\t\t\tnewCell := board rows: (firstCell row)+1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 18:58',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:58:27.896101+02:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveSouth:',			#protocol : #execution,			#sourceCode : 'moveSouth: ordered\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := ordered first.\r\tplayerColor := firstCell color.\r\t(firstCell row = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: ordered col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \t\t\t\r\t\t\t\tnewCell := board rows: (firstCell row)-1 at: (firstCell column).\r\t\t\t\tlastCell := ordered last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\tordered addFirst: newCell.\r\t\t\t\tordered removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'ChristophGross 6/23/2017 19:51',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveSouth:',			#protocol : #execution,			#sourceCode : 'moveSouth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell row = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \t\t\t\r\t\t\t\tnewCell := board rows: (firstCell row)-1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 18:58',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:58:38.824101+02:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveWest:',			#protocol : #execution,			#sourceCode : 'moveWest: ordered\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := ordered first.\r\tplayerColor := firstCell color.\r\t(firstCell column = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: ordered col: playerColor.\r\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)+1.\r\t\t\t\tlastCell := ordered last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\tordered addFirst: newCell.\r\t\t\t\tordered removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'ChristophGross 6/23/2017 19:52',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveWest:',			#protocol : #execution,			#sourceCode : 'moveWest: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell column = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)+1.\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 18:58',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T18:59:16.643101+02:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake cells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake cells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake cells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake cells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake cells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake cells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake cells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake cells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 18:49',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 18:59',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:00:57.975101+02:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 18:59',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\tremainingTime := timer/5. "since each tick has 200ms -> 5 per second"\r\tboard messageArea contents: ((board messageArea contents), \' Time remaining: \', (timer asString),\'s\').',			#stamp : 'p 6/24/2017 19:00',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:01:36.570101+02:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 16:22',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\tmessageArea contents: \'\'.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 19:01',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:02:55.263101+02:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\tremainingTime := timer/5. "since each tick has 200ms -> 5 per second"\r\tboard messageArea contents: ((board messageArea contents), \' Time remaining: \', (timer asString),\'s\').',			#stamp : 'p 6/24/2017 19:00',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\t(timer%50 = 0)\r\t\tifTrue: [board messageArea contents: (\'Time remaining: \', (timer asString),\'s\').]',			#stamp : 'p 6/24/2017 19:02',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:03:35.658101+02:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\t(timer%50 = 0)\r\t\tifTrue: [board messageArea contents: (\'Time remaining: \', (timer asString),\'s\').]',			#stamp : 'p 6/24/2017 19:02',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\t((timer%50) = 0)\r\t\tifTrue: [board messageArea contents: (\'Steps remaining: \', (timer asString),\'s\').]',			#stamp : 'p 6/24/2017 19:03',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:03:44.495101+02:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\t((timer%50) = 0)\r\t\tifTrue: [board messageArea contents: (\'Steps remaining: \', (timer asString),\'s\').]',			#stamp : 'p 6/24/2017 19:03',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\t((timer%5) = 0)\r\t\tifTrue: [board messageArea contents: (\'Steps remaining: \', (timer asString),\'s\').]',			#stamp : 'p 6/24/2017 19:03',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:04:03.887101+02:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\t((timer%5) = 0)\r\t\tifTrue: [board messageArea contents: (\'Steps remaining: \', (timer asString),\'s\').]',			#stamp : 'p 6/24/2017 19:03',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueSnake ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueSnake ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueSnake ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueSnake ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redSnake ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redSnake ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redSnake ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redSnake ].\r\t\r\ttimer := timer - 1.\r\t((timer%25) = 0)\r\t\tifTrue: [board messageArea contents: (\'Steps remaining: \', (timer asString)).]',			#stamp : 'p 6/24/2017 19:04',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:07:50.213101+02:00' ],		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: player\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(player color = Color red)\r\t\tifTrue: [\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: (player color asString) ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: player color ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 18:56',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: (playerColor asString) ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 19:07',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:08:15.711101+02:00' ],		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveWest:',			#protocol : #execution,			#sourceCode : 'moveWest: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell column = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)+1.\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 18:58',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveWest:',			#protocol : #execution,			#sourceCode : 'moveWest: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)+1.\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:08:22.269101+02:00' ],		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveSouth:',			#protocol : #execution,			#sourceCode : 'moveSouth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell row = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \t\t\t\r\t\t\t\tnewCell := board rows: (firstCell row)-1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 18:58',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveSouth:',			#protocol : #execution,			#sourceCode : 'moveSouth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell row = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \t\t\t\r\t\t\t\tnewCell := board rows: (firstCell row)-1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:08:26.563101+02:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveNorth:',			#protocol : #execution,			#sourceCode : 'moveNorth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell row = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \r\t\t\t\tnewCell := board rows: (firstCell row)+1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:06',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveNorth:',			#protocol : #execution,			#sourceCode : 'moveNorth: player\r\t| firstCell newCell lastCell playerColor retCol |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell row = 25)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.\r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [ \r\t\t\t\tnewCell := board rows: (firstCell row)+1 at: (firstCell column).\r\t\t\t\tlastCell := (player cells) last.\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:08:30.720101+02:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #execution,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := firstCell color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: player ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 18:57',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #execution,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: player ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:08:35.082101+02:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #execution,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: player ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'moveEast:',			#protocol : #execution,			#sourceCode : 'moveEast: player\r\t| retCol firstCell newCell lastCell playerColor |\r\tfirstCell := (player cells) first.\r\tplayerColor := player color.\r\t(firstCell column = 1)\r\t\tifTrue: [ self respawn: playerColor ]\r\t\tifFalse: [\r\t\t\r\t\tretCol := self checkCollision: (player cells) col: playerColor.  \r\t\t\t\r\t\t(retCol = playerColor)\r\t\t\tifTrue: [ self respawn: playerColor ].\r\t\t(retCol = Color lightGray)\r\t\t\tifFalse: [ self respawn: retCol ]\r\t\t\tifTrue: [\r\t\t\t\tnewCell := board rows: (firstCell row) at: (firstCell column)-1.\r\t\t\t\tlastCell := (player cells) last.\t\t\r\t\r\t\t\t\tnewCell color: playerColor.\r\t\t\t\tlastCell color: Color lightGray.\r\t\r\t\t\t\t(player cells) addFirst: newCell.\r\t\t\t\t(player cells) removeLast.\r\t\t\t]\r\t\t].',			#stamp : 'p 6/24/2017 19:08',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:10:26.403101+02:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: (playerColor asString) ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 19:07',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake health: (redSnake health) - 1.\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake health: (blueSnake health) - 1.\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: (playerColor asString) ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 19:10',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:12:28.236101+02:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake health: (redSnake health) - 1.\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake health: (blueSnake health) - 1.\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\tmsg := String streamContents: [:stream | stream nextPutAll: \'respawn for snake: \'; nextPutAll: (playerColor asString) ].\r\tboard messageArea contents: msg. \r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 19:10',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake health: (redSnake health) - 1.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake health: (blueSnake health) - 1.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 19:12',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T19:12:35.366101+02:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign msg newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake health: (redSnake health) - 1.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake health: (blueSnake health) - 1.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 19:12',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #'respawn:',			#protocol : #execution,			#sourceCode : 'respawn: playerColor\r\t"respawns a snake to its fixed starting location"\r\t| offsetSign newCell cells snakeSize spawnPlace |\r\t\r\t(playerColor = Color red)\r\t\tifTrue: [\r\t\t\tredSnake health: (redSnake health) - 1.\r\t\t\tboard messageArea contents: (\'Red snake health: \',(redSnake health) asString).\r\t\t\tspawnPlace := 6.\r\t\t\tsnakeSize := redSnake cells size.\r\t\t\tcells := redSnake cells.\r\t\t\tredDirection := #north.\r\t\t\toffsetSign := (-1) ]\r\t\tifFalse: [\r\t\t\tblueSnake health: (blueSnake health) - 1.\r\t\t\tboard messageArea contents: (\'Blue snake health: \',(blueSnake health) asString).\r\t\t\tspawnPlace := 20.\r\t\t\tsnakeSize := blueSnake cells size.\r\t\t\tcells := blueSnake cells.\r\t\t\tblueDirection := #south.\r\t\t\toffsetSign := 1 ].\r\r\t[ cells isEmpty ] whileFalse: [ cells last color: Color lightGray. cells removeLast ].\r\t\r\t1 to: snakeSize do: [ :offset | \r\t\tnewCell := (board rows at: spawnPlace + (offset*offsetSign)) at: spawnPlace.\r\t\t(cells isEmpty)\r\t\t\tifTrue: [newCell color: playerColor ]\r\t\t\tifFalse: [ newCell color: Color lightGray ].\r\t\tcells addLast: newCell\r\t].',			#stamp : 'p 6/24/2017 19:12',			#package : #snake_game		}	}}