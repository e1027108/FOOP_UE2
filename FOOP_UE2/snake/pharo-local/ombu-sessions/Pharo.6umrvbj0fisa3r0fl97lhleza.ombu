OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:01:37.171294+02:00' ],		#prior : OmReference [ 'Pharo.ewp902yjv31y1uddw66evdzsf', '27' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up blue"\r\t\tifTrue: [ parent model blueDirection: #north. parent messageArea contents: \'up\' ].\r\tkey = 31 "down blue"\r\t\tifTrue: [ parent model blueDirection: #south. parent messageArea contents: \'down\' ].\r\tkey = 29 "right blue"\r\t\tifTrue: [ parent model blueDirection: #east. parent messageArea contents: \'right\' ].\r\tkey = 28 "left blue"\r\t\tifTrue: [ parent model blueDirection: #west. parent messageArea contents: \'left\' ].\r\tkey = 119 "red up (w)"\r\t\tifTrue: [ parent model redDirection: #north. parent messageArea contents: \'w\' ].\r\tkey = 115 "red down (s)"\r\t\tifTrue: [ parent model redDirection: #south. parent messageArea contents: \'s\' ].\r\tkey = 100 "red right (d)"\r\t\tifTrue: [ parent model redDirection: #east. parent messageArea contents: \'d\' ].\r\tkey = 97 "red left (a)"\r\t\tifTrue: [ parent model redDirection: #west. parent messageArea contents: \'a\' ].',			#stamp : 'Patrick 6/22/2017 18:26',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up red"\r\t\tifTrue: [ parent model redDirection: #north. parent messageArea contents: \'up\' ].\r\tkey = 31 "down red"\r\t\tifTrue: [ parent model redDirection: #south. parent messageArea contents: \'down\' ].\r\tkey = 29 "right red"\r\t\tifTrue: [ parent model redDirection: #east. parent messageArea contents: \'right\' ].\r\tkey = 28 "left red"\r\t\tifTrue: [ parent model redDirection: #west. parent messageArea contents: \'left\' ].\r\tkey = 119 "blue up (w)"\r\t\tifTrue: [ parent model blueDirection: #north. parent messageArea contents: \'w\' ].\r\tkey = 115 "blue down (s)"\r\t\tifTrue: [ parent model blueDirection: #south. parent messageArea contents: \'s\' ].\r\tkey = 100 "blue right (d)"\r\t\tifTrue: [ parent model blueDirection: #east. parent messageArea contents: \'d\' ].\r\tkey = 97 "blue left (a)"\r\t\tifTrue: [ parent model blueDirection: #west. parent messageArea contents: \'a\' ].',			#stamp : 'p 6/24/2017 16:01',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:02:26.736294+02:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #addControls,			#protocol : #initialize,			#sourceCode : 'addControls\r\t| rowMorph startBtn |\r\trowMorph := Morph new \r\t\tlayoutPolicy: RowLayout new;\r\t\textent: 500@50;\r\t\tcolor: Color transparent.\r\tstartBtn := self createButton: \'Start\' onClickExecutes: [ self start ].\r\tmessageArea := self createTextArea: \'Welcome to Snake! (WASD controls red, arrow keys control blue)\'.\r\trowMorph addMorph: messageArea.\r\trowMorph addMorph: startBtn.\r\tcontainer addMorph: rowMorph.',			#stamp : 'Patrick 6/22/2017 15:12',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #addControls,			#protocol : #initialize,			#sourceCode : 'addControls\r\t| rowMorph startBtn |\r\trowMorph := Morph new \r\t\tlayoutPolicy: RowLayout new;\r\t\textent: 500@50;\r\t\tcolor: Color transparent.\r\tstartBtn := self createButton: \'Start\' onClickExecutes: [ self start ].\r\tmessageArea := self createTextArea: \'Welcome to Snake! (arrow keys control red, WASD controls blue)\'.\r\trowMorph addMorph: messageArea.\r\trowMorph addMorph: startBtn.\r\tcontainer addMorph: rowMorph.',			#stamp : 'p 6/24/2017 16:02',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:10:59.352294+02:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t]] fork.',			#stamp : 'p 6/24/2017 16:08',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \'wins\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 16:10',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:11:23.783294+02:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t^nil.',			#stamp : 'Patrick 6/22/2017 17:57',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t^\'Blue\'.',			#stamp : 'p 6/24/2017 16:11',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:11:57.620294+02:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \'wins\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 16:10',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 16:11',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:12:28.186294+02:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueCells redCells blueDirection redDirection color\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redCells,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#superclassName : 'Matrix',				#traitCompositionSource : '{}',				#definitionSource : 'Matrix subclass: #SnakeModel\r\tinstanceVariableNames: \'board blueCells redCells blueDirection redDirection color timer\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'snake_game\''			},			#name : #SnakeModel,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #board,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueCells,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redCells,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #blueDirection,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #redDirection,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #color,					#parent : @33				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #SnakeModel,						#isMetaSide : false					},					#name : #timer,					#parent : @33				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'SnakeModel class\r\tinstanceVariableNames: \'\''				},				#name : #'SnakeModel class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @33			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #SnakeModel,					#isMetaSide : false				},				#parent : @33,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #snake_game,			#package : #snake_game,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:13:16.452294+02:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.',			#stamp : 'Patrick 6/22/2017 15:06',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 100.',			#stamp : 'p 6/24/2017 16:13',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:15:51.233294+02:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t^\'Blue\'.',			#stamp : 'p 6/24/2017 16:11',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t(timer = 0 & ((redCells size) > (blueCells size)))\r\t\tifTrue: [ ^\'Red\' ]\r\t\tifFalse: [ \r\t\t\t((redCells size) < (blueCells size))\r\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t].',			#stamp : 'p 6/24/2017 16:15',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:16:03.912294+02:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t"TODO here we want to do collision checks after movement"',			#stamp : 'ChristophGross 6/23/2017 15:19',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.',			#stamp : 'p 6/24/2017 16:16',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:18:29.686294+02:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up red"\r\t\tifTrue: [ parent model redDirection: #north. parent messageArea contents: \'up\' ].\r\tkey = 31 "down red"\r\t\tifTrue: [ parent model redDirection: #south. parent messageArea contents: \'down\' ].\r\tkey = 29 "right red"\r\t\tifTrue: [ parent model redDirection: #east. parent messageArea contents: \'right\' ].\r\tkey = 28 "left red"\r\t\tifTrue: [ parent model redDirection: #west. parent messageArea contents: \'left\' ].\r\tkey = 119 "blue up (w)"\r\t\tifTrue: [ parent model blueDirection: #north. parent messageArea contents: \'w\' ].\r\tkey = 115 "blue down (s)"\r\t\tifTrue: [ parent model blueDirection: #south. parent messageArea contents: \'s\' ].\r\tkey = 100 "blue right (d)"\r\t\tifTrue: [ parent model blueDirection: #east. parent messageArea contents: \'d\' ].\r\tkey = 97 "blue left (a)"\r\t\tifTrue: [ parent model blueDirection: #west. parent messageArea contents: \'a\' ].',			#stamp : 'p 6/24/2017 16:01',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #KeyListener,				#isMetaSide : false			},			#name : #'handleKeystroke:',			#protocol : #'keyboard control',			#sourceCode : 'handleKeystroke: event "no clue how to actually use this"\r\t| key |\r\tkey := event keyValue.\r\tkey = 30 "up red"\r\t\tifTrue: [ parent model redDirection: #north. "parent messageArea contents: \'up\'" ].\r\tkey = 31 "down red"\r\t\tifTrue: [ parent model redDirection: #south. "parent messageArea contents: \'down\'" ].\r\tkey = 29 "right red"\r\t\tifTrue: [ parent model redDirection: #east. "parent messageArea contents: \'right\'" ].\r\tkey = 28 "left red"\r\t\tifTrue: [ parent model redDirection: #west. "parent messageArea contents: \'left\'" ].\r\tkey = 119 "blue up (w)"\r\t\tifTrue: [ parent model blueDirection: #north. "parent messageArea contents: \'w\'" ].\r\tkey = 115 "blue down (s)"\r\t\tifTrue: [ parent model blueDirection: #south. "parent messageArea contents: \'s\'" ].\r\tkey = 100 "blue right (d)"\r\t\tifTrue: [ parent model blueDirection: #east. "parent messageArea contents: \'d\'" ].\r\tkey = 97 "blue left (a)"\r\t\tifTrue: [ parent model blueDirection: #west. "parent messageArea contents: \'a\'" ].',			#stamp : 'p 6/24/2017 16:18',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:18:56.551294+02:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.',			#stamp : 'p 6/24/2017 16:16',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: timer asString.',			#stamp : 'p 6/24/2017 16:18',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:21:23.239294+02:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 16:11',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\t"winner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]"\r\t]] fork.',			#stamp : 'p 6/24/2017 16:21',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:22:02.123294+02:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\t"winner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]"\r\t]] fork.',			#stamp : 'p 6/24/2017 16:21',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeGame,				#isMetaSide : false			},			#name : #start,			#protocol : #starting,			#sourceCode : 'start\r\t| redCell blueCell winner |\r\t"0/0 is right bottom corner, 25/25 left top corner"\r\tredCell := (rows at: 6) at: 6.\r\tblueCell := (rows at: 20) at: 20.\r\tredCell color: Color red.\r\tblueCell color: Color blue.\r\t\r\tmodel blueCells addFirst: blueCell.\r\tmodel redCells addFirst: redCell.\r\t\r\t1 to: 3 do: [ :offset |\r\t\t| newCell |\r\t\tnewCell := (rows at: (blueCell row)+offset) at: (blueCell column).\r\t\tmodel blueCells addLast: newCell.\r\t\tnewCell := (rows at: (redCell row)-offset) at: (redCell column).\r\t\tmodel redCells addLast: newCell.\r\t].\r\t\r\tkeyListener takeKeyboardFocus.\r\t\r\twinner := nil.\r\t\r\t"the game loop code ought to give us a winner at some point"\r\t[[winner isNil ] whileTrue: [ \r\t\t| delay |\r\t\tdelay := (Delay forMilliseconds: 200).\r\t\tdelay wait.\r\t\tmodel executeStep.\r\t\twinner := model checkWinner.\r\t\t\r\t\twinner notNil\r\t\t\tifTrue: [ messageArea contents: (winner, \' wins!\') ]\r\t]] fork.',			#stamp : 'p 6/24/2017 16:22',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:22:15.625294+02:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t(timer = 0 & ((redCells size) > (blueCells size)))\r\t\tifTrue: [ ^\'Red\' ]\r\t\tifFalse: [ \r\t\t\t((redCells size) < (blueCells size))\r\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t].',			#stamp : 'p 6/24/2017 16:20',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t((timer = 0) & ((redCells size) > (blueCells size)))\r\t\tifTrue: [ ^\'Red\' ]\r\t\tifFalse: [ \r\t\t\t((redCells size) < (blueCells size))\r\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t].',			#stamp : 'p 6/24/2017 16:22',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:22:32.071294+02:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t((timer = 0) & ((redCells size) > (blueCells size)))\r\t\tifTrue: [ ^\'Red\' ]\r\t\tifFalse: [ \r\t\t\t((redCells size) < (blueCells size))\r\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t].',			#stamp : 'p 6/24/2017 16:22',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t((timer = 0) and: ((redCells size) > (blueCells size)))\r\t\tifTrue: [ ^\'Red\' ]\r\t\tifFalse: [ \r\t\t\t((redCells size) < (blueCells size))\r\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t].',			#stamp : 'p 6/24/2017 16:22',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:24:16.010294+02:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\t((timer = 0) and: ((redCells size) > (blueCells size)))\r\t\tifTrue: [ ^\'Red\' ]\r\t\tifFalse: [ \r\t\t\t((redCells size) < (blueCells size))\r\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t].',			#stamp : 'p 6/24/2017 16:22',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\ttimer = 0\r\t\tifTrue: [\r\t\t\t(redCells size) > (blueCells size)\r\t\t\t\tifTrue: [ ^\'Red\' ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\t(redCells size) < (blueCells size)\r\t\t\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t\t\t].\r\t\t].',			#stamp : 'p 6/24/2017 16:24',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:26:05.944294+02:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\ttimer = 0\r\t\tifTrue: [\r\t\t\t(redCells size) > (blueCells size)\r\t\t\t\tifTrue: [ ^\'Red\' ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\t(redCells size) < (blueCells size)\r\t\t\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t\t\t].\r\t\t].',			#stamp : 'p 6/24/2017 16:24',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #checkWinner,			#protocol : #evaluation,			#sourceCode : 'checkWinner "TODO evaluate a winner depending on snake stats --> TODO implement snake with stats"\r\ttimer = 0\r\t\tifTrue: [\r\t\t\t(redCells size) > (blueCells size)\r\t\t\t\tifTrue: [ ^\'Red\' ]\r\t\t\t\tifFalse: [ \r\t\t\t\t\t(redCells size) < (blueCells size)\r\t\t\t\t\t\tifTrue: [ ^\'Blue\' ]\t\r\t\t\t\t\t\tifFalse: [ ^\'No one\' ].\r\t\t\t\t].\r\t\t]\r\t\tifFalse: [ ^nil ].',			#stamp : 'p 6/24/2017 16:26',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:27:04.584294+02:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 100.',			#stamp : 'p 6/24/2017 16:13',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 600.',			#stamp : 'p 6/24/2017 16:27',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:27:46.427294+02:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: timer asString.',			#stamp : 'p 6/24/2017 16:18',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Time remaining: \', (timer/60) asString).',			#stamp : 'p 6/24/2017 16:27',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:28:02.998294+02:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Time remaining: \', (timer/60) asString).',			#stamp : 'p 6/24/2017 16:27',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Time remaining: \', ((timer/60)) asString).',			#stamp : 'p 6/24/2017 16:28',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:29:09.847294+02:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Time remaining: \', ((timer/60)) asString).',			#stamp : 'p 6/24/2017 16:28',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', timer/60 asString).',			#stamp : 'p 6/24/2017 16:29',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:29:39.451294+02:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeSteps,			#protocol : #execution,			#sourceCode : 'executeSteps\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 16:29',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:30:26.148294+02:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t| remainingTime |\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', timer/60 asString).',			#stamp : 'p 6/24/2017 16:29',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', timer/60 asString).',			#stamp : 'p 6/24/2017 16:30',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:30:35.883294+02:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', timer/60 asString).',			#stamp : 'p 6/24/2017 16:30',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #executeStep,			#protocol : #execution,			#sourceCode : 'executeStep\r\t\r\tblueDirection = #north\r\t\tifTrue: [ self moveNorth: blueCells ].\r\tblueDirection = #south\r\t\tifTrue: [ self moveSouth: blueCells ].\r\tblueDirection = #east\r\t\tifTrue: [ self moveEast: blueCells ].\r\tblueDirection = #west\r\t\tifTrue: [ self moveWest: blueCells ].\r\t\t\r\tredDirection = #north\r\t\tifTrue: [ self moveNorth: redCells ].\r\tredDirection = #south\r\t\tifTrue: [ self moveSouth: redCells ].\r\tredDirection = #east\r\t\tifTrue: [ self moveEast: redCells ].\r\tredDirection = #west\r\t\tifTrue: [ self moveWest: redCells ].\r\t\r\ttimer := timer - 1.\r\tboard messageArea contents: (\'Steps remaining: \', (timer asString)).',			#stamp : 'p 6/24/2017 16:30',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:31:11.203294+02:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 600.',			#stamp : 'p 6/24/2017 16:27',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 10.',			#stamp : 'p 6/24/2017 16:31',			#package : #snake_game		}	}}OmEntry {	#tags : {		#author : 'p',		#time : DateAndTime [ '2017-06-24T16:31:24.403294+02:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 10.',			#stamp : 'p 6/24/2017 16:31',			#package : #snake_game		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #SnakeModel,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialize,			#sourceCode : 'initialize\r\tsuper initialize.\r\tblueDirection := #south.\r\tredDirection := #north.\r\tblueCells := OrderedCollection new.\r\tredCells := OrderedCollection new.\r\ttimer := 600.',			#stamp : 'p 6/24/2017 16:31',			#package : #snake_game		}	}}